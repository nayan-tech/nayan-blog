<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tensorflow-docker</title>
      <link href="/blog//uncategorized/tensorflow-docker/"/>
      <url>/blog//uncategorized/tensorflow-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container"><a href="#Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container" class="headerlink" title="Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container."></a>Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container.</h1><p>I have come across many developers who face serious issues when it comes to installing <strong>tensorflow</strong> on a <strong>linux</strong> distro such as <strong>Ubuntu</strong>. There are very few instances when the installation goes smoothly the first time itself. Mostly, the developer has to face a plethora of error messages which get quite tricky to solve. Some of the error messages are shown below:</p><pre><code>[...\stream_executor\dso_loader.cc] Couldn&apos;t open CUDA library nvcuda.dll[...\stream_executor\cuda\cuda_dnn.cc] Unable to load cuDNN DSO</code></pre><p>Similar error messages can be found in this official tensorflow link → <a href="https://www.tensorflow.org/install/errors" target="_blank" rel="noopener"><strong><em>https://www.tensorflow.org/install/errors</em></strong></a></p><p>Let’s make things easier and lives simpler:</p><h2 id="Enter-Docker"><a href="#Enter-Docker" class="headerlink" title="Enter Docker:"></a>Enter Docker:</h2><p>Using <strong><em>Docker</em></strong> containers the life of a developer becomes easier by a massive amount. Many developers shy away from using docker containers thinking that it introduces extra dependencies into the system followed by maintenance issues, but that’s a misconception.</p><p><strong><em>Docker</em></strong> containers actually reduce the time spent on figuring out different library versions to be installed and how they would communicate with one another. Containers solve multiple issues which arise with incompatibility of libraries and version mismatch. A container is completely independent from it’s host and reduces the chances of ruining environments on the host machine</p><h3 id="Installing-Docker-and-NVIDIA-Docker"><a href="#Installing-Docker-and-NVIDIA-Docker" class="headerlink" title="Installing Docker and NVIDIA Docker :"></a>Installing Docker and NVIDIA Docker :</h3><p>In order to run <strong><em>tensorflow</em></strong> as a container we would obviously need the latest version of docker to be installed and configured. Along with that we would also need <strong><em>NVIDIA Docker v2</em></strong> to be installed on the host machine. <strong><em>NVIDIA Docker</em></strong> plays a beautiful role of exposing the host machine’s GPU and GPU drivers to a container. Hence the developer only has to worry about installing the correct <strong><em>NVIDIA GPU</em></strong> <strong><em>driver</em></strong> on this machine. The <strong><em>NVIDIA Docker v2</em></strong> does the task of making it available for the container.</p><p>In order to learn how to install the latest version of Docker and NVIDIA Docker v2 , head over to my earlier post which describes this is in detail. Link given below:</p><p><a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener"><strong>Deep Learning for Production: Deploying YOLO using Docker.</strong></a></p><h3 id="Installing-tensorflow-using-Docker"><a href="#Installing-tensorflow-using-Docker" class="headerlink" title="Installing tensorflow using Docker:"></a><strong>Installing tensorflow using Docker:</strong></h3><p>Once your docker and NVIDIA docker v2 installation is complete with <strong><em>nvidia-smi</em></strong> giving you the output as shown in Fig 1, when run inside a docker container, we can move ahead with pulling the correct image for tensorflow.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*dPZfCX1ia00A3BmTP-QQhA.jpeg" alt="Fig 1: Output of nvidia-smi inside docker container"></p><p>Simply doing a <strong><em>docker pull tensorflow/tensorflow</em></strong> would download the latest version of tensorflow image. This can be run using the following command</p><pre><code>docker run -it -rm --runtime=nvidia --name=tensorflow_container ***tensorflow_image_name***</code></pre><p>Executing the command given above will run the tensorflow container in an interactive shell along with the availability of the <strong><em>NVIDIA gpus</em></strong> inside the container.</p><p>Now there are certain modifications which can be performed to get the tensorflow <strong><em>version</em></strong> required along with other libraries. Let’s say you want the latest version of tensorflow along with <strong><em>gpu</em></strong> support and <strong><em>python 3</em></strong> pre-installed. The image for this customization can be easily pulled using the following command:</p><pre><code>docker pull tensorflow/tensorflow:latest-gpu-py3</code></pre><p>You can find many other such images in the following link →<a href="https://hub.docker.com/r/tensorflow/tensorflow/tags" target="_blank" rel="noopener"><strong><em>https://hub.docker.com/r/tensorflow/tensorflow/tags</em></strong></a></p><p>Just do a docker pull on the one which suits your requirement.</p><p>If you want other libraries along with tensorflow, you can put them in a <strong><em>dockerfile</em></strong> and perform build command.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*bRwR0nlR4-XbX-00xpY5-Q.png" alt="Fig 2: Custom dockerfile with tensorflow"></p><p>Fig 2 above shows a custom <strong><em>dockerfile</em></strong> with <strong><em>tensorflow v1</em></strong> image being used along with installation of other libraries such as <strong><em>OpenCV,Moviepy,Keras</em></strong> and <strong><em>Apache Kafka</em></strong> for python</p><p>Once inside the container invoked using docker run, you can setup code to use tensorflow easily as you would done on the host machine without the container.</p><p>I would encourage all AI/ML practitioners to increase the use of docker containers to increase their research and development efficiency by reducing the time spent in managing multiple libraries and dueling with incompatibility errors.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to add a lightweight Tooltip popup in your Android Application</title>
      <link href="/blog//Android/A-lightweight-tooltip-popup-for-Android/"/>
      <url>/blog//Android/A-lightweight-tooltip-popup-for-Android/</url>
      
        <content type="html"><![CDATA[<p>A tooltip is a small descriptive message that appears near a view when users long press the view or hover their mouse over it. This is useful when your app uses an icon to represent an action or piece of information to save space in the layout.<br>You’ve surely seen tooltips in some of your favorite products—like <code>Facebook</code>, <code>Twitter</code>, and <code>Slack</code>. When used with consideration, tooltips can be a powerful UI <a href="https://nayan.co/"><code>(User Interaction)</code></a> pattern that will guide your users to take action in your product. A good tooltip can be a great thing indeed.Below, we’ll look at how to design tooltips on Android 8.0 (API level 26) and higher that enhance the user experience and add value.</p><p><img src="/blog/Android/A-lightweight-tooltip-popup-for-Android/tooltip_1.jpg" alt="Tooltips"></p><p>A lightweight popup like tooltips, fully customizable with arrow and animations.The <a href="https://github.com/skydoves/Balloon" target="_blank" rel="noopener">balloon</a> is one of the most popular libraries.</p><h2 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h2><p>Add below codes to your build.gradle file:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//tooltips</span></span><br><span class="line">    implementation <span class="string">"com.github.skydoves:balloon:1.2.2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a balloon instance using kotlin in your activity class</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> balloon = Balloon.Builder(baseContext).apply &#123;</span><br><span class="line">    setWidthRatio(<span class="number">0.5f</span>)</span><br><span class="line">    setHeight(<span class="number">65</span>)</span><br><span class="line">    setArrowSize(<span class="number">10</span>)</span><br><span class="line">    setArrowOrientation(ArrowOrientation.BOTTOM)</span><br><span class="line">    setArrowVisible(<span class="literal">true</span>)</span><br><span class="line">    setArrowPosition(<span class="number">0.5f</span>)</span><br><span class="line">    setTextSize(<span class="number">15f</span>)</span><br><span class="line">    setCornerRadius(<span class="number">4f</span>)</span><br><span class="line">    setAlpha(<span class="number">0.9f</span>)</span><br><span class="line">    setTextColor(ContextCompat.getColor(baseContext, R.color.white))</span><br><span class="line">    setBalloonAnimation(BalloonAnimation.FADE)</span><br><span class="line">    setLifecycleOwner(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">    setAutoDismissDuration(<span class="number">5_000L</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Specific-size"><a href="#Specific-size" class="headerlink" title="Specific size"></a>Specific size</h1><p>We can set the specific size of the balloon regardless size of the contents.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">balloon.setWidth(<span class="number">220</span>)</span><br><span class="line">balloon.setHeight(<span class="number">160</span>)</span><br></pre></td></tr></table></figure><p>We can also set the width according to the ratio of the horizontal screen’s size.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">balloon.setWidthRatio(<span class="number">0.5f</span>)</span><br><span class="line">balloon.setHeight(<span class="number">65</span>)</span><br></pre></td></tr></table></figure><p>We can control the content size of the balloon using padding of the content.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">balloon.setPadding(<span class="number">6</span>)</span><br><span class="line">balloon.setPaddingLeft(<span class="number">8</span>)</span><br><span class="line">balloon.setPaddingTop(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>If the location of the tooltip is located at the boundaries on the screen, the tooltip will be stick to the end of the screen. In that case, we can resolve by giving margins to the balloon.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ballon.setMargin(<span class="number">12</span>)</span><br><span class="line">ballon.setMarginLeft(<span class="number">14</span>)</span><br><span class="line">ballon.setMarginRight(<span class="number">14</span>)</span><br></pre></td></tr></table></figure><h1 id="Arrow-Composition"><a href="#Arrow-Composition" class="headerlink" title="Arrow Composition"></a>Arrow Composition</h1><p>We can customize the arrow on the tooltip popup. We can customize the visibility, size, position based on ratio, orientation and drawable.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">balloon.setArrowVisible(<span class="literal">true</span>)</span><br><span class="line">balloon.setArrowSize(<span class="number">10</span>)</span><br><span class="line">balloon.setArrowPosition(<span class="number">0.8f</span>)</span><br><span class="line">balloon.setArrowOrientation(ArrowOrientation.BOTTOM)</span><br><span class="line">balloon.setArrowDrawable(ContextCompat.getDrawable(context, R.drawable.arrow))</span><br></pre></td></tr></table></figure><h1 id="Text-Composition"><a href="#Text-Composition" class="headerlink" title="Text Composition"></a>Text Composition</h1><p>We can customize the text on the tooltip popup.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">balloon.setText(<span class="string">"Facebook Login"</span>)</span><br><span class="line">balloon.setTextSize(<span class="number">15f</span>)</span><br><span class="line">balloon.setTextTypeface(Typeface.BOLD)</span><br><span class="line">balloon.setTextColor(ContextCompat.getColor(context,R.color.white_87))</span><br></pre></td></tr></table></figure><h1 id="Listeners-OnBalloonClickListener-OnBalloonDismissListener-OnBalloonOutsideTouchListener"><a href="#Listeners-OnBalloonClickListener-OnBalloonDismissListener-OnBalloonOutsideTouchListener" class="headerlink" title="Listeners (OnBalloonClickListener, OnBalloonDismissListener, OnBalloonOutsideTouchListener)"></a>Listeners (OnBalloonClickListener, OnBalloonDismissListener, OnBalloonOutsideTouchListener)</h1><p>We can listen to the balloon popup is clicked, dismissed or touched outside using listeners.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">balloon.setOnBalloonClickListener(new OnBalloonClickListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> void onBalloonClick() &#123;</span><br><span class="line">    <span class="comment">// doSomething;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">balloon.setOnBalloonDismissListener(new OnBalloonDismissListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> void onBalloonDismiss() &#123;</span><br><span class="line">    <span class="comment">// doSomething;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">balloon.setOnBalloonOutsideTouchListener(new OnBalloonOutsideTouchListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> void onBalloonOutsideTouch() &#123;</span><br><span class="line">    <span class="comment">// doSomething;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>And we are done!</p><p><img src="/blog/Android/A-lightweight-tooltip-popup-for-Android/tooltip_3.gif" alt="Tooltip"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://developer.android.com/guide/topics/ui/tooltips" target="_blank" rel="noopener">Tooltips</a></li><li><a href="https://github.com/skydoves/Balloon" target="_blank" rel="noopener">Tooltips Docs</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/">Lottie Animation</a></li><li><a href="https://nayan.co/blog/Android/Applying-Proguard-in-an-android-application/">How to apply Proguard in an android application</a></li></ol><p>p.s. <a href="https://nayan.co/">Nayan</a> is a platform that offers high precision services for <a href="https://nayan.co/">traffic monitoring</a> and <a href="https://nayan.co/">road safety</a>. Check out our <a href="https://nayan.co/">website</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> tooltip </tag>
            
            <tag> kotlin </tag>
            
            <tag> nayan </tag>
            
            <tag> user interaction </tag>
            
            <tag> Diwakar Singh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCP MySQL replica setup</title>
      <link href="/blog//Web/akr-replica-setup/"/>
      <url>/blog//Web/akr-replica-setup/</url>
      
        <content type="html"><![CDATA[<p><img src="/blog/Web/akr-replica-setup/banner.png" alt="GCP MySQL Replica"></p><p>CloudSQL is fully managed MySQL / PostgreSQL database system. CloudSQL reduces the workload for DBAs and anyone can easily manage even without a DBA. In many cases, people wants to have a replica of their production database for Testing purpose or even some other purpose. CloudSQL provides the flexibility to have external replicas on VM or On-prem. In this blog we are going to configure external replica for CloudSQL.</p><h2 id="MySQL-with-GTID"><a href="#MySQL-with-GTID" class="headerlink" title="MySQL with GTID"></a>MySQL with GTID</h2><p>A global transaction identifier (GTID) is a unique identifier created and associated with each transaction committed on the server of origin (master). This identifier is unique not only to the server on which it originated, but is unique across all servers in a given replication setup. There is a 1-to-1 mapping between all transactions and all GTIDs. — From MySQL Documentation</p><p>To understand more about GTID, please refer the below link. <a href="https://dev.mysql.com/doc/refman/5.6/en/replication-gtids-concepts.html" target="_blank" rel="noopener">MySQL reference</a></p><h2 id="The-process-overview"><a href="#The-process-overview" class="headerlink" title="The process overview"></a>The process overview</h2><ul><li>Create the CloudSQL — Master.</li><li>Create the Compute engine and setup MySQL — Slave.</li><li>Enable GTID in the Slave.</li><li>Take the dump from the master along with the GTID.</li><li>Restore the dump on the slave.</li><li>Configure Replication.</li></ul><h2 id="Create-the-CloudSQL"><a href="#Create-the-CloudSQL" class="headerlink" title="Create the CloudSQL"></a>Create the CloudSQL</h2><ul><li>Go to the <a href="https://console.cloud.google.com/sql/" target="_blank" rel="noopener">CloudSQL console</a>.</li><li>Create a new MySQL 2nd generation Instance.</li><li>In the show advanced configuration enable the below items.<ol><li>Automatic Backups</li><li>Enable Binary logging</li></ol></li><li>Lets wait for the Instance creation complete.</li><li>Refer the below link for GCP Doc to create the CloudSQL <a href="https://cloud.google.com/sql/docs/mysql/create-instance" target="_blank" rel="noopener">Link</a></li></ul><h2 id="Create-the-Compute-Engine-VM"><a href="#Create-the-Compute-Engine-VM" class="headerlink" title="Create the Compute Engine VM"></a>Create the Compute Engine VM</h2><ul><li>Go to <a href="https://console.cloud.google.com/compute/instancesAdd" target="_blank" rel="noopener">Compute Engine console</a> and create the VM.</li><li>Give a name and choose the CPU, Memory, OS, and Networking and etc.</li><li>It should be in Public and assign a static external IP address.</li><li>Lets wait for Instance creation complete.</li><li>More details step for creating the VM, please refer the <a href="https://cloud.google.com/compute/docs/instances/create-start-instance" target="_blank" rel="noopener">link</a>.</li></ul><h2 id="Install-MySQL-5-7-on-the-Slave"><a href="#Install-MySQL-5-7-on-the-Slave" class="headerlink" title="Install MySQL 5.7 on the Slave"></a>Install MySQL 5.7 on the Slave</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- This is command for install mysql for ubuntu 18.04</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure><h2 id="Enable-GTID"><a href="#Enable-GTID" class="headerlink" title="Enable GTID"></a>Enable GTID</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- This file location is for Ubuntu 18.04</span><br><span class="line">vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">server-id                = 1212</span><br><span class="line">gtid_mode                = ON</span><br><span class="line">enforce_gtid_consistency = ON</span><br><span class="line">log_slave_updates        = ON</span><br><span class="line">replicate-ignore-db      = mysql</span><br><span class="line">binlog-format            = ROW</span><br><span class="line">expire_logs_days         = 1</span><br><span class="line">read_only                = ON</span><br><span class="line">log_bin                  = /var/log/mysql/mysql-bin.log</span><br></pre></td></tr></table></figure><h2 id="Setting-up-the-database-on-Master"><a href="#Setting-up-the-database-on-Master" class="headerlink" title="Setting up the database on Master"></a>Setting up the database on Master</h2><ul><li>Connect to the CloudSQL instance.</li><li>Create a database called sqladmin.</li><li>Create a table and insert the sample data.</li><li>Create an user for replication.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database sqladmin;</span><br><span class="line">use sqladmin;</span><br><span class="line">create table test_tbl (numbers int);</span><br><span class="line">insert into test_tbl values (1),(2),(3);</span><br><span class="line">create user &apos;rep_user&apos;@&apos;%&apos; identified by &apos;rep_password&apos;;</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO  &apos;rep_user&apos;@&apos;%&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Prepare-the-Secondary"><a href="#Prepare-the-Secondary" class="headerlink" title="Prepare the Secondary"></a>Prepare the Secondary</h2><ul><li><p>Take the dump of the Master database using the below command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --databases sqladmin -h CLOUD_SQL_IP -u root -p \ </span><br><span class="line">--single-transaction \</span><br><span class="line">--master-data=1 \</span><br><span class="line">--routines \</span><br><span class="line">--triggers \</span><br><span class="line">--events \</span><br><span class="line">--flush-privileges \</span><br><span class="line">--hex-blob \</span><br><span class="line">--default-character-set=utf8 &gt; sqladmin.sql</span><br></pre></td></tr></table></figure></li><li><p>Restore the Backup on the Slave.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Restore the backup</span><br><span class="line">mysql -u username -p sqladmin &lt; sqladmin.sql</span><br><span class="line">-- Sometimes you will end up with an error like ERROR 1840 (HY000) at line 24: @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_EXECUTED is empty. Then you need to run the below command on the Slave MySQL.</span><br><span class="line">RESET MASTER;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Establish-the-replication"><a href="#Establish-the-replication" class="headerlink" title="Establish the replication"></a>Establish the replication</h2><ul><li>Login to the slave and run the below query.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;CLOUD_SQL_IP&apos;, </span><br><span class="line">MASTER_USER=&apos;rep_user&apos;, </span><br><span class="line">MASTER_PASSWORD=&apos;rep_password&apos;, </span><br><span class="line">MASTER_AUTO_POSITION=1;</span><br></pre></td></tr></table></figure></li><li>Then Check the status.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure></li></ul><p>Sometimes you will get the below error.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error &apos;Operation ALTER USER failed for &apos;root&apos;@&apos;%&apos;&apos; on query. Default database: &apos;&apos;. Query: &apos;ALTER USER &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH &apos;mysql_native_password&apos; AS &apos;*81F5E21E35407D884A6CD4A731AEBFB6AF209E1B&apos;&apos;</span><br></pre></td></tr></table></figure><p>This means the command executed on the Master and slave already has its own password. A deep blog about this issue <a href="https://avdeo.com/2015/03/04/restoring-slave-when-gtid-is-enabled-on-master/" target="_blank" rel="noopener">here</a>.</p><h2 id="Fix-this-error"><a href="#Fix-this-error" class="headerlink" title="Fix this error"></a>Fix this error</h2><ul><li>Take a note Retrieved_Gtid_Set from the slave status.</li><li>Reset the master settings in the slave and purge it GTID.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reset master;</span><br><span class="line">set global GTID_PURGED=&quot;afee7444-8ff7-11e8-8ed3-42010a800056:8-9093&quot;;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Check-the-replication"><a href="#Check-the-replication" class="headerlink" title="Check the replication"></a>Check the replication</h2><ul><li>Insert some data on the CloudSQL.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into sqladmin.test_tbl values (4),(5);</span><br></pre></td></tr></table></figure></li><li>Check the data on Slave.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sqladmin.test_tbl;</span><br></pre></td></tr></table></figure></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://cloud.google.com/sql/docs/mysql" target="_blank" rel="noopener">GCP MySQL</a></li><li><a href="https://cloud.google.com/sql/docs/mysql/replication/create-replica" target="_blank" rel="noopener">GCP Read replica</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like"></a>Some good reads you may like</h2><ol><li><a href="https://nayan.co/blog/Web/react-cicd/">React CI/CD</a></li><li><a href="https://nayan.co/blog/Web/angular-youtube/">Angular Youtube integration</a></li><li><a href="https://nayan.co/blog/Web/angular-maps/">Angular maps and clusters</a></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Protection </tag>
            
            <tag> NAYAN </tag>
            
            <tag> GCP </tag>
            
            <tag> MySQL replica </tag>
            
            <tag> India </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Prune deep CNN based architectures?</title>
      <link href="/blog//AI/pruning-1/"/>
      <url>/blog//AI/pruning-1/</url>
      
        <content type="html"><![CDATA[<p>​<br>With more and more research and development of state of the art neural network models, the neural network models are becoming deeper and deeper although these models are much more accurate but they also come with a significant cost that is a high inference time and also require more and more computational resources. This significant amount of computation resources consumed by such networks becomes a bottleneck when we require a real-time inference or when we want to deploy our <a href="https://nayan.co/blog/categories/AI/">Artificial Intelligence</a> based applications onto edge devices which have limited computational resources. At Nayan we generally use this to make heavy Neural Networks fast.<br>​<br>There are many different methods for Efficient Inference:<br>​</p><ul><li><strong>Pruning</strong><br>​</li><li>Quantization<br>​</li><li>Weight Sharing<br>​</li><li>Winograd transformation<br>​</li><li>Binary / Ternary Net<br>​</li></ul><p>In this blog we will be covering Neural Network Pruning which is one of the methods to produce models of smaller size, the ones which are more power efficient as well as memory efficient and in turn helps in making inference much faster with a minimal cost to the model accuracy.</p><blockquote><p><strong>Pruning deep neural networks means reducing the size of the deep learning networks by removing some parameters/ neurons.</strong><br>​</p></blockquote><h2 id="Biological-Inspiration-for-Pruning"><a href="#Biological-Inspiration-for-Pruning" class="headerlink" title="Biological Inspiration for Pruning"></a>Biological Inspiration for Pruning</h2><p>​<br>Pruning in neural networks has been taken as an idea from <a href="https://en.wikipedia.org/wiki/Synaptic_pruning" target="_blank" rel="noopener">**Synaptic Pruning</a> <strong>in the human brain where <a href="https://en.wikipedia.org/wiki/Axon" target="_blank" rel="noopener">axon</a> and <a href="https://en.wikipedia.org/wiki/Dendrite" target="_blank" rel="noopener">dendrite</a> completely decay and die off resulting in synapse elimination that occurs between early childhood and the onset of puberty in many <a href="https://en.wikipedia.org/wiki/Mammal" target="_blank" rel="noopener">mammals</a>. Pruning starts near the time of birth and continues into the mid-20s.<br>​<br><img src="https://cdn-images-1.medium.com/max/2000/1*vtyUeef84qEk-OTWc-zoVA.png" alt="Fig: Synapses and neurons before and after pruning ([Learning both Weights and Connections for Efficient Neural Networks](https://arxiv.org/abs/1506.02626))"><em>Fig: Synapses and neurons before and after pruning (<a href="https://arxiv.org/abs/1506.02626" target="_blank" rel="noopener">Learning both Weights and Connections for Efficient Neural Networks</a>)</em><br>​<br>Networks generally look like the one on the left: every neuron in the layer below has a connection to the layer above, but this means that we have to multiply a lot of floats together. Ideally, we’d only connect each neuron to a few others and save on doing some of the multiplications.<br>​<br>In pruning we majorly rank the neurons in the network based on how much they contribute and thus remove the low-ranking neurons making the network smaller and faster. But we prune the network in an iterative manner in-order to avoid the pruning of necessary neurons. Just like the figure below.<br>​<br><img src="https://cdn-images-1.medium.com/max/2000/0*7r1YI5al1H30dHD7" alt="Fig 2: Neural Network Pruning as a backward filter ([Pruning Convolutional Neural Networks for Resource Efficient Inference](https://arxiv.org/abs/1611.06440))"><em>Fig 2: Neural Network Pruning as a backward filter (<a href="https://arxiv.org/abs/1611.06440" target="_blank" rel="noopener">Pruning Convolutional Neural Networks for Resource Efficient Inference</a>)</em><br>​<br>**3 major</strong> steps involved in Pruning are<br>​</p><ul><li>Determine which neurons are more important and which are not (Ranking Neurons)<br>​</li><li>Remove a portion of the least important neurons<br>​</li><li>Fine-tune the network<br>​<br>We can rank the neurons according to the L1/ L2 norm of the neuron weights. The accuracy of the model might drop after pruning, but the network is fine-tuned/ trained iteratively to recover the loss. Because if we prune way too much at the once then there are chances of that the model might get damaged and then it won’t be able to recover. And thus we apply ‘Iterative Pruning’.<br>​<h2 id="Types-of-Pruning"><a href="#Types-of-Pruning" class="headerlink" title="Types of Pruning"></a>Types of Pruning</h2>​</li><li><strong>Weight Pruning</strong><blockquote><ul><li>Setting individual weights in the weight matrix to zero. This corresponds to deleting connections.</li><li>Inorder to achieve sparsity of k% we rank the individual weights in weight matrix W according to their magnitude, and then set to zero the smallest k%.<br>​</li></ul></blockquote></li><li><strong>Unit/ Neuron Pruning</strong><blockquote><ul><li>Setting entire columns(entire convolutional filters) to zero, in effect deleting the corresponding output neuron.</li><li>So to achieve sparsity of k% we rank the columns of a weight matrix according to their L2-norm and delete the smallest k%.<h1 id="The-future-of-machine-learning-is-on-the-edge-And-thus-Optimizing-Machine-Learning-models-is-especially-important-when-deploying-to-low-power-devices-like-smartphones"><a href="#The-future-of-machine-learning-is-on-the-edge-And-thus-Optimizing-Machine-Learning-models-is-especially-important-when-deploying-to-low-power-devices-like-smartphones" class="headerlink" title="The future of machine learning is on the edge. And thus Optimizing Machine Learning models is especially important when deploying to low-power devices like smartphones."></a>The future of machine learning is on the edge. And thus Optimizing Machine Learning models is especially important when deploying to low-power devices like smartphones.</h1>​</li></ul></blockquote><h2 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next?"></a>What’s Next?</h2>​<br>Next up will be a short code for demonstrating how we can prune neural networks.</li></ul><p>Find some more exciting AI blogs <a href="https://nayan.co/blog/categories/AI/">here</a></p><p>The author of this blog currently works <a href="https://nayan.co">NAYAN</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> AI </tag>
            
            <tag> NAYAN </tag>
            
            <tag> CNN </tag>
            
            <tag> Pruning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mocking Enumerables in Rspec</title>
      <link href="/blog//Rails/mocking-enumerables-rspec/"/>
      <url>/blog//Rails/mocking-enumerables-rspec/</url>
      
        <content type="html"><![CDATA[<img src="/blog/Rails/mocking-enumerables-rspec/mock-rails.jpg" class="" title="Mocking in Rails" alt="Mocking in Rails"><p>Rails puts some really powerful mocking libraries at our disposal. As long as your models are backed by ActiveRecord, <a href="https://api.rubyonrails.org/v3.2/classes/ActiveRecord/Fixtures.html" target="_blank" rel="noopener">ActiveRecord Fixtures</a> and <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">Factory Bot</a> are two very good libraries for mocking. More often than not, these cover the use cases for most applications. But when your models are not backed by ActiveRecord, there’s an excellent test-double framework for rspec, called <a href="https://github.com/rspec/rspec-mocks" target="_blank" rel="noopener">RSpec Mocks</a> that you can use.</p><h4 id="Basic-Mocking-with-RSpec-Mocks"><a href="#Basic-Mocking-with-RSpec-Mocks" class="headerlink" title="Basic Mocking with RSpec Mocks"></a>Basic Mocking with RSpec Mocks</h4><p>Basic mocking using RSpec Mocks is straight forward. Initialize the mock object as below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@mock_post = double(&apos;post&apos;)</span><br></pre></td></tr></table></figure><p>and then</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow(@mock_post).to receive(:title) &#123; &apos;sample title&apos; &#125;</span><br></pre></td></tr></table></figure><h3 id="Mocking-a-chain-of-methods"><a href="#Mocking-a-chain-of-methods" class="headerlink" title="Mocking a chain of methods"></a>Mocking a chain of methods</h3><p>For mocking a chain of methods, there are two options.</p><p>Lets say that the <code>Post</code> object has a method <code>author</code>, that returns another object of class <code>Author</code>. The <code>Author</code> class has multiple methods, including <code>name</code> and <code>image</code></p><ul><li><p>If your code only ever calls the <code>name</code> method for the post’s author, you can easily setup this mock object as</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow(@mock_post).to receive_message_chain(:author, :name) &#123; &apos;Sample Author&apos; &#125;</span><br></pre></td></tr></table></figure></li><li><p>If you need a more complex mocking, you can have 2 mock objects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@mock_author = double(&apos;author&apos;)</span><br><span class="line">allow(@mock_author).to receive(:name) &#123; &apos;Sample Author&apos; &#125;</span><br><span class="line">allow(@mock_author).to receive(:image) &#123; &apos;https://sample.image&apos; &#125;</span><br><span class="line"></span><br><span class="line">allow(@mock_post).to receive(:author) &#123; @mock_author &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Mocking-Enumerables"><a href="#Mocking-Enumerables" class="headerlink" title="Mocking Enumerables"></a>Mocking Enumerables</h3><p>In my specific project, I had a model that responded to <code>each</code>, and also had other methods that needed mocking, <code>total</code>, <code>skip</code>, <code>limit</code> etc. My initial instinct was that I could just do something like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">posts = double(&apos;post&apos;)</span><br><span class="line">allow(posts).to receive(:each) &#123; posts_list &#125;</span><br></pre></td></tr></table></figure><p>But unfortunately that doesn’t work, because each expects a block and yields each of the list item to the block. Fortunately, RSpec Mocks has a method <a href="https://github.com/rspec/rspec-mocks/blob/main/lib/rspec/mocks/message_expectation.rb#L169" target="_blank" rel="noopener"><code>and_yields</code></a> that lets us set up just what we need.</p><p>Continuing with the above example, lets say we need to have 10 mock posts. We can set it up as,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">posts_list = []</span><br><span class="line">10.times do |index|</span><br><span class="line">  post = double(&apos;post&apos;, title: &quot;post_#&#123;index&#125;&quot;)</span><br><span class="line">  posts_list &lt;&lt; post</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">posts = double(&apos;post&apos;, total: posts_list.size, skip: 0, limit: posts_list.size)</span><br><span class="line">iterator = allow(posts).to receive(:each)</span><br><span class="line">posts_list.each do |post|</span><br><span class="line">  iterator.and_yield(post)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>At this point, the <code>posts</code> mock object responds to the <code>each</code> iterator and returns the 10 mock post objects. It also responds to the <code>total</code>, <code>skip</code> and <code>limit</code> methods correctly.</p><p>Hope this helps.</p><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
            <tag> rspec </tag>
            
            <tag> Mocking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to add Lottie Animation in an Android application</title>
      <link href="/blog//Android/How-to-add-Lottie-Animation-in-an-Android-app/"/>
      <url>/blog//Android/How-to-add-Lottie-Animation-in-an-Android-app/</url>
      
        <content type="html"><![CDATA[<p>Lottie is an <code>Android</code>, IOS and React Native library that renders After Effects animations in real time, allowing apps to use animations <code>(Dynamic Feature)</code> as easily as they use static images.They are especially useful when the UI <code>(User Interaction)</code> changes state, such as when new content loads or new actions become available.</p><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_1.gif" alt="Lottie Animation"></p><h2 id="Lottie-the-future-of-product-animation"><a href="#Lottie-the-future-of-product-animation" class="headerlink" title="Lottie, the future of product animation"></a>Lottie, the future of product animation</h2><ul><li>Multi-platform (A single instance that works on all your devices)</li><li>Easy Integration (As simple as embedding an image or video)</li><li>Lightweight (Lighter and leaner than video or animated GIF)</li><li>Interactivity (Add events and dynamic properties to your animations)</li><li>Responsive (Scalable vector animations that adapt to any size)</li></ul><h2 id="Let’s-begin"><a href="#Let’s-begin" class="headerlink" title="Let’s begin"></a>Let’s begin</h2><ol><li>Create a new project</li></ol><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_2.jpg" alt="Create New Project In Android Studio"></p><ol start="2"><li>Add the required Lottie animation dependency in the app level build.gradle file:</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lottie Animation</span></span><br><span class="line">implementation ‘com.airbnb.android:lottie:<span class="number">3.4</span>.<span class="number">0</span>’</span><br></pre></td></tr></table></figure><ol start="3"><li>Add <code>animation.json</code> files in assets folder. You can create your own animations using Adobe After Effects, or feel free to use the ones uploaded by other users on: <a href="https://lottiefiles.com/" target="_blank" rel="noopener">Lottie Files</a></li></ol><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_3.jpg" alt="app/assets"></p><ol start="4"><li>Adding animation to <code>activity_main.xml</code> file:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"140dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/bg_header"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"lottie_logo_animation.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/firstAnimationView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"animation.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/secondAnimationView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"animation_1.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toggle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"toggle_switch.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_speed</span>=<span class="string">"1.75"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>Write the following code in <code>MainActivity.kt</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isSwitchOn = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        toggle.setOnClickListener &#123;</span><br><span class="line">            changeToggleState()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">changeToggleState</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSwitchOn) &#123;</span><br><span class="line">            toggle.setMinAndMaxProgress(<span class="number">0.5f</span>, <span class="number">1f</span>)</span><br><span class="line">            toggle.playAnimation()</span><br><span class="line">            firstAnimationView.visibility = View.VISIBLE</span><br><span class="line">            secondAnimationView.visibility = View.GONE</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            toggle.setMinAndMaxProgress(<span class="number">0f</span>, <span class="number">0.5f</span>)</span><br><span class="line">            toggle.playAnimation()</span><br><span class="line">            secondAnimationView.visibility = View.VISIBLE</span><br><span class="line">            firstAnimationView.visibility = View.GONE</span><br><span class="line">        &#125;</span><br><span class="line">        isSwitchOn = !isSwitchOn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>And we are done!</li></ol><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_4.gif" alt="Lottie Animation"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://airbnb.design/introducing-lottie/" target="_blank" rel="noopener">Lottie</a></li><li><a href="https://airbnb.io/lottie/#/android" target="_blank" rel="noopener">Lottie Docs</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Android/App-Heartbeat/">App-Heartbeat</a></li><li><a href="https://nayan.co/blog/Android/Applying-Proguard-in-an-android-application/">How to apply Proguard in an android application</a></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co/">website</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
            <tag> nayan </tag>
            
            <tag> user interaction </tag>
            
            <tag> Diwakar Singh </tag>
            
            <tag> lottie animation </tag>
            
            <tag> dynamic feature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creating obfuscated code in python to make them unreadable</title>
      <link href="/blog//Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/"/>
      <url>/blog//Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/</url>
      
        <content type="html"><![CDATA[<img src="/blog/Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/obfuscation.png" class=""><p>This post is totally focused on how to obfuscate your python code. The term <strong>obfuscate</strong> means that “<em>creating your code that is difficult for humans to understand</em>”. In this post, I am going to obfuscate my python code. This code obfuscation is generally used for data protection so that no third party can read my code.</p><p>In python, you can obfuscate your code using a command line tool known as <strong>pyarmor</strong>. It is a tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts. We can simply download pyarmor using the following command.</p><pre><code>pip install pyarmor</code></pre><p>Lets start obfuscating our code. For now lets start with a simple python script to obfuscate. I had created a basic script which just prints a message on running it. Lets start obfuscating it by using below command</p><pre><code>pyarmor obfuscate /path/to/script</code></pre><p>Then you see, there will be a <strong>dist</strong> named folder will be created. Now, go inside that folder and check that, there will be a file with same name as of your script. If you run it normally like</p><pre><code>python /path/to/script</code></pre><p>then, it give the same result as before obfuscation. If you open this file you’ll see something like below<br><img src="https://cdn-images-1.medium.com/max/2000/1*EhTDQqh7kEpoukY_zPr7Iw.png" alt="Fig.1 showing how a obfuscated code looks like"></p><p>There is also a folder called <strong>pytransform</strong> in the folder along with your script. This folder contains some information about the obfuscation code like its license and its key.</p><p>Now, we will obfuscate scripts which are using folder imports (like package). Lets create a same scenario like that and will obfuscate them.<br>I am going to make a calculator type files and the package just contains those files and in my main file I am simply importing it and doing operation. Follow the below steps for obfuscating them.</p><pre><code>mkdir build cd buildpyarmor init --src /path/to/package --entry __init__.py package_namepyarmor init --src /path/to/maincodeFolder --entry codename.py code_folder</code></pre><p>Here, I have simply initialize the folders before obfuscating them, so just replacing the paths and your code name with the above names. Now,</p><pre><code>pyarmor build --output path/to/obfuscateFolder --no-runtime package_namepyarmor build --output path/to/obfuscateFolder --no-runtime code_folderpyarmor build --output path/to/obfuscateFolder --only-runtime code_folder</code></pre><p>Here, “path/to/obfuscatefolder” is the path where you want to keep your obfuscated folder. I use only-runtime for the main code. By mentioning the only-runtime, pyarmor generates a <strong>pytransform</strong> folder for that code and for no-runtime it just obfuscate them.</p><p>Now, we are ready to run our code. Just go to your “path/to/obfuscateFolder” and run the main file. You can easily able to run that and your output should be same just like before obfuscating the code.</p><p><strong>Note</strong> –: If you make any change in your main code then you need to obfuscate your code again.</p><p>I had put the whole code in my github. You can check from <a href="https://github.com/hghimanshu/Blog/tree/master/obfuscation" target="_blank" rel="noopener">here</a></p><p><strong>Some good reads you may like :)</strong></p><ol><li><a href="https://nayan.co/blog//AI/Creating-deep-learning-models-in-Docker/">Creating a very basic deep-learning model in Docker</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Scripting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> code-obfuscation </tag>
            
            <tag> pytransform </tag>
            
            <tag> Data Protection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generating Pdf the way you want, in Android using itextpdf</title>
      <link href="/blog//Android/generating-pdf-in-android-using-itextpdf/"/>
      <url>/blog//Android/generating-pdf-in-android-using-itextpdf/</url>
      
        <content type="html"><![CDATA[<p>We all must have got requirement to generate PDFs in our Android Application. Well, here is a quick guide on how you can start generating the PDFs your own way without any limits on Andoid device itself.</p><p><img src="/blog/Android/generating-pdf-in-android-using-itextpdf/itext-logo.png" alt="iTextPDF"></p><h2 id="NOTE-Get-read-write-permissions-on-Android-before-invoke-of-PDF-generation-code"><a href="#NOTE-Get-read-write-permissions-on-Android-before-invoke-of-PDF-generation-code" class="headerlink" title="NOTE: Get read/write permissions on Android before invoke of PDF generation code"></a>NOTE: Get read/write permissions on Android before invoke of PDF generation code</h2><h2 id="Lets-start-generating-PDF-step-by-step"><a href="#Lets-start-generating-PDF-step-by-step" class="headerlink" title="Lets start generating PDF step by step:-"></a>Lets start generating PDF step by step:-</h2><p>1: Add <strong>com.itextpdf:itext7-core:7.1.11</strong> library to your app level gradle file</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.itextpdf:itext7-core:7.1.11'</span></span><br></pre></td></tr></table></figure><p>2:  First Create an instance of PDF document</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(<span class="string">"Your File Location"</span>))</span><br></pre></td></tr></table></figure><p>3: Now supply this instance to create <code>com.itextpdf.layout.Document</code> instance</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br></pre></td></tr></table></figure><p>4: Draw some text and style that in your own way</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> text = Paragraph(<span class="string">"My Text"</span>)</span><br><span class="line">document.add(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> boldText = Paragraph(<span class="string">"My Styled Text"</span>)</span><br><span class="line">boltText.setBold()</span><br><span class="line">document.add(boldText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sizedText = Paragraph(<span class="string">"My Sized Text"</span>)</span><br><span class="line">sizedText.setFontSize(<span class="number">20.0f</span>)</span><br><span class="line">document.add(sizedText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> coloredText = Paragraph(<span class="string">"My Sized Text"</span>)</span><br><span class="line">coloredText.setFontColor(ColorConstants.RED)</span><br><span class="line">document.add(coloredText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> alignedText = Paragraph(<span class="string">"My Sized Text"</span>)</span><br><span class="line">alignedText.setTextAlignment(TextAlignment.CENTER)</span><br><span class="line">document.add(alignedText)</span><br><span class="line"></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><p>5: Adding a space/gap before and after drawing a text</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> textWithoutSpace1 = Paragraph(<span class="string">"My Text"</span>)</span><br><span class="line">textWithoutSpace1.setMargins(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>)</span><br><span class="line">document.add(textWithoutSpace1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> textWithSpace = Paragraph(<span class="string">"My Spaced Text"</span>)</span><br><span class="line">textWithSpace.setMargins(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>)</span><br><span class="line">document.add(textWithSpace)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> textWithoutSpace2 = Paragraph(<span class="string">"My Text"</span>)</span><br><span class="line">textWithoutSpace2.setMargins(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>)</span><br><span class="line">document.add(textWithoutSpace2)</span><br><span class="line"></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><p>6: Generate Output file</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This will create a file at your fileLocation specified while creating PdfDocument instance</span></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><h2 id="Drawing-tables"><a href="#Drawing-tables" class="headerlink" title="Drawing tables:-"></a>Drawing tables:-</h2><p>1: Create table instance</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(<span class="string">"Your File Location"</span>))</span><br><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will create a table instance with weighted column width</span></span><br><span class="line"><span class="keyword">val</span> table = Table(UnitValue.createPercentArray(floatArrayOf(<span class="number">8f</span>, <span class="number">23f</span>, <span class="number">15f</span>, <span class="number">15f</span>, <span class="number">12f</span>, <span class="number">12f</span>, <span class="number">15f</span>))).useAllAvailableWidth()</span><br></pre></td></tr></table></figure><p>1: Draw Table using an Array/List/ArrayList/MutableList</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(<span class="string">"Your File Location"</span>))</span><br><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> table = Table(UnitValue.createPercentArray(floatArrayOf(<span class="number">8f</span>, <span class="number">23f</span>, <span class="number">15f</span>, <span class="number">15f</span>, <span class="number">12f</span>, <span class="number">12f</span>, <span class="number">15f</span>))).useAllAvailableWidth()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Add Header Cells</span></span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Date"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Job Name"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Job Size"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Job Type"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Quantity"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Rate"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Amount"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (entry <span class="keyword">in</span> entries) &#123;</span><br><span class="line">  table.addCell(Cell().add(Paragraph(shortDateFormat.format(entry.createdOn)).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(entry.getJobName())</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.jobSize).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.getJobType().replace(<span class="string">"Pouch"</span>, <span class="string">""</span>)).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.quantity).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.rate).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.amount).setTextAlignment(TextAlignment.RIGHT)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.add(table)</span><br><span class="line"></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><h2 id="Change-Page-Size-for-pdfDocument"><a href="#Change-Page-Size-for-pdfDocument" class="headerlink" title="Change Page Size for pdfDocument"></a>Change Page Size for pdfDocument</h2><p>Set your desired page size to <code>pdfDocument</code>‘s <code>defaultPageSize</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(fileLocation))</span><br><span class="line">pdfDocument.defaultPageSize = PageSize.A4</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://kb.itextpdf.com/home/it7kb/examples" target="_blank" rel="noopener">iTextPDF Examples</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
            <tag> Ashish Jajoria </tag>
            
            <tag> frontend </tag>
            
            <tag> itext </tag>
            
            <tag> iTextPDF </tag>
            
            <tag> pdf </tag>
            
            <tag> generate pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup CI/CD on React app using GitHub Actions</title>
      <link href="/blog//Web/react-cicd/"/>
      <url>/blog//Web/react-cicd/</url>
      
        <content type="html"><![CDATA[<p>In this tutorial, I’m going to show you how to create a simple workflow that I use on my personal projects with React.</p><p>This workflow created on GitHub Actions will be responsible for automatically test the source code, generate a test coverage report and upload it on Codecov, build and deploy the project on GitHub Pages. All these jobs are activated by a push or pull request event on master branch.</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>First, on your React App GitHub repository, navigate to the main page of the repository, click Actions.</p><p>Then, you’ll see suggestions of CI templates that are the best fit for your project. You can use workflow templates as a starting place to build your custom workflow.<br>In this case, click Set up this workflow, under the name of the template Node.js.   </p><p><img src="/blog/Web/react-cicd/image1.jpeg" alt="Basic workflow"></p><p>Finally, you’ll see a default YAML file like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">name: Node.js CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [10.x, 12.x, 14.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v2</span><br><span class="line">    - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">    - run: npm ci</span><br><span class="line">    - run: npm run build --if-present</span><br><span class="line">    - run: npm test</span><br></pre></td></tr></table></figure><h2 id="Test-coverage-report-generation"><a href="#Test-coverage-report-generation" class="headerlink" title="Test coverage report generation"></a>Test coverage report generation</h2><p>Lets update workflow abit to add test coverage step in our workflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">name: CI/CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout repository</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    - name: Set up Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: Install dependencies</span><br><span class="line">      run: npm install</span><br><span class="line"></span><br><span class="line">    - name: Run the tests</span><br><span class="line">      run: npm test</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: npm run build</span><br></pre></td></tr></table></figure><h3 id="Setup-codecov-test-coverage"><a href="#Setup-codecov-test-coverage" class="headerlink" title="Setup codecov test coverage"></a>Setup codecov test coverage</h3><p>First, go to the <a href="https://codecov.io/" target="_blank" rel="noopener">Codecov website</a> and create an account, you can use your GitHub account to sign up.</p><p>Next, access your account on the website, click Repositories, after, click Add new repository and choose the repository you want to use. (we will setup secret in abit)</p><h2 id="Deployment-on-GitHub-Pages"><a href="#Deployment-on-GitHub-Pages" class="headerlink" title="Deployment on GitHub Pages"></a>Deployment on GitHub Pages</h2><p>Install <code>gh-pages</code> and add <code>deploy</code> to scripts in <code>package.json</code>.<br>Run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save gh-pages</span><br></pre></td></tr></table></figure><p>Add the following scripts in your package.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;predeploy&quot;: &quot;npm run build&quot;,</span><br><span class="line">&quot;deploy&quot;: &quot;gh-pages -d build&quot;,</span><br></pre></td></tr></table></figure><p>Now we are going to create a new access token, in order to deploy our application through the workflow.</p><p>Go to the Personal access tokens area in the Developer settings of your GitHub profile and click Generate new token.</p><p>Copy the generated token.</p><p>On GitHub, navigate to the main page of the repository, under your repository name, click Settings. In the left sidebar, click Secrets. And finally, Click Add a new secret.</p><p>Type a name for your secret in the Name input box, like <code>ACTIONS_DEPLOY_ACCESS_TOKEN</code>.</p><p>Enter the value for your secret (which should be the personal access token we just created).</p><p>Click Add secret.</p><p>Your last step on your workflow should be some like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- name: Deploy</span><br><span class="line">  run: |</span><br><span class="line">    git config --global user.name $user_name</span><br><span class="line">    git config --global user.email $user_email</span><br><span class="line">    git remote set-url origin https://$&#123;github_token&#125;@github.com/$&#123;repository&#125;</span><br><span class="line">    npm run deploy</span><br><span class="line">  env:</span><br><span class="line">    user_name: &apos;github-actions[bot]&apos;</span><br><span class="line">    user_email: &apos;github-actions[bot]@users.noreply.github.com&apos;</span><br><span class="line">    github_token: $&#123;&#123; secrets.ACTIONS_DEPLOY_ACCESS_TOKEN &#125;&#125;</span><br><span class="line">    repository: $&#123;&#123; github.repository &#125;&#125;</span><br></pre></td></tr></table></figure><p>The name and email information need not necessarily be your real information. And you must replace ACTIONS_DEPLOY_ACCESS_TOKEN with the name of the secret you just created.</p><p>After adding the deploy command on your workflow, click Start commit, and click Commit new file.</p><p>Your final workflow file should be like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">name: CI/CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout repository</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    - name: Set up Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: Install dependencies</span><br><span class="line">      run: npm install</span><br><span class="line"></span><br><span class="line">    - name: Run the tests and generate coverage report</span><br><span class="line">      run: npm test -- --coverage</span><br><span class="line"></span><br><span class="line">    - name: Upload coverage to Codecov</span><br><span class="line">      uses: codecov/codecov-action@v1</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: npm run build</span><br><span class="line"></span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        git config --global user.name $user_name</span><br><span class="line">        git config --global user.email $user_email</span><br><span class="line">        git remote set-url origin https://$&#123;github_token&#125;@github.com/$&#123;repository&#125;</span><br><span class="line">        npm run deploy</span><br><span class="line">      env:</span><br><span class="line">        user_name: &apos;github-actions[bot]&apos;</span><br><span class="line">        user_email: &apos;github-actions[bot]@users.noreply.github.com&apos;</span><br><span class="line">        github_token: $&#123;&#123; secrets.ACTIONS_DEPLOY_ACCESS_TOKEN &#125;&#125;</span><br><span class="line">        repository: $&#123;&#123; github.repository &#125;&#125;</span><br></pre></td></tr></table></figure><p>Now, in every push or pull request event on master branch, the CI/CD workflow will be activated. And you will be able to see if all steps have passed or not.</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub actions</a></li><li><a href="https://docs.github.com/en/actions/language-and-framework-guides/github-actions-for-javascript-and-typescript" target="_blank" rel="noopener">Actions docs for JS</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Web/angular-youtube/">Angular Youtube integration</a></li><li><a href="https://nayan.co/blog/Web/angular-maps/">Angular maps and clusters</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> react </tag>
            
            <tag> javascript </tag>
            
            <tag> CICD </tag>
            
            <tag> Github-actions </tag>
            
            <tag> Code coverage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Similarity Analysis and Clustering Technique</title>
      <link href="/blog//AI/similarity/"/>
      <url>/blog//AI/similarity/</url>
      
        <content type="html"><![CDATA[<h1 id="SIMILARITY-ANALYSIS-AND-CLUSTERING-TECHNIQUE-USING-ANNOY-AND-DBSCAN"><a href="#SIMILARITY-ANALYSIS-AND-CLUSTERING-TECHNIQUE-USING-ANNOY-AND-DBSCAN" class="headerlink" title="SIMILARITY ANALYSIS AND CLUSTERING TECHNIQUE USING ANNOY AND DBSCAN"></a>SIMILARITY ANALYSIS AND CLUSTERING TECHNIQUE USING ANNOY AND DBSCAN</h1><p><img src="/blog/AI/similarity/COVER1.jpg" alt="cover"></p><p>Have you been working with loads of image data points? <br>Are you facing an issue cleaning and verifying the data?<br>Are you repeatedly overlooking minor mistakes made at an early stage in the dataset? <br>Do you feel there is a bias towards some data points because they are higher in number?</p><p>So would it not be great if you could focus your attention on only unique images from a huge dataset?<br>In this blog I am going to share a <a href="https://nayan.co/blog/">Deep learning</a> based approach that can help you get rid of identical images.</p><p>Data collected from the real world is dynamic and unpredictable. We might be fetching thousands of identical images and just a few unique data points in terms of region of interest, lighting conditions and other factors based on your area of focus, and that is not very favourable for a <a href="https://nayan.co/blog/">Machine learning</a> model.<br>Also saving identical images or data points increases the cost of the product in ways we might not be keeping track of like time and money spent in storage, maintenance, data management, data cleaning, and data annotation.</p><p>To solve this problem I implemented a similarity check model, and clustering using tensorflow 2.0.<br>Used a VGG16 model with pretrained weights of imagenet dataset, followed by feature extraction of data points using transfer learning.</p><h2 id="SIMILARITY"><a href="#SIMILARITY" class="headerlink" title="SIMILARITY"></a>SIMILARITY</h2><p>In order to get the similarity percentage between any 2 images or to find the K nearest neighbours of it, I used Spotify’s ANNOY library.</p><h3 id="ANNOY-Approximate-Nearest-Neighbours-Oh-Yeah"><a href="#ANNOY-Approximate-Nearest-Neighbours-Oh-Yeah" class="headerlink" title="ANNOY - Approximate Nearest Neighbours Oh Yeah !!"></a><em>ANNOY - Approximate Nearest Neighbours Oh Yeah !!</em></h3><p><img src="annoy.png" alt="annoy"></p><p>Annoy uses the concept of binary trees and forests to get to approximate nearest neighbours.<br>Each tree is constructed by picking two points at random and splitting the space into two by their hyperplane, and we keep splitting in the subspaces recursively until the points associated with a node is small enough to have k points in every section.<br>The forest is traversed in order to obtain a set of candidate points from which the closest to the query point are returned (with priority queue).<br>Once we get the candidate points closest to the query point we have the flexibility to further filter our datapoints based on the metric of choice (i.e. cosine, euclidean).</p><p>Using annoy is quite simple and extremely cool. Since it is an Approximate Nearest Neighbour algorithm the results are approximate but can be improved by tweaking the two parameters : number_of_trees and search_k, a higher value of both corresponds to better results.</p><p><img src="ann.png" alt="ann"></p><h2 id="CLUSTERING"><a href="#CLUSTERING" class="headerlink" title="CLUSTERING"></a>CLUSTERING</h2><p>Annoy makes visualisation of nearest neighbours very easy. However, to find a cluster of all similar images without limiting to a single K value DBSCAN is a great choice.</p><p><img src="cluster.png" alt="cluster"></p><h3 id="DBSCAN-Density-Based-Spatial-Clustering-of-Applications-with-Noise"><a href="#DBSCAN-Density-Based-Spatial-Clustering-of-Applications-with-Noise" class="headerlink" title="DBSCAN - Density Based Spatial Clustering of Applications with Noise"></a><em>DBSCAN - Density Based Spatial Clustering of Applications with Noise</em></h3><p><img src="dbscan.png" alt="dbscan"></p><p>It is a popular clustering method provided by sklearn library and used in <a href="https://nayan.co/blog/">Machine learning</a> and <a href="https://nayan.co/blog/">Computer Vision</a>.<br>It divides the dataset into n dimensions. For each point in the dataset it creates an n dimensional shape around it and then counts the number of datapoints that fall within that shape. Each of these shapes is called a cluster. DBSCAN iteratively expands the cluster/shape by checking each datapoint within the shape and also the ones in the vicinity.</p><p>By specifying the similarity threshold (eps), the similarity metric, and the minimum number of samples for a shape to be marked as a cluster you can customize your results ( specifying min_samples to a value higher than 1 helps you get rid of the noise ).</p><p>Once DBSCAN is defined you have to fit the feature vector of the datapoints for DBSCAN to give you the most awaited cluster details. You can get information like number of clusters, number of datapoints in every cluster, and the details of the datapoints belonging to the clusters.</p><p><img src="db.png" alt="db"></p><p>Once these vital details are obtained we are free to play with our datapoints and clusters.<br>I simply maintained a list of labels, and path corresponding to every datapoint.</p><p><em>To group similar image:</em></p><p>Iterating over the list, whenever a new label was encountered I made a new folder corresponding to it and added the image to that very folder, also following images of the same label to it.</p><p><em>To delete similar images:</em></p><p>Iterating over the same list only the first image for every unique label was kept and the rest were deleted.</p><h3 id="Benefit"><a href="#Benefit" class="headerlink" title="Benefit:"></a>Benefit:</h3><p>After applying these techniques to my dataset, a set of 500 images reduced to 28 which means the cost spent on annotation was reduced to approximately 6% of existing.</p><h2 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h2><p>We went through some very basic algorithms, libraries and methods to be able to manage data and use similarity models.</p><p>You can read more about ANNOY <a href="https://github.com/Houzz/annoy2" target="_blank" rel="noopener" title="ANNOY">here</a> and about DBSCAN <a href="https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html" target="_blank" rel="noopener" title="DBSCAN">here</a>.</p><p>Find some more exciting AI blogs <a href="https://nayan.co/blog/categories/AI/" title="AI blogs">here</a></p><p><em>Try it out !!!</em></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Deep learning </tag>
            
            <tag> Machine learning </tag>
            
            <tag> Similarity </tag>
            
            <tag> Clustering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to setup Jenkins CI/CD pipeline with apache tomcat for java web applications</title>
      <link href="/blog//JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/"/>
      <url>/blog//JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/</url>
      
        <content type="html"><![CDATA[<p>Whenever there are new updates to push either on frontend or on backend, one thing we all can agree upon is that it can be an utter chaos if there is no standard deployment process established. As developers, we always have a number of tests that need to be crossed off our checklist prior to deployment of updates and having a proper deployment pipeline take away almost all of the pain.</p><p>Today, I want to give you a demo of how you can use <strong>Jenkins (A server automation tool) written in JAVA to automate code deployment</strong> to multiple pipelines such as Development, Staging or even production <strong>straight for an version control system like Git</strong>.</p><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/jenkins_feature.jpg" alt="Jenkins Automation Server"></p><p>I will be using <strong>a maven based Rest API project written with Jersey (Rest API Framework)</strong>.</p><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ol><li>Should have a tomcat server running on your machine.</li><li>Should have a maven based project (I am using Jersey in our case) </li><li>Should JAVA 8 or above install on your machine</li><li>maven dependency setup</li></ol><h2 id="Set-up-Jenkins"><a href="#Set-up-Jenkins" class="headerlink" title="Set up Jenkins."></a>Set up Jenkins.</h2><p>To work Download Jenkins from below this <a href="https://www.jenkins.io/download/" target="_blank" rel="noopener">link</a>. It is a web archive (war) file which we will be using to run Jenkins on our apache tomcat server.</p><p><strong>Once downloaded move Jenkins.war file to webapps directory of apache tomcat and restart tomcat server</strong></p><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/getting_started_with_jenkins.png" alt="Getting started : Jenkins "></p><p>Try to hit <strong>http:localhost:8080/Jenkins</strong> . you should be able to see the Getting started screen. In an order to login to your Jenkins server, checkout initialAdminPassword </p><p><code>TOMCAT_HOME/.jenkins/secrets/initialAdminPassword (here tomcat home is tomcat installation directory)</code></p><p>Now create a new user in tomcat-user.xml for Jenkins deployment </p><p><code>&lt;user username=&quot;jenkins&quot; password=“Password roles=&quot;manager-script&quot; /&gt;</code></p><p>Before setting up new job we need to install below mentioned jenkins plugins </p><ol><li>Install “deploy to container” plugin (for tomcat deployment)</li><li>Install “Git” plugin (For git support) </li><li>Install “Github” Plugin (For configuring webhooks of your git repo)</li></ol><h2 id="Setup-job"><a href="#Setup-job" class="headerlink" title="Setup job"></a>Setup job</h2><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/create_new_job.png" alt="Jenkins job"></p><p>Create a new job with a freestyle project. In an order to fully automate war deployment we need to consider below mentioned steps</p><ol><li>Pulling code from remote repository.</li></ol><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/git_repository.png" alt="Setting up git repository"></p><p>Here I am setting up this job to pull from a demo repository from my github account. I am using <strong>Master branch to fetch for every time a new build is triggered</strong>. You can use other branches like <strong>*Dev or staging</strong> for setting up different deployment pipelines.</p><ol start="2"><li>Compiling and building the war file using maven.</li></ol><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/build_step.png" alt="build setup"></p><p>In build section, select <strong>Execute Shell</strong> from drop down and write  </p><p><code>mvn clean install</code></p><ol start="3"><li>Deploying war to tomcat using the “Jenkins” user we just created.</li></ol><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/war_deployment.png" alt="Post build, war deployment"></p><p>When maven is done building us a war from source code which jenkins has pulled from git repository, we need to deploy this newly cleared war file to webapps directory in apache tomcat.</p><p>This can be done by configuring post build section and provide credentials for above created <strong>Jenkins</strong> user in tomcat-user.xml file.  </p><ol start="4"><li>Setting up a web hook to trigger automatic build whenever a pull request is approved or changes are pushed to branch.</li></ol><p>You need to create a web-hook for your github repository. Go to the setting tabs, select web-hooks and create a new webhook. But before that you need to expose your Jenkins server to the external world, you can do that using ngrok (for temporary basis) or you can setup a public ip for your machine.</p><p><code>http://beb52b5f60fd.ngrok.io.ngork.io:8080/jenkins/github-webhook</code></p><p>Once done, whenever there is any push in your git repository Jenkins which gets a notification using this web hook and automatic build will be triggered.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you can see in just 15 mins we created a new job that will pull code from a specific branch of git repository, create a war build from the latest code and deploy it to tomcat. Imagine setting up different pipelines, one for development and other one for Testing / Stating environment which are configured with different code branches. It will not only help deploy updates to different environments but also make it easy to work on multiple features in parallel.  </p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li>Read more about <a href="https://www.jenkins.io/doc/" target="_blank" rel="noopener">Jenkins</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><p>Read here to know more about <a href="http://blog.nayan.co/Android/Android-Testing-Strategy/" target="_blank" rel="noopener">Android Testing Strategy</a></p></li><li><p>Here is an great article to <a href="http://blog.nayan.co/Android/Dynamic-feature-deployment-in-android/" target="_blank" rel="noopener">setup dynamic feature delivery for android application</a></p></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Puneet </tag>
            
            <tag> Backend </tag>
            
            <tag> DevOps </tag>
            
            <tag> NAYAN </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Jersey </tag>
            
            <tag> MAVEN </tag>
            
            <tag> NAYANINDIA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quick guide for dynamic feature delivery using android application bundle</title>
      <link href="/blog//Android/Dynamic-feature-deployment-in-android/"/>
      <url>/blog//Android/Dynamic-feature-deployment-in-android/</url>
      
        <content type="html"><![CDATA[<p>With Google Play’s Dynamic Delivery, your app can download dynamic feature modules on demand to devices running Android 5.0 (API level 21) and higher. This helps reducing initial apk size that user need to down first time.</p><p>It has been observed that not all user uses all features of an mobile application. Hence this make sense that only the bare minimum functional feature to be present in initial apk which can be described as core funcitionality of your application.</p><p><strong>Note : For every 6 MB increase to an apk size, it has been observed that install rate deduces by 1 %.</strong></p><p>Considering this, we should use dynamic feature delivery aproach to reduce initial apk size, and if need those features can be downloaded on demand.</p><p><img src="/blog/Android/Dynamic-feature-deployment-in-android/dynamic_feature_module_base_image.png" alt="Dynamic Feature Module"></p><p>Initially, the Google Play Store pushes only the code and resources needed for base module to the device, which is <strong>app</strong> module. For the rest of the modules, Your app simply needs to call APIs in the Play Core Library to download and install those modules as required, on demand for your Android Apps.</p><h2 id="Why-you-should-be-considering-this"><a href="#Why-you-should-be-considering-this" class="headerlink" title="Why you should be considering this?"></a>Why you should be considering this?</h2><p>The benefit of split APKs is the ability to break up a monolithic APK—that is, an APK that includes code and resources for all features and device configurations your app supports—into smaller, discrete packages that are installed on a user’s device as required.</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>In an order to implement dyanmic feature delivery, you might need to update your application structure to extract out code of an existing feature. </p><p>If you are setting up a new project then, you can start right away.</p><p>Add below mentioned dependency in <strong>app/build.gradle</strong> file</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/build.gradle</span></span><br><span class="line">implementation <span class="string">'com.google.android.play:core:1.8.0'</span></span><br></pre></td></tr></table></figure><p>Create a new <strong>dynamic feature module</strong> from menu. Let’s name it <strong>New_Feature</strong>.</p><p>This <strong>“New Feature”</strong> just like your <strong>“app module”</strong> containing activities, resources and other library in it’s <strong>build.gradle</strong> file. The only different is, it uses “dynamic feature as plugin” and has <strong>“app”</strong> as module dependency. Meaning it inherits everything from <strong>app module</strong>.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// New_Feature/build.gradle</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.dynamic-feature'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">':app'</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Before you try to open up any activity or try to call any utility function or code from <strong>New_Feature</strong>, you need download by executing below mentioned code from calling calling activity.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installNew_FeatureModule</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Get a reference to Split APK Install Manager</span></span><br><span class="line">    splitInstallManager = SplitInstallManagerFactory.create(App.getInstance());</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// Code to download New_Feature on demand</span></span><br><span class="line">    SplitInstallRequest request = SplitInstallRequest.newBuilder()</span><br><span class="line">            .addModule(<span class="string">"New_Feature"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    splitInstallManager.startInstall(request)</span><br><span class="line">            .addOnSuccessListener(integer -&gt; &#123;</span><br><span class="line">                  Toast.makeText(DashboardActivity.<span class="keyword">this</span>,</span><br><span class="line">                            <span class="string">"New Feature installed"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">             &#125;)</span><br><span class="line">            .addOnFailureListener(e -&gt; &#123;</span><br><span class="line">                    Toast.makeText(DashboardActivity.<span class="keyword">this</span>,</span><br><span class="line">                            <span class="string">"unable to download New feature"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To launch any activity from <strong>New_Feature</strong>, need to pass full class name prefixed with package name like</p><p><strong>com.example.New_Feature.TestActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Launching Test activity of New Feature module from App module</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">launchTestActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">       i.setClassName(BuildConfig.APPLICATION_ID, <span class="string">"com.example.New_Feature.TestActivity"</span>);</span><br><span class="line">       startActivity(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you can see, implementing dynamic feature for a new project is quiet easy and simple. You should try it out for your next project. Also If you want to try out for one of your existing projects, you can but there is an effort involved in decoupling of your features.</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><p>Read more about <a href="https://developer.android.com/guide/playcore/dynamic-delivery" target="_blank" rel="noopener">Dynamic Delivery</a></p></li><li><p>Learn how to <a href="https://developer.android.com/guide/app-bundle/dynamic-delivery#create_dynamic_feature" target="_blank" rel="noopener">restructure</a> your project for dynamic delivery </p></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><p>Read here to know more about <a href="http://blog.nayan.co/Android/Android-Testing-Strategy/" target="_blank" rel="noopener">Android Testing Strategy</a></p></li><li><p>Checkout To integrate <a href="http://blog.nayan.co/Android/sharing-modules-across-android-apps/" target="_blank" rel="noopener">Paytm Gateway Integration</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
            <tag> JAVA </tag>
            
            <tag> Android Architecture </tag>
            
            <tag> App Bundle </tag>
            
            <tag> Dynamic Feature </tag>
            
            <tag> Puneet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to recognize Emotions using deep learning?</title>
      <link href="/blog//AI/emotion-recognition-sagar/"/>
      <url>/blog//AI/emotion-recognition-sagar/</url>
      
        <content type="html"><![CDATA[<p><img src="https://neurohive.io/wp-content/uploads/2018/12/labeled-images.57bd-e1547550772626.jpg" alt="Emotions"></p><p>Emotion Recognition is used for categorizing the emotions into one of the 6 emotions through the images of face. Intially viola jones or other face detection algorithm is used for detecting the faces. Preprocessing is also used for standardizing the images into same sizes.</p><p>Facial Feature extraction is used in a number of applications including emotion detection. In the following approach various popular feature descriptors, including Gabor features, HOG, DWT were computed. We have fused features using Multiview Distance Metric Learning (MDML) which<br> utilizes complementary features of the images to extract every known detail while eliminating the redundant   features.   Moreover   MDML  maps   the   features   extracted   from   the   dataset   to   higher discriminative space. The features belonging to the same class are brought closer and those that are from different classes are forced away by the MDML thereby increasing the accuracy of the classifier employed. CK+ Dataset has been used to conduct the experiments. Experimental results<br>represent the efficacy of the method is 93.5% displaying the potential of the recommended manner.</p><p>The human facial expressions contain clues to the emotional state of a person. Computation of emotion   of  a  human  through   facial  expression  has  been   a  central  topic  of  Human   Computer Interaction (HCI) research and a concern for researchers. The machines can utilize an emotion detection tool to understand the human emotions better and respond accordingly. Facial Expressions have been analyzed and put to use by various researchers such as in [6] the pain level can be recognized by detecting the facial expression. It can be used in case of patients who are mute or are not able to speak because of a disorder. [4] judges the concentration level of a viewer watching an advertisement. It has been employed for detecting various mental disorders such as depression and anxiety in [6].</p><p>As Paul Ekman showed in [1], the emotions are universally expressed in the same way regardless of the culture, nationality etc. Subtlety, variance of facial expression and complex nature of emotion further complicate the process. Six emotions have been defined by [1] in his paper. They are happy, Anger, Sad, Surprise, disgust and fear. Emotion detection is accomplished in three basic steps.</p><p>Firstly, the images are preprocessed and a high quality facial image is extracted from the original image from the dataset.</p><p>Secondly, feature descriptors are applied to the image for feature extraction. After the dimension reduction by a dimension reduction algorithm such as PCA, LDA, etc a classifier is used for classifying the image into one of emotion.</p><p>Since the Extended Cohn Kanade Dataset used is free from illumination variance, occlusion and head pose are some of the major concerns in many other datasets results shown are superior than most of the previous methods.</p><p>The  proposed  approach  is  novel  in detecting  and computing  the  emotions  through  Multiview Distance Metric Learning (MDML) introduced in [8]. The similar looking data from different classes are often misclassified. MDML helps to reduce this misclassification and fuses the results of various feature descriptors and extracts complementary features from them.</p><p>Moreover MDML maps the features extracted from the dataset to higher discriminative space. The features having affinity to the same emotion are brought closer while those having affinity to different emotion classes are moved as far as possible. The classifier is trained using this data.</p><ul><li>A. Emotion recognition </li></ul><p>The primary step in emotion detection is the localization of the face. CK+ dataset has been recorded in a controlled having illumination invariance and free from any occlusions. Hence, the facial image is always present in the image and priorly the face’s global position is known. Since wide variations are present in the scale and yaw, pitch, roll of the face, accurately localizing the face in different images is a very challenging task. The various obstructions and hindrances such as glasses and facial hair further complicates the task [1].</p><p>Viola-Jones [2] found an efficient answer for localizing the face. This method is based on AdaBoost learning and Haar-like features. Earlier it was developed for finding and detecting objects in an image [3]. It granted fast object detection for the task of real time usage. Keeping in mind the accuracy of the method, it is used for face localization.</p><ul><li>B. Feature Descriptor</li></ul><p>Feature extraction indicates deriving pertinent data from the preprocessed, gray scaled images from dataset, that will be employed for the intent of emotion detection. It is a defying task due to the above mentioned reasons. A comprehensive method is to derive descriptors from images is to use Log-Gabor filters as done in [2] by nominating the random bandwidth for making the Log-Gabor filter. Another attainable answer is to use model based method for the facial expression recognition   [5]. The  authors  in   [5]  constructed   a  light  source  and   subject  independent   global representation of expressions by discovering of the set of 322 image sequences in CK+ database. [7] utilizes LBP features and finds the emotion.</p><ul><li>C. Multiview Distance Metric Learning</li></ul><p>Motivated   by  the   discriminative   mapping   and   better   results   of   MDML  we  are   using   MDML proposed by [8] which attracts the features of the same class together and pushes away that belong to the different class. The data is then mapped to higher discriminative space and complementary features are extracted from the dataset. This ensures all the details of the image are taken into account. MDML pulls the similar data together and pushes away the different data away. In [8] the<br>authors used MDML for Pain intensity classification.</p><ul><li>D. Facial Expression Classification</li></ul><p>Finally, after being mapped to higher discriminative space features are enforced into the classifier for identification of the six emotions. The most sought after classifiers include template matching, rule based classifier, neural networks and support vector machines (SVM). In SVM, a hyperplane is constructed with ample distance among the different emotion classes during the training phase.</p><p>While during test phase, the trained SVM model classifies the test image to one of the emotion classes. In [7] the authors utilize SVM with linear kernel for expression classification. There are six basic emotion classes which are Anger, Disgust, Happy, Sad, Surprise and Fear for analysis of proposed algorithm.</p><p>The author of this blog is working currently with <a href="https://www.nayan.co" target="_blank" rel="noopener" >Nayan</a></p><ul><li><p>Bibliography</p></li><li><p>[1] Ekman, P., &amp; Friesen, W. V. (1971). Constants across cultures in the face and emotion. Journal of personality and social psychology, 17(2), 124.</p></li><li><p>[2]   L.   S.   Chen.   Joint   processing   of   audio-visual   information   for   the   recognition   of   emotional expressions in human-computer interaction. PhD thesis, University of Illinois at Urbana<br>Champaign, Dept. of Electrical Engineering, 2000.</p></li><li><p>[3] Viola, Paul, and Michael Jones. “Rapid object detection using a boosted cascade of simple features.” Computer Vision and Pattern Recognition, 2001. CVPR 2001. Proceedings of the 2001 IEEE Computer Society Conference on. Vol. 1. IEEE, 2001.</p></li><li><p>[4] S. Lajevardi and M. Lech, “Facial expression recognition from imagesequences using optimized feature selection,” Image and Vision Computing New Zealand, 2008. IVCNZ 2008. 23rd International Conference.pp. 1–6, 2008. J. T. Cacioppo and L.G. Tassinary. Inferring psychological significance from physiological signals. American Psychologist, 45:16–28, January 1990.</p></li><li><p>[5] Kaltwang, S., Rudovic, O., &amp; Pantic, M. (2012). Continuous pain intensity estimation from facial expressions. Advances in visual computing, 368-377</p></li><li><p>[6] Rathee, N., Vaish, A., &amp; Gupta, S. (2016, April).  Adaptive  system to learn and  recognize emotional   state   of   mind.   In   Computing,   Communication   and   Automation   (ICCCA),   2016 International Conference on (pp. 32-36). IEEE.</p></li><li><p>[7]   Rathee,   N.,   &amp;   Ganotra,   D.   (2016).   Multiview   Distance   Metric   Learning   on   facial   feature descriptors for automatic pain intensity detection. Computer Vision and Image Understanding, 147, 77-86.</p></li><li><p>[8] Dalal, N., &amp; Triggs, B. (2005, June). Histograms of oriented gradients for human detection. In Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on (Vol. 1, pp. 886-893). IEEE.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Emotion Recognition </tag>
            
            <tag> HCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to host any port to entire internet on any machine?</title>
      <link href="/blog//AI/jupyter-hosting/"/>
      <url>/blog//AI/jupyter-hosting/</url>
      
        <content type="html"><![CDATA[<br><p><img src="/blog/AI/jupyter-hosting/nmap_guide.png" alt="Banner"></p><p>In this short blog post, I will explain a great trick to expose various services like Jupyter-notebook, tensorboard, etc. to the entire internet. We generally use it at <a href="http://nayan.co.in" target="_blank" rel="noopener">Nayan</a></p><p>Before following the steps I want you to understand some fundamentals behind the hosting of different services.</p><h3 id="Some-Basics"><a href="#Some-Basics" class="headerlink" title="Some Basics:"></a><strong>Some Basics:</strong></h3><p>Whenever we host some services on a local server having URLs like (<a href="https://localhost:8888" target="_blank" rel="noopener">https://localhost:8888</a> or <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a>) they are behind a NAT or firewall of our computer(Most of the hackers work to breach these).</p><p><img src="/blog/AI/jupyter-hosting/banner.jpg" alt="Firewall"></p><p>To jump over the firewall, we will use <a href="http://ngrok.com" target="_blank" rel="noopener">ngrok</a>.</p><h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok:"></a>Ngrok:</h3><p>Ngrok allows you to expose a web server running on your local machine to the internet. Just tell ngrok what port your web server is listening on.<br>something like this:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*yyRGRBHIsXRHw_8LfL8CAA.png" alt="Ngrok flowchart"></p><h3 id="Steps-to-host-Jupyter-Notebook-on-AWS-EC2"><a href="#Steps-to-host-Jupyter-Notebook-on-AWS-EC2" class="headerlink" title="Steps to host Jupyter-Notebook on AWS EC2:"></a><strong>Steps to host Jupyter-Notebook on AWS EC2:</strong></h3><ol><li><p>First, we need to install tmux for running processes(jupyter in our case) in background and jupyter notebook.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r</span><br></pre></td></tr></table></figure></li></ol><p>2) Download ngrok using</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget [https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip](https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip)</span><br></pre></td></tr></table></figure><p>3) Unzip to install ngrok</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip ngrok.zip</span><br></pre></td></tr></table></figure><p>4) Create an account on <a href="http://ngrok.com" target="_blank" rel="noopener">ngrok</a> and get authtoken.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*C36pyfvzwZnTXSieoHNVEw.png" alt="Authtoken"></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok authtoken &lt;your_auth_token&gt;</span><br></pre></td></tr></table></figure></code></pre><ol start="5"><li><p>Now on tmux we will run jupyter-notebook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-notebook --ip=0.0.0.0 --allow-root ```</span><br></pre></td></tr></table></figure></li><li><p>Host the noted port using ngrok. For my case it is 8890</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok http 8890</span><br></pre></td></tr></table></figure></li></ol><p>Also, you can make a config file and can host multiple ports using the same account as mentioned <a href="https://ngrok.com/docs#config" target="_blank" rel="noopener">here</a>.</p><ol start="7"><li>Now note the URL you got on ngrok screen.</li></ol><p><img src="https://cdn-images-1.medium.com/max/2000/1*QLItoFPpvwq7VNYMVjEqYw.png" alt="Ngrok link"></p><ol start="8"><li>Cheers and now hit the URL as many times as you can to access your favorite jupyter notebook.</li></ol><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h3><p>In this cool blogpost, we understood to host jupyter notebook on the local machine. We can host other services like tensorboard or anything you want.</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Deep learning </tag>
            
            <tag> jupyter </tag>
            
            <tag> ngrok </tag>
            
            <tag> Kunal Goyal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to apply Proguard in an android application (Code obfuscation, shrinking, optimization)</title>
      <link href="/blog//Android/Applying-Proguard-in-an-android-application/"/>
      <url>/blog//Android/Applying-Proguard-in-an-android-application/</url>
      
        <content type="html"><![CDATA[<p>To make an application is not good enough, but it also needs to make secure and optimize. It’s the basic needs of an application.</p><p>To make your app as small as possible, you should enable shrinking in your release build to remove unused code and resources. When enabling shrinking, you also benefit from obfuscation, which shortens the names of your app’s classes and members, and optimization, which applies more aggressive strategies to further reduce the size of your app.</p><p>ProGuard is a tool used to do the following in an Android application:</p><h2 id="Minify-the-code"><a href="#Minify-the-code" class="headerlink" title="Minify the code"></a>Minify the code</h2><p>Detects and safely removes unused classes, fields, methods, and attributes from your app and its library dependencies</p><h2 id="Obfuscate-the-code"><a href="#Obfuscate-the-code" class="headerlink" title="Obfuscate the code"></a>Obfuscate the code</h2><p>Shortens the name of classes and members, which results in reduced DEX file sizes.</p><h2 id="Optimize-the-code"><a href="#Optimize-the-code" class="headerlink" title="Optimize the code"></a>Optimize the code</h2><p>Inspects and rewrites your code to further reduce the size of your app’s DEX files.</p><p><img src="/blog/Android/Applying-Proguard-in-an-android-application/flow_diagram.jpg" alt="Flow diagram for applying proguard"></p><p>To enable shrinking, obfuscation, and optimization, include the following in your project-level build.gradle file.</p><p>In that data class, we will handle some sessions related tasks (check session is active or not, update session etc.). A session will have two values start time and end time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources true</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(</span><br><span class="line">              &apos;proguard-android-optimize.txt&apos;),</span><br><span class="line">              &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While enabling proguard in your application there are some rules , that should be considered. Do not forget to add the Proguard rules in proguard-rules.pro file for any library that you have included in your project.</p><p>Like this for classes, also can apply for members and fields</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class &lt;className with pakage&gt;.** &#123; *; &#125;</span><br></pre></td></tr></table></figure><p>For Warning : You need to take a look on stacktrace to find which classes gives those warnings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-dontwarn &lt;classes_name&gt;</span><br><span class="line">-dontwarn java.nio.file.*</span><br></pre></td></tr></table></figure><h2 id="Some-stats-related-to-APK-size"><a href="#Some-stats-related-to-APK-size" class="headerlink" title="Some stats related to APK size"></a>Some stats related to APK size</h2><p><img src="/blog/Android/Applying-Proguard-in-an-android-application/stats.png" alt="Some stats before and after applying proguard"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noopener">https://developer.android.com/studio/build/shrink-code</a></p><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Android/App-Heartbeat/">App-Heartbeat</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
            <tag> Diwakar Singh </tag>
            
            <tag> proguard </tag>
            
            <tag> shrinking </tag>
            
            <tag> obfuscation </tag>
            
            <tag> optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying a Rails application to a Docker container</title>
      <link href="/blog//Rails/rails-docker/"/>
      <url>/blog//Rails/rails-docker/</url>
      
        <content type="html"><![CDATA[<img src="/blog/Rails/rails-docker/rails-docker.jpg" class="" title="Rails and Docker" alt="Rails and Docker"><p>Docker has gained immense popularity over the past few years as a tool for depploying your applications to production. It allows you to package you application and all of its dependencies in an image, ready to be deployed anywhere.</p><p>Deploying a Rails app to Docker can be a bit tricky, so here’s a handy step by step guide.</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ul><li>Install Docker</li><li>Create Dockerfile</li><li>Create docker-compose.yml</li><li>Build the image</li><li>Deploy</li></ul><h4 id="Installing-Docker"><a href="#Installing-Docker" class="headerlink" title="Installing Docker"></a>Installing Docker</h4><p>If you are on Mac or Windows, its best to install <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop</a> which installs all the necessary tools for you.</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>It all starts with the Dockerfile. This is where you define how your image needs to be built.</p><p>TLDR;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM ruby:2.5.3</span><br><span class="line"></span><br><span class="line">RUN apt-get update -qq &amp;&amp; apt-get install -y nodejs postgresql-client</span><br><span class="line"></span><br><span class="line">RUN mkdir /src</span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line">ENV BUNDLER_VERSION=2.1.4</span><br><span class="line">RUN gem install bundler -v 2.1.4</span><br><span class="line"></span><br><span class="line">COPY Gemfile Gemfile.lock ./</span><br><span class="line">RUN bundle config build.nokogiri --use-system-libraries</span><br><span class="line">RUN bundle install</span><br><span class="line"></span><br><span class="line">COPY . ./</span><br><span class="line"></span><br><span class="line">#COPY entrypoint.sh /usr/bin/</span><br><span class="line">RUN chmod +x entrypoint.sh</span><br><span class="line">ENTRYPOINT [&quot;./entrypoint.sh&quot;]</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>You start by choosing the base image with your project Ruby version, and install the required libraries on the next line.</p><p>Then you create the source directory for your code and set it as your working directory.</p><p>Next, set the bundler version to the one from your Gemfile and install it.</p><p>Copy the Gemfile and Gemfile.lock, and install all dependencies.</p><p>Once the dependencies are installed, we copy the entire current directory to the image.</p><p>Finally, we define an entrypoint for the image. This is a script that will be run when the image is first started. And then we expose the port on which our app will run.</p><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>With the Dockerfile, we can build our application image. But it depends on other services as well, such as a database or maybe Redis. This is where Docker Compose comes into the picture.</p><p>We’ll create another file docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=password</span><br><span class="line">    volumes:</span><br><span class="line">      - ./tmp/db:/var/lib/postgresql/data</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    command: bash -c &quot;rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b &apos;0.0.0.0&apos;&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/src</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br></pre></td></tr></table></figure><p>We have two service, one for the database and one for the application. By defining the web service to be dependent on the db service, we tell Compose to start db before the web service.</p><h4 id="Entrypoint"><a href="#Entrypoint" class="headerlink" title="Entrypoint"></a>Entrypoint</h4><p>Finally, we define the entrypoint file that describes the tasks to be run when starting a new image.</p><p>entrypoint.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># Remove a potentially pre-existing server.pid for Rails.</span><br><span class="line">rm -f /src/tmp/pids/server.pid</span><br><span class="line"></span><br><span class="line"># Database migration</span><br><span class="line">RUN bundle exec rails db:migrate</span><br><span class="line"></span><br><span class="line"># Then exec the container&apos;s main process (what&apos;s set as CMD in the Dockerfile).</span><br><span class="line">bundle exec rails s -b 0.0.0.0</span><br></pre></td></tr></table></figure><p><em>One thing to note is that you should not have both the CMD and entrypoint in Dockerfile. Took me a few many hours to figure this out.</em></p><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><p>To build the container, run the following command,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose build</span><br></pre></td></tr></table></figure><h4 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h4><p>The app can be run locally by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run web rails new . --force --no-deps --database=postgresql</span><br></pre></td></tr></table></figure><p>You can upload the image to a registry service such as GCR. First tag the image, then push it to GCR,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;image-name&gt;:latest gcr.io/&lt;organization&gt;/&lt;image-name&gt;:latest</span><br><span class="line">docker push gcr.io/&lt;organization&gt;/&lt;image-name&gt;:latest</span><br></pre></td></tr></table></figure><p>And you are done. You can now deploy this image to GKE or any other Kubernetes engine.</p>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to check whether your product causes potential patent infringement</title>
      <link href="/blog//IP-Patents/potential-patent-infringement/"/>
      <url>/blog//IP-Patents/potential-patent-infringement/</url>
      
        <content type="html"><![CDATA[<br><p><img src="/blog/IP-Patents/potential-patent-infringement/banner.jpg" alt="Nayan IP"></p><!-- source/\_posts/potential-patent-infringement/banner.jpg --><p>Let’s imagine that as an entrepreneur or a product manager, you are going to launch a product (or service) commercially but you do not know what is patent infringement and how to avoid it (<a href="https://www.patentgrasp.com/2020/07/originally-published-on-www.html" target="_blank" rel="noopener">this article </a> explains what are patents and how they work). For anyone facing this situation, it is important to understand the meaning of patent infringement, know if you are infringing on a patent and use necessary remedies to avoid infringement, in early stages of your product launch. You may want to take such preventive measures because if patent infringement is proven after your product hits the market, you may need to pay a share of your revenues (called ‘royalty’) to the patent owner who alleges infringement. This is especially important for start-ups since in many cases, the company’s business model is largely based on these products and if they were to get stuck in patent infringement, it can be damaging for the entire business.</p><p>It, therefore, makes sense to take such risks into account before the product hits the market. To find whether your product infringes on a patent, let us first understand what is patent infringement. As we now already know, an important purpose of getting a patent is to protect an invention by excluding others from making it, using it, selling it, importing it or offering it for sale without the patent owner’s consent. Any such exploitation of the patented invention without the consent of the patent owner is called patent infringement. As an example, let’s assume that you have a technical solution or a product that you are going to commercialise. In this event, someone else with a patent on that product (or your technical solution) could approach you to solicit royalty (licensing fee) from you, since you are exploiting their patent without their consent.</p><p>Well, such a situation cannot always be completely eliminated but its probability can be minimized to a great extent if, before launching your product, you can conduct (or get a patent professional to conduct) a thorough patent search (known as a Freedom-to-operate search in IP world). The objective of doing so is to find patents which have claims that directly map to the features of your product. This precautionary effort can make you aware at early stages of your product launch, regarding any patent risks that you may face later on and allows you sufficient time to take necessary precautions.</p><p>Now we know that FTO search is used to find any third-party patents on which your product may infringe. An important aspect to remember here is that patent infringement occurs when a product feature directly maps to the ‘claims’ of a granted patent. For example, the very popular feature of “slide to unlock” on smartphones directly maps to this <a href="https://patents.google.com/patent/US8046721B2/en" target="_blank" rel="noopener">patent</a> (refer claim 1 in the linked patent) and thus, this feature is considered infringing on this patent.</p><p>Now that you know what is patent infringement and how it can affect you in the above situation, it logically follows that you would want to review every patent that is a potential risk and take precautionary measures accordingly. The simplest starting approach you can take as a beginner is to use this <a href="https://www.patentgrasp.com/2020/07/how-to-search-on-google-patents-google.html" target="_blank" rel="noopener">article</a> in conjunction with the points covered below to search for patents by using relevant keywords (or patent classes).</p><ol><li><p><strong>Patent is a territorial right</strong> - Any patent in any jurisdiction is an enforceable right that can be exercised only within the confines of that jurisdiction. For example, a product launched in U.S. (or any other country) cannot be considered infringing on a patent granted in Australia (or any country). This means if a patent owner has a patent granted in Australia, they can only enforce their patent within Australia and not outside. In fact, this is exactly why patent owners file patents in different jurisdictions separately and there is no such thing as global patent. Therefore, while searching you need to only stick to the patents that are granted in jurisdictions of your interest. This saves time and effort during your search.</p></li><li><p><strong>Independent claims must map entirely</strong> - An essential criteria of patent infringement is that at least one independent claim (any one) must map to the product features. If any of the dependent claims map to the product features without the independent claims getting mapped, it is not considered patent infringement. Another aspect to consider is that each feature of the independent claim must map to the product, for infringement to occur. If you refer to the ‘slide to unlock’ patent above, you will notice that the independent claim 1 of the patent maps entirely to the actual slide to unlock feature you use on your smartphone to unlock the phone. Moving on, if as a product owner, you can ascertain that any feature of the independent claim does not map, it is not considered patent infringement (but this can be subjective).</p></li><li><p><strong>Granted patent</strong> - Since only ‘granted’ patents can be enforced as per patent law in any country, any legal action can be taken by a third-party against you (as an infringing product owner) only if their patent is granted. Therefore, you should pay attention to the legal status of a patent before concluding that your product infringes on a patent. If a patent application is yet to be granted and its claims map to your product, it is likely that the scope of its claims would change during patent prosecution (and diverting from your product scope. However, you can watchlist such patents to track any change in their scope until (and if!) they get granted. This may affect your product strategy. If the patent is abandoned or expired (even after grant), you need not be concerned and can discard that particular patent from your consideration.</p></li><li><p><strong>Exhaustive search</strong>- A great aspect of patents is that they are published documents. This means that you will find most of the patents in public domain at one or another search tool. To make the search exhaustive though, you should try multiple search tools including Google Patents, Freepatentsonline, USPTO search tool, Espacenet, Patentscope and so on. If the budget permits, you can even try out a paid search tool as well for better patent coverage where high stakes are involved. However, no search completely eliminates the risk because the search tools have coverage limitations with respect to the jurisdictions and the number of patents covered. Additionally, most patent offices globally, publish patent applications after a few months from filing. Therefore, it is likely that at the time you are searching, a target patent has not been published and thus, could not be found but it does not mean that there is no infringement. However, doing an exhaustive search and repeating it periodically can minimize the risk of infringement to a great extent.</p></li></ol><p>All the above points translate to shortlisting at least one <strong>granted patent</strong>, which has <strong>at least one independent claim</strong> that <strong>completely maps</strong> to the product in consideration, in a jurisdiction of interest (where the product is going to get launched).</p><p>During your review of the patents that show up during search, you can shortlist patents using the above criteria and find the most relevant ones based on their claim features. These are the patents that pose patent infringement risk to your product. Remember that merely adding new features to the product or believing that you already have additional features in the product may not help you escape infringement as long as the infringing features are already present in the product.</p><p>Once you have done the above exercise, study the patents closely to find out any features in the independent claims that <strong>do not map</strong>. If that is not possible and you are stuck with a granted (enforceable) patent that does map to your product, you can try to <strong>modify your product features</strong> such that the product does not infringe on the shortlisted patent(s). Alternatively, you can approach the patent owner to strike a deal to license the patented invention. There are many more remedies available but I would avoid digressing from the scope of this article.</p><p>Like analysis of all market risks before launching a product, patent infringement risk also should be given high importance and all necessary due diligence should be done to minimise it.</p><p>If you are new to patents or are trying to learn this field in greater detail, do subscribe to this blog to get notified on similar articles on patent fundamentals.</p><h2 id="IP-focus-at-Nayan-Technologies"><a href="#IP-focus-at-Nayan-Technologies" class="headerlink" title="IP focus at Nayan Technologies"></a>IP focus at <a href="https://nayan.co">Nayan</a> Technologies</h2><p>Nayan Technologies is a new-age start-up focussed on Artificial Intelligence-based Intelligent Mobility. At Nayan, we strongly believe in creating and expanding our Intellectual Property assets. Nayan Technologies has more than 40 patent applications filed across the world in jurisdictions such as USA, Europe, PCT, Middle-East (GCC), Canada, India, Singapore, Indonesia and Australia with 4 patent grants already received across USA, Australia and India. These patents protect various facets of the Intelligent Mobility framework that Nayan Technology works on. To avoid external patent risks, Nayan applies a two-pronged strategy – first, to create, expand and diversify its own patent portfolio and second, to be aware of third-party patents from which patent risk is anticipated and take appropriate strategies accordingly. While innovation one of the core strengths at Nayan, we also believe in ensuring that Nayan’s innovation does not wilfully infringe on third-party patents, by following the above mentioned practices.</p>]]></content>
      
      
      <categories>
          
          <category> IP-Patents </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Patents </tag>
            
            <tag> Infringement </tag>
            
            <tag> Nayan IP </tag>
            
            <tag> Nayan data protection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to implement Android RecyclerView Drag and Drop feature seamlessly</title>
      <link href="/blog//Android/android-recycler-view-drag-and-drop/"/>
      <url>/blog//Android/android-recycler-view-drag-and-drop/</url>
      
        <content type="html"><![CDATA[<p>We some times want to implement Drag and Drop feature OR Swip to dismiss feature on our recycler view. For implementing that we usually go for a library that already have this implemented, and at this point of time most of those libraries are using old APIs and complex logic to handle the things. But now we have simple and better ItemTouchHelper in the Android Support Library itself, so now we don’t need those good old libraries. Lets start implementing.</p><p><img src="/blog/Android/android-recycler-view-drag-and-drop/drag-and-drop.png" alt="Drag n Drop"></p><h2 id="1-Lets-create-an-ItemTouchHelper-Callback"><a href="#1-Lets-create-an-ItemTouchHelper-Callback" class="headerlink" title="1. Lets create an ItemTouchHelper.Callback"></a>1. Lets create an <code>ItemTouchHelper.Callback</code></h2><p>We’ll create an <code>ItemTouchHelper.Callback</code> to handle the events.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMovementFlags</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="comment">// Specify the directions of movement</span></span><br><span class="line">            <span class="keyword">return</span> makeMovementFlags(<span class="literal">null</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMove</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            target: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// Notify your adapter that an item is moved from x position to y position</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isLongPressDragEnabled</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// true: if you want to start dragging on long press</span></span><br><span class="line">            <span class="comment">// false: if you want to handle it yourself</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSwiped</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>, direction: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSelectedChanged</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>?, actionState: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState)</span><br><span class="line">            <span class="comment">// Hanlde action state changes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearView</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.clearView(recyclerView, viewHolder)</span><br><span class="line">            <span class="comment">// Called by the ItemTouchHelper when the user interaction with an element is over and it also completed its animation</span></span><br><span class="line">            <span class="comment">// This is a good place to send update to your backend about changes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-Set-directions"><a href="#2-Set-directions" class="headerlink" title="2. Set directions"></a>2. Set directions</h2><p>Add your movement flags for the directions you want to handle.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMovementFlags</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="comment">// Specify the directions of movement</span></span><br><span class="line">            <span class="keyword">val</span> dragFlags = ItemTouchHelper.UP or ItemTouchHelper.DOWN</span><br><span class="line">            <span class="keyword">return</span> makeMovementFlags(dragFlags, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-Update-Adapter"><a href="#3-Update-Adapter" class="headerlink" title="3. Update Adapter"></a>3. Update Adapter</h2><p>Tell your adapter about the positions updates of the items.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMove</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            target: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// Notify your adapter that an item is moved from x position to y position</span></span><br><span class="line">            yourAdapter.notifyItemMoved(viewHolder.adapterPosition, target.adapterPosition)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-Create-ItemTouchHelper"><a href="#4-Create-ItemTouchHelper" class="headerlink" title="4. Create ItemTouchHelper"></a>4. Create <code>ItemTouchHelper</code></h2><p>From <code>itemTouchHelperCallback</code> we’ll create an <code>ItemTouchHelper</code> object to attach RecyclerView to it.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> itemTouchHelper = ItemTouchHelper(itemTouchHelperCallback)</span><br></pre></td></tr></table></figure><h2 id="5-Attach-to-RecyclerView"><a href="#5-Attach-to-RecyclerView" class="headerlink" title="5. Attach to RecyclerView"></a>5. Attach to RecyclerView</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemTouchHelper.attachToRecyclerView(yourRecyclerView)</span><br></pre></td></tr></table></figure><p>By this time now you have Drag and Drop feature enabled in your RecyclerView you can just build the project and run the app.</p><p><img src="/blog/Android/android-recycler-view-drag-and-drop/drag_n_drop.gif" alt="Drag n Drop and Swipe feature"></p><h2 id="6-Handle-final-state"><a href="#6-Handle-final-state" class="headerlink" title="6. Handle final state"></a>6. Handle final state</h2><p>Now when you want to send and update to you backend about the new order of the items, then just override the <code>clearView</code> method of <code>itemTouchHelperCallback</code> and you are good to go.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearView</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.clearView(recyclerView, viewHolder)</span><br><span class="line">            <span class="comment">// Called by the ItemTouchHelper when the user interaction with an element is over and it also completed its animation</span></span><br><span class="line">            <span class="comment">// This is a good place to send update to your backend about changes</span></span><br><span class="line">            <span class="comment">// Your API call</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Make-it-working-with-SwipeRefreshLayout"><a href="#Make-it-working-with-SwipeRefreshLayout" class="headerlink" title="Make it working with SwipeRefreshLayout"></a>Make it working with <code>SwipeRefreshLayout</code></h2><p>Now comes a strange problem when you try to implement this feature in swipe refresh layout. The problem is, when you try to drag the item from bottom to top direction, then it will work, but when you try to drag from top to bottom, then it fails, as <code>SwipeRefreshLayout</code> intercepts the callback of dragging from top to bottom.</p><p>We just have to disable the <code>SwipeRefreshLayout</code>‘s swipe to refresh feature for the drag time and enable it back when the user has dropped the item to its final position.</p><p>So, lets override <code>onSelectedChanged</code> to handle this.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSelectedChanged</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>?, actionState: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState)</span><br><span class="line">            <span class="comment">// Hanlde action state changes</span></span><br><span class="line">            <span class="keyword">val</span> swiping = actionState == ItemTouchHelper.ACTION_STATE_DRAG</span><br><span class="line">            pullToRefresh.isEnabled = !swiping</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>That’s all you have to do for implementing Drag and Drop feature for your RecyclerView</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://medium.com/@gopalawasthi383/android-recyclerview-drag-and-drop-a3f227cdb641" target="_blank" rel="noopener">Android RecyclerView drag and drop</a></li><li><a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="noopener">Drag and Swipe with RecyclerView</a></li><li><a href="https://stackoverflow.com/a/32075806/5752113" target="_blank" rel="noopener">ItemTouchHelper and SwipeRefreshLayout (RecyclerView)</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Android/Android-Testing-Strategy/">Android Testing Strategy</a></li><li><a href="https://nayan.co/blog/Android/drawing-custom-paths-in-android/">How to draw custom paths/lines in Android usign PathEffect</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
            <tag> ItemTouchHelper </tag>
            
            <tag> Callback </tag>
            
            <tag> RecyclerView </tag>
            
            <tag> Drag and Drop </tag>
            
            <tag> Ashish Jajoria </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube Data API in Angular app for realtime chanels video data</title>
      <link href="/blog//Web/angular-youtube/"/>
      <url>/blog//Web/angular-youtube/</url>
      
        <content type="html"><![CDATA[<br><p><img src="/blog/Web/angular-youtube/blog_banner.png" alt="Youtube data API in Angular app"></p><p>Facing issues getting data of your Youtube channel on your website? This blog is a guide demonstrating on how to integrate Youtube data API in your angular web application with few easy steps.</p><h2 id="YouTube-Data-API-v3"><a href="#YouTube-Data-API-v3" class="headerlink" title="YouTube Data API v3"></a>YouTube Data API v3</h2><p>The first step is to get the api key. By visiting <a href="https://developers.google.com/youtube/v3/getting-started" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/getting-started</a> you’ll find the procedures you need to get your authorization credentials.<br>In a nutshell, you need:</p><ol><li>Go to the Google Developers Console.</li><li>Select a project.</li><li>In the left sidebar, select APIs and authorization. In the list of APIs, make sure the status is ON for the YouTube Data API v3.</li></ol><p>After the project is created the next step is to register the HttpClientModule module in the main module (app.module.ts).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; HttpClientModule &#125; from &apos;@angular/common/http&apos;;</span><br></pre></td></tr></table></figure><p>And declare in imports:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">BrowserModule,</span><br><span class="line">AppRoutingModule,</span><br><span class="line">HttpClientModule,</span><br><span class="line">NgxSpinnerModule</span><br></pre></td></tr></table></figure><p>I’ll use the NGX-Spinner library to display a spinner while loading the videos.</p><p>Install the library with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ngx-spinner --save</span><br></pre></td></tr></table></figure><p>And declare the module in the imports, as per the code above.<br>We can now create a service to make calls to the Youtube API.</p><p>In the terminal, write:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng g service youtube</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; HttpClient &#125; from &apos;@angular/common/http&apos;;</span><br><span class="line">import &#123; map &#125; from &apos;rxjs/operators&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class YoutubeService &#123;</span><br><span class="line"></span><br><span class="line">  apiKey : string = &apos;YOUR-APIKEY-YOUTUBE&apos;;</span><br><span class="line"></span><br><span class="line">  constructor(public http: HttpClient) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    getVideosForChanel(channel, maxResults): Observable&lt;Object&gt; &#123;</span><br><span class="line">    let url = &apos;https://www.googleapis.com/youtube/v3/search?key=&apos; + this.apiKey + &apos;&amp;channelId=&apos; + channel + &apos;&amp;order=date&amp;part=snippet &amp;type=video,id&amp;maxResults=&apos; + maxResults</span><br><span class="line">    return this.http.get(url)</span><br><span class="line">      .pipe(map((res) =&gt; &#123;</span><br><span class="line">        return res;</span><br><span class="line">      &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We create an apiKey variable that stores the value of the API obtained in the first step.</p><p>Then we inject the HttpClient class into the constructor. It provides methods for performing HTTP requests.</p><p>Let’s implement a method that returns a list of videos. We name it getVideosForChanel(). We pass two arguments, the first is the channel ID. The second limit the number of videos.</p><p>We concatenate this information in the API URL, passing other parameters as the order (‘&amp; order = date), part = snippet that contains other properties that identify the title, the description, among others, and the type of resource (type = video).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let url = ‘https://www.googleapis.com/youtube/v3/search?key=&apos; + this.apiKey + ‘&amp;channelId=’ + channel + ‘&amp;order=date&amp;part=snippet &amp;type=video,id&amp;maxResults=’ + maxResults</span><br></pre></td></tr></table></figure><p>In the component class (app.component.ts), we declare an array for the result of the videos:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export class AppComponent &#123;</span><br><span class="line">videos: any[];</span><br></pre></td></tr></table></figure><p>In the constructor method, we inject the service created for requesting videos (YoutubeService) and a class to display a spinner (NgxSpinnerService).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor(private spinner: NgxSpinnerService, private youTubeService: YoutubeService) &#123; &#125;</span><br></pre></td></tr></table></figure><p>Then, in the ngOnInit( ) method, we invoke the method by passing the Channel ID, in this example the channel is my child’s :), and a maximum number of .getVideosForChanel results.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line">this.spinner.show()</span><br><span class="line">setTimeout(()=&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.spinner.hide()</span><br><span class="line">&#125;,3000)</span><br><span class="line">this.videos = [];</span><br><span class="line">this.youTubeService</span><br><span class="line">.getVideosForChanel(&apos;UC_LtA_EtCr7Jp5ofOsYt18g&apos;, 15)</span><br><span class="line">.pipe(takeUntil(this.unsubscribe$))</span><br><span class="line">.subscribe(lista =&gt; &#123;</span><br><span class="line">for (let element of lista[&quot;items&quot;]) &#123;</span><br><span class="line">this.videos.push(element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the result, .subscribe (list =&gt; {, retrieve the items property and add each object in the created array.</p><p>At the beginning of the function, we included a timeout of 3 seconds to close the spinner in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.spinner.hide()</span><br><span class="line">&#125;,3000)</span><br></pre></td></tr></table></figure><p>Let’s finalize, coding the component template (app.component.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngFor=&quot;let video of videos&quot; class=&quot;col-xl-3 col-md-6 mb-4&quot;&gt;</span><br><span class="line">&lt;div class=&quot;card border-0 shadow vh-50&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.youtube.com/watch?v=&#123;&#123;video.id.videoId&#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img [src]=&quot;video.snippet.thumbnails.medium.url&quot; class=&quot;card-img-top&quot; alt=&quot;...&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;card-body text-center&quot;&gt;</span><br><span class="line">&lt;h5 class=&quot;card-title mb-0&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.youtube.com/watch?v=&#123;&#123;video.id.videoId&#125;&#125;&quot;&gt;&#123;&#123;video.snippet.title&#125;&#125;</span><br><span class="line">&lt;/a&gt;&lt;/h5&gt;</span><br><span class="line">&lt;div class=&quot;card-text text-black-50&quot;&gt;&#123;&#123;video.snippet.description.slice(0, 100)&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;p class=&quot;card-text&quot;&gt;&#123;&#123;video.snippet.description&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>We loop the array using the * ngFor directive. We have defined a link to view the video through videoID at href = “<a href="https://www.youtube.com/watch?v=" target="_blank" rel="noopener">https://www.youtube.com/watch?v=</a>“.</p><p>Resources:</p><ol><li><a href="https://developers.google.com/youtube/v3" target="_blank" rel="noopener">https://developers.google.com/youtube/v3</a></li><li><a href="https://developers.google.com/youtube/v3/docs/videos/list" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/docs/videos/list</a></li></ol><p>Previous blog: <a href="https://nayan.co/blog/Web/angular-maps/">https://nayan.co/blog/Web/angular-maps/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> youtube </tag>
            
            <tag> Youtube data API </tag>
            
            <tag> Nayan </tag>
            
            <tag> Cloud Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to draw custom paths/lines in Android usign PathEffect</title>
      <link href="/blog//Android/drawing-custom-paths-in-android/"/>
      <url>/blog//Android/drawing-custom-paths-in-android/</url>
      
        <content type="html"><![CDATA[<p>We can draw simple lines and shapes by using <code>path.lineTo</code>, <code>path.moveTo</code> etc. But sometimes we have requirements to draw a line in pattern, for example: simple dashed, two lines where 1 is continuous and other one is dashed etc.</p><p><img src="/blog/Android/drawing-custom-paths-in-android/lines.png" alt="Lines Drawn By PathEffects"></p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>First we’ll have to create a small path that we want to repeat in the final path</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These are some sample methods to generate a single block of path</span></span><br><span class="line"><span class="comment">// which will be repeated in the final path that we'll draw on canvas</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw a small line with width 10px and length 30px</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeDefaultLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">        <span class="keyword">val</span> p = Path()</span><br><span class="line">        p.moveTo(-<span class="number">15f</span>, <span class="number">5f</span>)</span><br><span class="line">        p.lineTo(<span class="number">15f</span>, <span class="number">5f</span>)</span><br><span class="line">        p.lineTo(<span class="number">15f</span>, -<span class="number">5f</span>)</span><br><span class="line">        p.lineTo(-<span class="number">15f</span>, -<span class="number">5f</span>)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw two small lines with width 4px and length 30px</span></span><br><span class="line"><span class="comment">// They'll have 4px space between them</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeDoubleLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Path()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw two small lines</span></span><br><span class="line"><span class="comment">// One with width 4px and length 15px</span></span><br><span class="line"><span class="comment">// Other with width 4px and length 30px</span></span><br><span class="line"><span class="comment">// They'll have 4px space between them</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeBrokenSolidLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Path()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">0f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">0f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve create our building blocks of the final path. Now we’ll be setting PathEffect to the paint that will draw these blocks.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First setup your paint object</span></span><br><span class="line"><span class="keyword">val</span> paint = Paint()</span><br><span class="line">paint.style = Paint.Style.STROKE</span><br><span class="line">paint.strokeWidth = <span class="number">10f</span></span><br><span class="line">paint.color = Color.YELLOW</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare your pathDashPathEffect</span></span><br><span class="line"><span class="keyword">var</span> pathDashPathEffect: PathDashPathEffect? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define your pathDashPathEffect</span></span><br><span class="line">pathDashPathEffect = PathDashPathEffect(makeDoubleLanePath(),           <span class="comment">//Your building block</span></span><br><span class="line">                                        <span class="number">45f</span>,                            <span class="comment">//At how much distance the next block should be drawn from the current block's starting point</span></span><br><span class="line">                                        <span class="number">0f</span>,                             <span class="comment">//Phase value</span></span><br><span class="line">                                        PathDashPathEffect.Style.MORPH) <span class="comment">//EffectStyle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your defined pathDashPathEffect to your paint object</span></span><br><span class="line">pathDashPathEffect?.let &#123; effect -&gt;</span><br><span class="line">    paint.pathEffect = effect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have our paint object with pathEffect with us. Now we’ll be drawing a path that we actaully want to draw using this paint object.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineX1 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineX2 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineY1 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineY2 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">val</span> path = Path()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    path.reset()</span><br><span class="line">    path.moveTo(lineX1, lineY1)</span><br><span class="line">    path.lineTo(lineX2, lineY2)</span><br><span class="line"></span><br><span class="line">    canvas?.drawPath(path,  <span class="comment">//This final path that we are drawing now</span></span><br><span class="line">                     paint) <span class="comment">//The one that we created earlier</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://stackoverflow.com/questions/10907386/custom-path-line-style-when-drawing-on-canvas" target="_blank" rel="noopener">Custom path line style when drawing on canvas</a></li><li><a href="https://stackoverflow.com/questions/20068803/what-does-path-mean-in-pathdashpatheffect-constructor" target="_blank" rel="noopener">what does path mean in PathDashPathEffect constructor</a></li><li><a href="http://android-coding.blogspot.com/2014/05/pathdashpatheffect-example.html" target="_blank" rel="noopener">PathDashPathEffect example</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Android/Android-Testing-Strategy/">Android Testing Strategy</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
            <tag> Ashish Jajoria </tag>
            
            <tag> canvas </tag>
            
            <tag> paint </tag>
            
            <tag> path </tag>
            
            <tag> PathDashPathEffect </tag>
            
            <tag> DashPathEffect </tag>
            
            <tag> CornerPathEffect </tag>
            
            <tag> ComposePathEffect </tag>
            
            <tag> draw custom path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detecting Whether a Parking Zone Is Vacant Or Occupied</title>
      <link href="/blog//AI/Vehicle-Parking-Occupancy-Detection/"/>
      <url>/blog//AI/Vehicle-Parking-Occupancy-Detection/</url>
      
        <content type="html"><![CDATA[<p>Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.<br>However , there has been a major boost in the field of <a href="https://nayan.co/#/home">Deep Learning</a> and <a href="https://nayan.co/#/home">Computer Vision</a> in the past few years which enables us to create a robust and a real-time solution.</p><img src="/blog/AI/Vehicle-Parking-Occupancy-Detection/20140103__bartpark31-1.jpg" class="" title="Depicting the Problem"><h3 id="Plan-Of-Attack"><a href="#Plan-Of-Attack" class="headerlink" title="Plan Of Attack"></a>Plan Of Attack</h3><p> A pipeline for the same has been created which consists of  the following 5 steps :</p><ol><li><strong>Finding suitable Images</strong> </li><li><strong>Parking zones detection</strong></li><li><strong>Vehicle detection</strong></li><li><strong>Plotting the vehicles as point objects on 2d-map</strong></li><li><strong>Detecting whether a parking lot is vacant or occupied</strong> </li></ol><p>Each of the 5 steps have been described in detail in the following sections :</p><h3 id="1-Finding-Suitable-Images"><a href="#1-Finding-Suitable-Images" class="headerlink" title="1) Finding Suitable Images"></a>1) Finding Suitable Images</h3><p>The first step to solve any problem in <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> is to collect data.<br>In our approach , we just required 2 images throughout the entire process.</p><p>The 2 images required are:</p><pre><code>* Image of actual camera view of the parking zones * Image of the top-view / 2d-map of the same area</code></pre><p>We obtained these 2 images in the following manner :</p><pre><code>* There are a lot of open CCTV IP cameras available freely on the internet. By using one of the websites , we were    able to get our first image which is a camera view of parking zones.</code></pre><p><img src="2.png" alt="Fig 2: Camera View of Parking Zones"></p><pre><code>* The same website also provided us the longitude and latitude of the area which was then entered in Google Maps   in order to get it’s top-view.</code></pre><p><img src="3.png" alt="Fig 3: Longitude and Latitude search on Google Maps"></p><p><img src="4.png" alt="Fig 4:  Top-view of parking zones"></p><p>We now have both the images and we are ready to proceed to the next step.</p><h3 id="2-Parking-Zones-Detection"><a href="#2-Parking-Zones-Detection" class="headerlink" title="2) Parking Zones Detection"></a>2) Parking Zones Detection</h3><p>This is one of the most important tasks in the entire pipeline as almost all the remaining tasks are dependent on this. Getting these inaccurate could impact our entire pipeline leading us to an incorrect outcome.</p><p>Before jumping onto this , I had done some research and found that the following 3 methods are most commonly used to tackle this kind of problem :</p><pre><code>* Canny edge detection and hough line transform combined with image processing could detect the lines in the parking     zones. * Manually drawing out the contours on the parking zones. * Directly perform vehicle detection and locate the stationary cars assuming that they are on the parking zones.</code></pre><p>Third method is based on assumptions and also not suitable for many scenarios , due to which we discarded it as an option.</p><p>We used the first method wherein we detected the lines using canny edge detection and hough line transform combined with image processing.</p><p><img src="5.jpg" alt="Fig 5:  Drawing the contours over the parking zones"></p><h3 id="3-Vehicle-Detection"><a href="#3-Vehicle-Detection" class="headerlink" title="3) Vehicle Detection"></a>3) Vehicle Detection</h3><p>In order to achieve this , we had used the state-of-the-art YOLOv3 <strong><em>Deep Learning</em></strong> object detection model.</p><p><img src="6.jpg" alt="Fig 6:  Vehicles detected by YoloV3"></p><p>This is a crucial step as once we get the bounding boxes accurately, only  then would we be able to detect whether a parking zone is vacant or occupied.</p><h3 id="4-Representing-the-vehicles-as-point-objects-on-2d-map"><a href="#4-Representing-the-vehicles-as-point-objects-on-2d-map" class="headerlink" title="4) Representing the vehicles as point objects on 2d-map"></a>4) Representing the vehicles as point objects on 2d-map</h3><p>For this step , we would be using a very classical <strong><em>Computer Vision</em></strong> concept.<br>This step can be broken to the following sub-steps :</p><pre><code>*Using Google API , we came to know the dimensions of the parking areas in both the images.  *This helped us in restricting the images to particular areas which further aided us in automatically detecting key     points in both images. *Distortion also plays a significant role in getting accurate key-points. So had there been some information about the     planted camera , we could have undistorted the images and got more accurate key-points </code></pre><p><img src="7.jpg" alt="Fig 7:   Key-Points marked on the camera view image"></p><p><img src="8.jpg" alt="Fig 8:   Key-Points marked on the top-view image"></p><p>Using the key-points in the above 2 images , we calculate their homography.</p><ol><li><p>We can represent vehicles as point objects by the following steps  :</p><ol><li><code>First step is to determine the 2d-point matrix by multiplying homography and the center coordinates of the bounding boxes</code><br><img src="9.jpg" alt="where center-x and center-y are the center coordinates of the bounding boxes"></li><li><code>The final step in finding the 2d coordinates is to divide the 2d-point matrix obtained by third element.</code></li></ol></li></ol><p><img src="10.png" alt="&#39;2d-point is calculated&#39;"></p><p>Therefore the 2d coordinates for all the vehicles are derived in similar fashion and are plotted on the 2d-map<br>        image.</p><p><img src="11.jpg" alt="Fig 11:   Vehicles depicted as 2d-points "></p><p>Getting these points plotted at accurate locations implies that results and calculations we got from both step 3<br>        and step 4 are perfect.</p><h3 id="5-Detecting-whether-a-parking-lot-is-vacant-or-occupied"><a href="#5-Detecting-whether-a-parking-lot-is-vacant-or-occupied" class="headerlink" title="5) Detecting whether a parking lot is vacant or occupied"></a>5) Detecting whether a parking lot is vacant or occupied</h3><p>Point Polygon test is used here to find whether the point is inside or outside the parking zone.</p><ol><li><p>Point polygon test checks whether a point is inside the polygon or not.</p></li><li><p>It returns a negative value if the point is outside the polygon , 0 if the point is on the polygon and a<br> positive value if the point is inside the polygon.</p></li></ol><p><img src="12.jpg" alt="Fig 12:   Final Result  "></p><p>Hence as it can be seen from the image above, with the help of <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> , we have successfully solved this problem by following a very simple and systematic approach.</p><p>For more such exciting Deep Learning blog posts,<a href="https://nayan.co/blog/">click here</a>.</p><p>Also, <a href="https://nayan.co/#/home">click here</a> to know how we are leveraging AI for traffic monitoring and road safety.</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Computer Vision </tag>
            
            <tag> Parking Detection </tag>
            
            <tag> Vehicle Occupancy Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creating a very basic deep-learning model in Docker</title>
      <link href="/blog//AI/Creating-deep-learning-models-in-Docker/"/>
      <url>/blog//AI/Creating-deep-learning-models-in-Docker/</url>
      
        <content type="html"><![CDATA[<img src="/blog/AI/Creating-deep-learning-models-in-Docker/docker_python.png" class=""><p>Recently me and my team shifted our approach to build our models in the docker containers rather than creating and running a python file on the system. For me, it was a completely new experience in learning docker. If you are also quite new to docker then with this post you will be able to create your own basic deep-learning model in docker.</p><p><strong>What is Docker?</strong></p><p>Docker provides an image-based deployment model. This makes it easy to share an application, with all of their dependencies across multiple environments. Docker also automates deploying the application inside this container environment.</p><p><strong>Docker Images and Containers</strong></p><p>Docker Container is a standard unit which can be created on the fly to deploy a particular application or environment.</p><p>A Docker image is a file, comprised of multiple layers, that is used to execute code in a Docker container. An image is essentially built from the instructions for a complete and executable version of an application, which relies on the host OS kernel. Multiple instances of a Docker container can be run on a single docker image.</p><p><strong>Why Docker?</strong></p><p>Since we get an idea about docker, lets discuss some of its important use-cases:</p><ul><li><p>Modularity : This means that with the use of docker if any of the part of the application needs to get update or repair, we can do that without shutting the whole application down.</p></li><li><p>Rollback : Every image has layers. Don’t like the current iteration of an image? Roll it back to the previous version</p></li></ul><p><strong>Installing Docker</strong></p><p>Before getting started, we firstly need to install docker on our machine.</p><p>Firstly update the packages and installing the required packages</p><pre><code>$ sudo apt update$ sudo apt install apt-transport-https ca-certificates curl software-properties-common</code></pre><p>Then add the GPG key for the official Docker repository to your system:</p><pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre><p>Add the Docker repository to APT sources:</p><pre><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</code></pre><p>Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:</p><pre><code>$ apt-cache policy docker-ce</code></pre><p>Now, finally install docker</p><pre><code>$ sudo apt install docker-ce</code></pre><p>Check, the docker is running by</p><pre><code>$ sudo systemctl status docker</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/1*Nb6ln3J-75kf0QixxzcRtA.png" alt="Fig. 1: You’ll see the output some similar to this"></p><p><strong>Creating a project with Docker</strong></p><p>Now, we are ready to create our first docker project. I had choose a simple CIFAR-10 dataset for the post. You can clone my <a href="https://github.com/hghimanshu/Blog" target="_blank" rel="noopener">git repository</a>. Go the <strong>CIFARDocker</strong> folder. The folder structure is as below:-</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*yPvku4PluJOzUkoD_h54VQ.png" alt="Fig. 2: Folder structure for the CIFARDocker Folder"></p><p>We here need to know mostly about two files <strong>Dockerfile</strong> and <strong>run_cifar.sh.</strong> Firstly going with <strong>Dockerfile.</strong></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*0oa84Cjo7rfV7mRcVJTABw.png" alt="Fig. 3: Image for Dockerfile"></p><p>Firstly, we pull our base image from the public repositories. A Dockerfile must start with a <strong>FROM</strong> instruction. It initializes a new build stage and sets a base image for other instructions. The <strong>ENV</strong> instruction sets the environment variable. So, here we sets some enivronment for python. Then, we use <strong>RUN *<em>instruction. This instruction is used to execute any commands just like we do on our machine. Here, I install some packages like ffmpeg, wget etc. The *</em>ADD</strong> instruction is used to copy new files or directories local machine and adds them to the filesystem of the image at the path.</p><p>Format for <strong>ADD</strong> instruction is as below:</p><pre><code>ADD &lt;src&gt; &lt;dst&gt;</code></pre><p>Here, we provide the file path as per our local machine as <src> and our file path in our image in <dst>. Here, in our dockerfile, I copied a requirements.txt file and adds to the base path of the image. Then I install all the packages inside the requirements.txt file using the <strong>RUN</strong> instruction.</p><p>Now, finally we define our <strong>WORKDIR</strong> instruction. This is the path to our working directory. So, specify the WORKDIR path as per your image path.<br>Now, we will build our docker image. To build the image, type the below command</p><pre><code>$ docker build -t &apos;docker_containerized_cifar&apos; .</code></pre><p>Here, the <strong>docker_containerized_cifar</strong> is the name of our docker image. You can specify your custom image name for your dockerfile.</p><p>Now we will make a container for this docker image. Open <strong>run_cifar.sh</strong> file.</p><p>Its basic format is as like:-</p><pre><code>docker run -it -d --name=docker_container_name -v &lt;src&gt;:&lt;dst&gt;       --network=docker_image_name</code></pre><p>Here,</p><ul><li><p>-it: Instructs Docker to create an interactive bash shell in the container.</p></li><li><p>–name: Gives the name of your container</p></li><li><p>–v: Specify, the local machine folder <src> to be mounted on the <dst> path (image path)</p></li><li><p>–network: Docker image name associated with the container. In our case, the name will be <strong>docker_containerized_cifar.</strong></p></li></ul><p>Now, starting the container using the below command.</p><pre><code>$ bash run_cifar.sh</code></pre><p>Now, run our code in the docker container itself. For, this type the below command.</p><pre><code>$ docker exec -it docker_container_name bash</code></pre><p>Here, <strong>docker_container_name</strong> is the name of my docker container.</p><p>When you hit the above command, a shell gets open and BOOM you are in your docker container.</p><p>Now, run the code for cifar using the command</p><pre><code>$ python cifar.py</code></pre><p>That’s simple, now, your code is running on the docker container. If you want to stop/start the container again. Then type the below command.</p><pre><code>$ docker start container_name ##for starting a container$ docker stop container_name ##for stopping a container</code></pre><p><strong>Conclusion</strong></p><p>Well, that’s enough in this post. Hope you liked it. I hope you get an idea about <strong>docker</strong> and also about how can we these deep-learning models with the docker.</p><p><strong>Some good reads you may like :)</strong></p><ol><li><a href="https://nayan.co/blog/uncategorized/Flask-PyMongo-Integration/">Flask + Mongo Integration</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> deep-learning </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meta-Learning:Learning-to-learn-fast and its approaches</title>
      <link href="/blog//AI/Meta-Learning-Learning-to-learn-fast/"/>
      <url>/blog//AI/Meta-Learning-Learning-to-learn-fast/</url>
      
        <content type="html"><![CDATA[<!-- # Meta-Learning(Learning to learn fast) and its approaches --><blockquote><p>In this blog, I will explain meta-learning what is also known as learning to learn in machine learning.</p></blockquote><!-- ![Meta Learning](meta-learning.png "Meta Learning") --><img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/meta-learning.png" class="" title="Meta Learning"><h2 id="What-is-Meta-Learning"><a href="#What-is-Meta-Learning" class="headerlink" title="What is Meta-Learning?"></a>What is Meta-Learning?</h2><p>Current AI agents excel at mastering a particular skill like object classification, predicting a disaster, <a href="https://nayan.co/blog/2020/01/09/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/">image segmentation</a> etc. However, now AI is extensively used in day-to-day life. Almost every organization now uses AI in their products. So there is a need for a single AI agent that can solve a variety of problems. <strong><em>A good machine learning model often requires training with a large number of samples. Humans, in contrast, learn new concepts and skills much faster and more efficiently.</em></strong> Kids who have seen cats and birds only a few times can quickly tell them apart. Similar to humans, machine learning models need to be versatile and adapt to a new problem with the least number of samples. This essentially <strong>meta-learning</strong> aims to solve.</p><p>Versatility is achieved by an intelligent amalgamation of meta-learning along with related techniques such as <strong>reinforcement learning</strong> (finding suitable actions to maximize a reward), <strong>transfer learning</strong>    (re-purposing a trained model for a specific task on a second related task), and <strong>active learning</strong> (learning algorithm chooses the data it wants to learn from). Such different learning techniques provide an AI agent with the brains to do multiple tasks without the need to learn every new task from scratch. Thereby making it capable of adapting intelligently to a wide variety of new, unseen situations.</p><blockquote><p><strong>Using Meta-Learning, AI agents learn how to learn new tasks by reusing prior experience, rather than examining each new task in isolation.</strong></p></blockquote><h2 id="Approaches-for-Meta-Learning"><a href="#Approaches-for-Meta-Learning" class="headerlink" title="Approaches for Meta-Learning"></a><strong>Approaches for Meta-Learning</strong></h2><p>There are two popular approaches to <a href="https://nayan.co/#/home">meta-learning</a>.</p><h3 id="The-Simple-View"><a href="#The-Simple-View" class="headerlink" title="The Simple View"></a><strong>The Simple View</strong></h3><p>A good meta-learning model should be trained over a variety of learning tasks and optimized for the best performance on the distribution of tasks, including potentially unseen tasks. Each task is associated with a dataset D, containing both feature vectors and true labels. The optimal model parameters are:</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_1.png" class=""> --><p><img src="formula_1.png" alt="" title="Formula 1"><br>here one dataset is considered as one sample data point.</p><h3 id="Few-shot-classification"><a href="#Few-shot-classification" class="headerlink" title="Few-shot classification"></a><strong>Few-shot classification</strong></h3><p><em>Few-shot classification</em> is an instantiation of meta-learning in the field of supervised learning. The dataset <strong><em>D</em></strong> is often split into two parts, support set <strong><em>S</em></strong> for learning and a prediction set <strong><em>B</em></strong> for training or testing, <strong><em>D=</em>(<em>S, B</em>)</strong>. Often we consider a <em>K-shot N-class classification</em> task: the support set contains K labeled examples for each of N classes.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/image.png" class="" title="An example of a 4-shot 2-class image classification"> --><p><img src="image.png" alt="An example of a 4-shot 2-class image classification" title="An example of a 4-shot 2-class image classification"></p><p>A dataset <strong><em>D</em></strong> contains pairs of feature vectors and labels, and each label belongs to a known label set <strong><em>L</em></strong>. Let’s say, our classifier <strong><em>f</em></strong> outputs a probability of a data point belonging to the class <strong><em>y</em></strong> given the feature vector <strong><em>x, Pθ(y|x)</em></strong>. The optimal parameters should maximize the probability of true labels across multiple training batches <strong><em>B⊂D</em></strong>:</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_2.png" class=""> --><p><img src="formula_2.png" alt="" title="Formula 2"></p><p>In a few-shot classification, the goal is to reduce the prediction error on data samples with unknown labels given small support set for “fast learning” (think of how “fine-tuning” works). To make the training process mimics what happens during inference, we would like to “fake” datasets with a subset of labels to avoid exposing all the labels to the model and modify the optimization procedure accordingly to encourage fast learning:</p><ol><li><p>Sample a subset of labels.</p></li><li><p>Sample a support set and a training batch. Both of them only contain data points with labels belonging to the sampled label set.</p></li><li><p>The support set is part of the model input.</p></li><li><p>The final optimization uses the mini-batch to compute the loss and update the model parameters through backpropagation, in the same way as how we use it in the supervised learning</p></li></ol><p>We may consider each pair of sampled datasets as one data point. The model is trained such that it can generalize to other datasets. Symbols in red are added for <a href="https://nayan.co/#/home">meta-learning</a> in addition to the supervised learning objective.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_3.png" class=""> --><p><img src="formula_3.png" alt="" title="Formula 3"></p><h2 id="The-Learner-and-Meta-Learner"><a href="#The-Learner-and-Meta-Learner" class="headerlink" title="The Learner and Meta Learner"></a><strong>The Learner and Meta Learner</strong></h2><p>Another popular view of meta-learning decomposes the model update into two stages:</p><ul><li><p><strong><em>A classifier is the learner model, trained for operating a given task;</em></strong></p></li><li><p><strong><em>In the meantime, an optimizer learns how to update the learner model’s parameters via the support set.</em></strong></p></li></ul><p>Let’s consider what happens in normal supervised training. In the figure below, <strong>M</strong> is the neural network with initial weights (blue ■) and <strong>L</strong> calculates the loss function, and <strong>O</strong> is the optimizer with parameters (pink ★). For each data sample, the model predicts, finds loss, and optimizes the model weights. This happens in the cycle.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/training_process.png" class="" title="Training step in supervised learning"> --><p><img src="training_process.png" alt="Training step in supervised learning" title="Training step in supervised learning"></p><p>In meta-learning, the model <strong>M</strong> is called <strong>the learner</strong> and the optimizer <strong>O</strong> is called <strong>the meta-learner</strong>. The meta-learner’s parameters are learned by back-propagating a meta-loss gradient along the training process itself, back to the initial weights of the model and/or to the parameters of the optimizer</p><p>We now have two, nested, training processes: the <strong><em>meta-training process</em></strong> of the optimizer/meta-learner in which the <em>(meta-)forward pass</em> includes several training steps of the model (with forward, backward, and optimization steps).</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/meta_training.gif" class="" title="Meta Training process"> --><p><img src="meta_training.gif" alt="Meta Training process" title="Meta Training process"></p><p>A single step of the <strong>meta-training process</strong> includes two steps of the <strong>training process</strong> of the model (vertically in the meta-forward and meta-backward boxes). The training process of the model is exactly the same training process as in supervised learning. The input of the meta-forward pass is a list of examples/labels (or a list of batches) that are used successively during the model training pass. <strong><em>Meta-loss</em></strong> is calculated to reduce the training error. It means, the lower the loss, the better the training was. A <strong><em>meta-optimizer</em></strong> is used to update the weights of the optimizer.</p><p>Thanks for reading it…</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><p><a href="https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html#a-simple-view" target="_blank" rel="noopener">https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html#a-simple-view</a></p></li><li><p><a href="https://medium.com/huggingface/from-zero-to-research-an-introduction-to-meta-learning-8e16e677f78a" target="_blank" rel="noopener">from-zero-to-research-an-introduction-to-meta-learning</a></p></li><li><p><a href="http://localhost:4000/blog/2020/05/06/Meta-Learning-Learning-to-learn-fast/meta-learning.png" target="_blank" rel="noopener">http://localhost:4000/blog/2020/05/06/Meta-Learning-Learning-to-learn-fast/meta-learning.png</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nayan </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Meta Learning </tag>
            
            <tag> Supervised Learning </tag>
            
            <tag> nayanindia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python and Kafka: message passing and more</title>
      <link href="/blog//AI/Pyton-and-Kafka-Message-Passing-and-More/"/>
      <url>/blog//AI/Pyton-and-Kafka-Message-Passing-and-More/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-and-Kafka-message-passing-and-more"><a href="#Python-and-Kafka-message-passing-and-more" class="headerlink" title="Python and Kafka: message passing and more"></a>Python and Kafka: message passing and more</h2><p>At many stages during a developer’s career, he/she has to build systems capable of communicating with another. For example, there may be two <strong><em>python</em></strong> programs and the second program’s operations might depend on the output of the first program. There can be multiple programs in that linear sequence, with every consecutive program depending on the output of the previous. The linear sequence may even branch out to two child programs depending on the output of the previous. An example <strong><em>dependency graph</em></strong> is shown below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*w7Bht4t-dwqjDDtYlBdFqQ.jpeg" alt="Fig 1: Dependency graph for python programs"></p><p>As shown in Fig 1, program 2 depends on the output of program 1. Similarly, program 3 depends on the output of program 2. Program 3, in turn, branched out into two children programs accepting output from 3. If the objective of the developer is to make program 4 and program 5 run in parallel then he/she will have to make asynchronous calls to these programs in a multi-threaded fashion. Since python is not inherently thread safe, making scalable multi-threaded systems becomes a bit difficult. This is where <strong><em>Apache Kafka</em></strong> can be used.</p><p>Let me give you brief introduction of <strong><em>Apache Kafka</em></strong> before moving into it’s implementation and integration with Python.</p><p>A software platform developed by <strong>LinkedIn, Kafka *<em>is an open-source stream processing pipeline which was later donated to the *</em>Apache Software foundation.</strong></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*8GbrXbHdH5uPGMb5epWhrg.png" alt="[Apache logo](https://kafka.apache.org/images/logo.png) at [https://kafka.apache.org/](https://kafka.apache.org/)"></p><p>As mentioned on the official <strong>Apache</strong> site, <strong>Kafka</strong> can be used for creating <strong>data pipelines</strong> that are horizontally scalable, extremely fast and fault-tolerant.</p><p>The use-case involving python programs given above is not an exact streaming pipeline but <strong><em>Kafka</em></strong> can be used to solve the problem of sending messages to programs for execution and can be also be used to horizontally scale the information between programs.</p><p>Let’s move forward to see how this can be done.</p><h2 id="1-Installing-Kafka-on-Ubuntu-and-Confluent-Kafka-for-python"><a href="#1-Installing-Kafka-on-Ubuntu-and-Confluent-Kafka-for-python" class="headerlink" title="1. Installing Kafka on Ubuntu and Confluent-Kafka for python:"></a><strong>1. Installing Kafka on Ubuntu and Confluent-Kafka for python:</strong></h2><p>In order to install Kafka, just follow <a href="https://www.digitalocean.com/community/tutorials/how-to-install-apache-kafka-on-ubuntu-18-04" target="_blank" rel="noopener">**this</a>** installation tutorial for Ubuntu 18 given on <a href="https://www.digitalocean.com/" target="_blank" rel="noopener">**DigitalOcean</a>**.</p><p><a href="https://www.confluent.io/" target="_blank" rel="noopener">***Confluent-Kafka</a>*** is a fully managed enterprise platform for Kafka services.</p><p>Confluent also ships a <strong><em>Python Client</em></strong> for Kafka, which can be used to integrate Kafka directly with python. This client can be used to create topics, delete them and also send and receive messages.</p><h2 id="2-Using-Kafka-with-python"><a href="#2-Using-Kafka-with-python" class="headerlink" title="2. Using Kafka with python:"></a>2. Using Kafka with python:</h2><p>Let’s begin my making a project folder.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*4nvSxxZ2jc6yPlYFwxg4wQ.jpeg" alt="Fig 2: Project folder"></p><p>We will be carrying out the experiments using Docker since it’s a wonderful piece of technology and makes a developer’s life extremely easy.</p><p>A good practice would be to have two project folders, but for this experiment would be using just one. To execute the python programs we will be going inside the containers and running and them manually.</p><blockquote><p> If you want a pretty tutorial on using Docker with python checkout these blogs -&gt; <a href="https://medium.com/@abose550/installing-tensorflow-2-0-on-ubuntu-18-04-using-docker-run-all-experiments-from-a-container-4be9c2a8004d" target="_blank" rel="noopener">**Docker and Tensorflow</a> and also <a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener">Docker and YOLO</a>**</p></blockquote><p>Let’s go ahead and check each of these files now.</p><p><strong>Config.yml : <em>*Contains the topic list and from which the two programs are going to read. Also contains the broker information. A kafka topic retains a certain message for a certain amount of topic. Kafka topics can be also be broken down into partitions. Users can then send specific messages in these partitions. To understand more about Kafka topics and partitions check this link out -&gt; [</em></strong>Kafka topics and partitions](<a href="http://cloudurable.com/blog/kafka-architecture-topics/index.html" target="_blank" rel="noopener">http://cloudurable.com/blog/kafka-architecture-topics/index.html</a>) . ***A Kafka consumer reads messages from a particular topic and the Kafka produces/sends messages to topics.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*IFfYGEzlKdLQtfqEEBVShQ.jpeg" alt="Fig 3: Configuration file for topics"></p><p><strong>KafaConsumer.py and KafkaProducer.py : **These two files contains the classes for the *</strong>Kafka Consumer<strong>* and *</strong>Kafka Producer.<strong>* For complete information please refer to the [*</strong>github repo](<a href="https://github.com/AbhishekBose/kafka_python" target="_blank" rel="noopener">https://github.com/AbhishekBose/kafka_python</a>)<strong><em>. Link given below. These two files contains classes which have been created using the *</em>Consumer</strong> and <strong>Producer</strong> classes from the <strong><em>confluent_kafka</em></strong> library.main(operation,x,y)</p><p><strong>Dockerfile: *<em>Contains the configuration for the docker container which we will be spawning. This will take a *</em>python:3.8 image</strong> and install all required libraries using the <strong>requirements.txt</strong> file. The project folder is added to container using the *<em>ADD *</em>command as shown in Fig 4 below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Fk5rGui4NbxAvvnBLYbmJg.jpeg" alt="Fig 4: Dockerfile"></p><p>*<em>Requirements.txt *</em>: Contains a list of all the python libraries for this project</p><p><strong>python_1.py : *<em>This file does the task of sending a message to a topic which will be read by the second python code. The *</em>config file</strong> is read using the *<em>PyYaml library. *</em>The function , defined as *<em>main(operation,x,y) *</em>initializes the producer object named prod and sends a message to it. The message is in a json format which can be read the second program. In this example the second function would be performing two operations namely addition and subtraction. The operations and the operators are taken as command line arguments.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*CO_s7768bEv5xALKw5y-rw.jpeg" alt="Fig 5: Shows the program which will be producing messages to a particular topic"></p><p><strong>python_2.py: *<em>This code essentially will contain the consumer. The consumer will read from the topic in which *</em>python_1.py **will be producing the message. The two functions are defined as *</strong>add(x,y) <strong>*and *</strong>subtract(x,y). <strong><em>These functions will be receiving the two operators to perform the operation on, shown in Fig 6.1. The main function defined in Fig 6.2 is while loop which continuously reads from the consumer topic. This function checks the *</em>operation</strong> which was sent by the previous code by reading the message in a json format and calls the respective function. If the operator in the message is <strong><em>sum</em></strong> then the <strong>add</strong> function is called otherwise the <strong>subtract</strong> function is called.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*cDn_HI9hxoFFFMRA273Z8A.jpeg" alt="Fig 6.1: Shows the two function which will be called."></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*aMkG3vQqVpUT02uK9d8sqQ.jpeg" alt="Fig 6.2: Shows the main function which will be reading from the consumer topic."></p><h2 id="3-Building-the-image-and-running-the-container"><a href="#3-Building-the-image-and-running-the-container" class="headerlink" title="3. Building the image and running the container:"></a><strong>3. Building the image and running the container:</strong></h2><p>In order to build the image type the command:</p><pre><code>docker build -t &apos;image_name&apos; .</code></pre><p>Once the image is built, spawn a container by typing the following command:</p><pre><code>docker run -it -d --name=container_name --network=host image_name</code></pre><h2 id="4-Executing-the-programs"><a href="#4-Executing-the-programs" class="headerlink" title="4. Executing the programs:"></a><strong>4. Executing the programs:</strong></h2><p>Go inside the container by typing the following command:</p><pre><code>docker exec -it container_name  bash</code></pre><p>This will get you inside. The above container opens up the bash shell inside the container.</p><p>Run the following commands in two separate shells to witness the output</p><p>Run the consumer first</p><pre><code>cd srcpython python2.py 0</code></pre><p>The 0 here is the <strong>client id</strong> which gives a name to your consumer. You can have <strong><em>multiple consumers</em></strong> reading from the consumer topic. This ensures parallel processing as shown in <strong>Fig 7.1</strong>. Just assign a different <strong>client id</strong> to each <strong>consumer</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/2008/1*aY-01qEPBZYG3a_erAywPw.jpeg" alt="Fig 7.1: Starting the consumer"></p><p>Now execute the producer by :</p><pre><code>python python1.py 5 2 sum</code></pre><p>The operation here is sum and the <strong>operators are 5 and 2</strong> (Fig 7.2)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AnnjUCi-85d0Z68hQtyqsA.jpeg" alt="Fig 7.2: python1 program executed with the sum operator"></p><p>The output can be immediately seen with the result of the addition operation on the previously shell as shown in Fig 7.3</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*b-5s2RcJoInCfZm0Y_cqCg.jpeg" alt="Fig 7.3 : The output message can be seen and the result 7 as well"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion:"></a><strong>5. Conclusion:</strong></h2><p>This project was a basic example how <strong>Kafka</strong> can be extensively used for creating massive, parallel data pipelines. At <a href="https://nayan.co">**NAYAN Technologies</a>** we use <strong>Kafka</strong> extensively for our deep learning inference and training data pipelines.</p><p><strong>Github repo</strong>: <a href="https://github.com/AbhishekBose/kafka_python" target="_blank" rel="noopener">***https://github.com/AbhishekBose/kafka_python</a>***</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Queue </tag>
            
            <tag> Kafka </tag>
            
            <tag> Stream Processing </tag>
            
            <tag> Microservices </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Maps | MarkerCluster</title>
      <link href="/blog//Web/angular-maps/"/>
      <url>/blog//Web/angular-maps/</url>
      
        <content type="html"><![CDATA[<br><img src="/blog/Web/angular-maps/BG.png" class="" title="l"><h2 id="Marker-Cluster"><a href="#Marker-Cluster" class="headerlink" title="Marker Cluster"></a>Marker Cluster</h2><p>The marker clustering utility helps you to manage multiple markers at different zoom levels.When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.<br>If you have a lot of markers on the map, it’s better to use Marker Cluster setting to organize them better visually.</p><h2 id="Why-marker-clustering"><a href="#Why-marker-clustering" class="headerlink" title="Why marker clustering?"></a>Why marker clustering?</h2><p>The marker clustering utility helps you manage large number of google markers at different zoom levels. To be precise, the ‘markers’ are actually ‘items’ at this point, and only become ‘Markers’ when they’re rendered. Rendering large number of google markers on google map can be very resouce extensive tasks and UI experince is also not good even if we achieve to render them. When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.</p><h2 id="How-marker-clustering-works"><a href="#How-marker-clustering-works" class="headerlink" title="How marker clustering works"></a>How marker clustering works</h2><p>The MarkerClustererPlus library uses the grid-based clustering technique that divides the map into squares of a certain size (the size changes at each zoom level), and groups the markers into each square grid. It creates a cluster at a particular marker, and adds markers that are in its bounds to the cluster. It repeats this process until all markers are allocated to the closest grid-based marker clusters based on the map’s zoom level. If markers are in the bounds of more than one existing cluster, the Maps JavaScript API determines the marker’s distance from each cluster, and adds it to the closest cluster.</p><h2 id="How-to-use-Marker-Cluster-in-Angular-Apps"><a href="#How-to-use-Marker-Cluster-in-Angular-Apps" class="headerlink" title="How to use Marker Cluster in Angular Apps"></a>How to use Marker Cluster in Angular Apps</h2><h3 id="Installation-of-modules"><a href="#Installation-of-modules" class="headerlink" title="Installation of modules"></a>Installation of modules</h3><p>We need to install AGM (Angular Google Maps), js-marker-cluster(peer dependency)</p><ol><li>NPM: <code>npm install js-marker-clusterer @agm/js-marker-clusterer --save</code></li><li>Yarn: <code>yarn add js-marker-clusterer @agm/js-marker-clusterer</code></li></ol><p><strong>Module</strong>: <code>https://www.npmjs.com/package/@agm/js-marker-clusterer</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol><li><p>Import the module in <code>module.ts</code> file of your anulgar application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">// add these imports</span><br><span class="line">import &#123; AgmCoreModule &#125; from &apos;@agm/core&apos;;</span><br><span class="line">import &#123; AgmJsMarkerClustererModule &#125; from &apos;@agm/js-marker-clusterer&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">],</span><br><span class="line">imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AgmCoreModule.forRoot(&#123;</span><br><span class="line">    apiKey: [&apos;YOUR_API_KEY_HERE&apos;]</span><br><span class="line">    &#125;),</span><br><span class="line">    AgmJsMarkerClustererModule</span><br><span class="line">],</span><br><span class="line">providers: [],</span><br><span class="line">bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>Import the modules in angular component </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as MarkerClusterer from &quot;@google/markerclusterer&quot;</span><br><span class="line"></span><br><span class="line">new MarkerClusterer(map, opt_markers, opt_options)</span><br></pre></td></tr></table></figure></li><li><p>Use in your angular component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;agm-map style=&quot;height: 300px&quot; [latitude]=&quot;51.673858&quot; [longitude]=&quot;7.815982&quot;&gt;</span><br><span class="line">    &lt;agm-marker-cluster imagePath=&quot;https://raw.githubusercontent.com/googlemaps/v3-utility-library/master/markerclustererplus/images/m&quot;&gt;</span><br><span class="line">        &lt;agm-marker [latitude]=&quot;51.673858&quot; [longitude]=&quot;7.815982&quot;&gt;</span><br><span class="line">        &lt;/agm-marker&gt;&lt;!-- multiple markers --&gt;</span><br><span class="line">    &lt;/agm-marker-cluster&gt;</span><br><span class="line">&lt;/agm-map&gt;</span><br></pre></td></tr></table></figure><h3 id="Customize-your-marker-clusters"><a href="#Customize-your-marker-clusters" class="headerlink" title="Customize your marker clusters"></a>Customize your marker clusters</h3><p>There are many ways to adjust how your marker clusters look and function. Many of them won’t even require that you make edits to the underlying library. Instead, there are a number of options you can set when you create your clusters.</p></li><li><p><code>gridSize</code>: the number of pixels within the cluster grid</p></li><li><p><code>zoomOnClick</code>: whether to zoom in on a cluster when clicked</p></li><li><p><code>maxZoom</code>: what farthest level you can zoom in before regular markers are always displayed</p></li><li><p><code>styles</code>: an array of objects for each cluster type that includes textColor, textSize, and other features of the cluster</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const clusterOptions = &#123;</span><br><span class="line">    imagePath: &quot;https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m&quot;,</span><br><span class="line">    gridSize: 30,</span><br><span class="line">    zoomOnClick: false,</span><br><span class="line">    maxZoom: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OutPut:</p><img src="/blog/Web/angular-maps/custom.png" class="" title="l"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Google Maps </tag>
            
            <tag> Large markers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generating Pdf in Ruby on Rails using Prawn</title>
      <link href="/blog//Ruby-on-Rails/generating-pdf-in-ruby-on-rails/"/>
      <url>/blog//Ruby-on-Rails/generating-pdf-in-ruby-on-rails/</url>
      
        <content type="html"><![CDATA[<p>We all must have got requirement to generate PDFs at backend and store that on cloud. Well, here is a quick guide on how you can start generating the PDFs your own way without any limits.</p><img src="/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/prawn.png" class=""><h2 id="Lets-start-generating-PDF-step-by-step"><a href="#Lets-start-generating-PDF-step-by-step" class="headerlink" title="Lets start generating PDF step by step:-"></a>Lets start generating PDF step by step:-</h2><p>1: Add <strong>prawn</strong> gem to your Gemfile</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'prawn'</span></span><br></pre></td></tr></table></figure><p>2: Create an instance of PDF document</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br></pre></td></tr></table></figure><p>3: Draw some text and style that in your own way</p><p><img src="text_style.png" alt="Text Styling"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.text <span class="string">'My Text'</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Styled Text'</span>, <span class="symbol">style:</span> <span class="symbol">:bold</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Sized Text'</span>, <span class="symbol">size:</span> <span class="number">20</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Colored Text'</span>, <span class="symbol">color:</span> <span class="string">'7f7f7f'</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Aligned Text'</span>, <span class="symbol">align:</span> <span class="symbol">:right</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>4: Adding a space/gap before and after drawing a text</p><p><img src="text_spacing.png" alt="Text Gapping"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.text <span class="string">'My Text'</span></span><br><span class="line">receipt_pdf.move_down <span class="number">50</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Text After Moving down'</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>5: Generate Output file</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This will create a file at your project root directory</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Drawing-tables"><a href="#Drawing-tables" class="headerlink" title="Drawing tables:-"></a>Drawing tables:-</h2><p>1: Prepare data to draw the table</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare receipt details to show in a table in the following format</span></span><br><span class="line"><span class="comment"># [[a1,a2]</span></span><br><span class="line"><span class="comment"># [b1,b2]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># this will form following table</span></span><br><span class="line"><span class="comment"># __|_1___2__</span></span><br><span class="line"><span class="comment"># a | a1  a2</span></span><br><span class="line"><span class="comment"># b | b1  b2</span></span><br><span class="line"></span><br><span class="line">table_data = [[<span class="string">'Items'</span>, <span class="string">'Rates'</span>],</span><br><span class="line">              [<span class="string">'Item1'</span>, <span class="string">"1"</span>],</span><br><span class="line">              [<span class="string">'Item2'</span>, <span class="string">"2"</span>],</span><br><span class="line">              [<span class="string">''</span>, <span class="string">''</span>], <span class="comment"># For adding gap between my data</span></span><br><span class="line">              [<span class="string">'Item3'</span>, <span class="string">"3"</span>],</span><br><span class="line">              [<span class="string">'Item4'</span>, <span class="string">"4"</span>]]</span><br></pre></td></tr></table></figure><p>2: Add <strong>prawn/table</strong> requirement before drawing the table</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'prawn/table'</span></span><br></pre></td></tr></table></figure><p>3: Draw Table using prepared data</p><p><img src="table.png" alt="Text Gapping"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.table table_data <span class="comment"># table_data used from previous step</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>4: Styling Rows/Columns/Cells</p><p><img src="table_formatting.png" alt="Table Styling"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line"></span><br><span class="line">receipt_pdf.table table_data, <span class="symbol">cell_style:</span> &#123;<span class="symbol">border_width:</span> <span class="number">0</span>, <span class="symbol">width:</span> <span class="number">250</span>, <span class="symbol">padding:</span> [<span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>], <span class="symbol">text_color:</span> <span class="string">'373737'</span>, <span class="symbol">inline_format:</span> <span class="literal">true</span>&#125; <span class="keyword">do</span></span><br><span class="line"> <span class="comment"># Aligning a specific column cells' text to right</span></span><br><span class="line"> columns(-<span class="number">1</span>).align = <span class="symbol">:right</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># To add bottom padding to a specific row</span></span><br><span class="line"> row(-<span class="number">2</span>).padding_bottom = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># To set width of border for a specific row</span></span><br><span class="line"> row(-<span class="number">1</span>).border_top_width = <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Adding-custom-font-to-your-PDF-document"><a href="#Adding-custom-font-to-your-PDF-document" class="headerlink" title="Adding custom font to your PDF document"></a>Adding custom font to your PDF document</h2><p>1: Download Font Files in <strong>.ttf</strong> format<br>2: Place them into <em>font/your_font_name</em> directory at project root level(Create one if it’s not there)<br>3: Set that font to your PDF document instance</p><p><img src="text_font.png" alt="Using Cutom Font"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">your_font = <span class="string">'font/your_font_name/your_font_name.ttf'</span></span><br><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line"></span><br><span class="line">default_font = receipt_pdf.font.name</span><br><span class="line"></span><br><span class="line">receipt_pdf.text <span class="string">'Default Font Text'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will change font of your entire document after setting this</span></span><br><span class="line">receipt_pdf.font your_font</span><br><span class="line"></span><br><span class="line">receipt_pdf.text <span class="string">'Your Font Text'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will change font of your entire document to default font</span></span><br><span class="line">receipt_pdf.font default_font</span><br><span class="line"></span><br><span class="line">receipt_pdf.move_down <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To Style all cells of a table</span></span><br><span class="line">receipt_pdf.table table_data, <span class="symbol">cell_style:</span> &#123;<span class="symbol">font:</span> your_font&#125;</span><br><span class="line"></span><br><span class="line">receipt_pdf.move_down <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To Style all cells of a specific column</span></span><br><span class="line">receipt_pdf.table table_data <span class="keyword">do</span></span><br><span class="line"> columns(-<span class="number">1</span>).font = your_font</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Limit-the-PDF-page-size-to-drawn-area-only-OR-Remove-extra-white-area-after-drawing-all-your-data"><a href="#Limit-the-PDF-page-size-to-drawn-area-only-OR-Remove-extra-white-area-after-drawing-all-your-data" class="headerlink" title="Limit the PDF page size to drawn area only OR Remove extra white area after drawing all your data"></a>Limit the PDF page size to drawn area only OR Remove extra white area after drawing all your data</h2><p><a href="my_pdf_file.pdf">my_pdf_file.pdf</a></p><p>1: Set page length to much higher value than what you want to draw while creating instance on your PDF document</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new(<span class="symbol">page_size:</span> [<span class="number">600</span>, <span class="number">2000</span>], <span class="symbol">margin:</span> <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>2: Do your drawing</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf.text <span class="string">'My Drawing Here'</span></span><br></pre></td></tr></table></figure><p>3: Clip or Resize the document to the drawn area</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">padding_after_drawing = <span class="number">15</span></span><br><span class="line">initial_width = <span class="number">600</span></span><br><span class="line">initial_height = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.page.dictionary.data[<span class="symbol">:MediaBox</span>] = [<span class="number">0</span>, receipt_pdf.y - padding_after_drawing, initial_width, initial_height]</span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="http://prawnpdf.org/manual.pdf" target="_blank" rel="noopener">Prawn Guide</a> with examples</li><li><a href="http://prawnpdf.org/prawn-table-manual.pdf" target="_blank" rel="noopener">Prawn Table Guide</a> with examples</li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby on Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ashish Jajoria </tag>
            
            <tag> pdf </tag>
            
            <tag> generate pdf </tag>
            
            <tag> backend </tag>
            
            <tag> rails </tag>
            
            <tag> ruby </tag>
            
            <tag> ror </tag>
            
            <tag> ruby on rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Charts Features</title>
      <link href="/blog//Web/angular-advanced/"/>
      <url>/blog//Web/angular-advanced/</url>
      
        <content type="html"><![CDATA[<br><img src="/blog/Web/angular-advanced/bg.png" class=""><h2 id="Animation-Configuration"><a href="#Animation-Configuration" class="headerlink" title="Animation Configuration"></a>Animation Configuration</h2><p>Chart.js animates charts out of the box. A number of options are provided to configure how the animation looks and how long it takes.</p><p>The following animation options are available. The global options for are defined in Chart.defaults.global.animation.</p><ol><li><p><strong>Duration</strong>: Number of milliseconds an animation takes to complete</p></li><li><p><strong>Easing</strong>:</p><ul><li><code>linear</code></li><li><code>easeInQuad</code></li><li><code>easeOutQuad</code></li><li><code>easeInOutQuad</code></li><li><code>easeInCubic</code></li><li><code>easeOutCubic</code></li><li><code>easeInOutCubic</code></li><li><code>easeInQuart</code></li><li><code>easeOutQuart</code></li><li><code>easeInOutQuart</code></li><li><code>easeInQuint</code></li><li><code>easeOutQ</code></li></ul></li><li><p><strong>Animation Callbacks</strong></p></li></ol><p>The onProgress and onComplete callbacks are useful for synchronizing an external draw to the chart animation. The callback is passed a Chart.Animation instance:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Chart object</span><br><span class="line">  chart: Chart,</span><br><span class="line"></span><br><span class="line">  // Current Animation frame number</span><br><span class="line">  currentStep: number,</span><br><span class="line"></span><br><span class="line">  // Number of animation frames</span><br><span class="line">  numSteps: number,</span><br><span class="line"></span><br><span class="line">  // Animation easing to use</span><br><span class="line">  easing: string,</span><br><span class="line"></span><br><span class="line">  // Function that renders the chart</span><br><span class="line">  render: function,</span><br><span class="line"></span><br><span class="line">  // User callback</span><br><span class="line">  onAnimationProgress: function,</span><br><span class="line"></span><br><span class="line">  // User callback</span><br><span class="line">  onAnimationComplete: function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example-of-preogress-bar-animation"><a href="#Example-of-preogress-bar-animation" class="headerlink" title="Example of preogress bar animation"></a>Example of preogress bar animation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">    type: &apos;line&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    options: &#123;</span><br><span class="line">        animation: &#123;</span><br><span class="line">            onProgress: function(animation) &#123;</span><br><span class="line">                progress.value = animation.animationObject.currentStep / animation.animationObject.numSteps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Legend-Configuration"><a href="#Legend-Configuration" class="headerlink" title="Legend Configuration"></a>Legend Configuration</h2><p>The chart legend displays data about the datasets that are appearing on the chart.</p><ol><li><p><strong>Position</strong><br>Position of the legend. Options are:</p><ul><li><code>top</code></li><li><code>left</code></li><li><code>bottom</code></li><li><code>right</code></li></ul></li><li><p><strong>Align</strong><br>Alignment of the legend. Options are:</p><ul><li><code>start</code></li><li><code>center</code></li><li><code>end</code></li></ul></li><li><p><strong>Legend Item Interface</strong></p></li></ol><p>Items passed to the legend onClick function are the ones returned from labels.generateLabels. These items must implement the following interface.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Label that will be displayed</span><br><span class="line">  text: string,</span><br><span class="line"></span><br><span class="line">  // Fill style of the legend box</span><br><span class="line">  fillStyle: Color,</span><br><span class="line"></span><br><span class="line">  // If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect</span><br><span class="line">  hidden: boolean,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap</span><br><span class="line">  lineCap: string,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash</span><br><span class="line">  lineDash: number[],</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset</span><br><span class="line">  lineDashOffset: number,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin</span><br><span class="line">  lineJoin: string,</span><br><span class="line"></span><br><span class="line">  // Width of box border</span><br><span class="line">  lineWidth: number,</span><br><span class="line"></span><br><span class="line">  // Stroke style of the legend box</span><br><span class="line">  strokeStyle: Color,</span><br><span class="line"></span><br><span class="line">  // Point style of the legend box (only used if usePointStyle is true)</span><br><span class="line">  pointStyle: string | Image,</span><br><span class="line"></span><br><span class="line">  // Rotation of the point in degrees (only used if usePointStyle is true)</span><br><span class="line">  rotation: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following example will create a chart with the legend enabled and turn all of the text red in color.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">    type: &apos;bar&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    options: &#123;</span><br><span class="line">        legend: &#123;</span><br><span class="line">            display: true,</span><br><span class="line">            labels: &#123;</span><br><span class="line">                fontColor: &apos;rgb(255, 99, 132)&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h2><h3 id="Tooltip-Configuration"><a href="#Tooltip-Configuration" class="headerlink" title="Tooltip Configuration"></a>Tooltip Configuration</h3><ol><li><strong>Position Modes</strong><br>Possible modes are:</li></ol><ul><li><code>average</code></li><li><code>nearest</code></li></ul><ol start="2"><li><strong>Alignment</strong><br>The titleAlign, bodyAlign and footerAlign options define the horizontal position of the text lines with respect to the tooltip box. The following values are supported.</li></ol><pre><code>* `left`* `right`* `center`</code></pre><h3 id="Tooltip-Callbacks"><a href="#Tooltip-Callbacks" class="headerlink" title="Tooltip Callbacks"></a>Tooltip Callbacks</h3><ol><li><strong>Label Callback</strong></li></ol><p>The label callback can change the text that displays for a given data point. A common example to round data values; the following example rounds the data to two decimal places.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">  type: &apos;line&apos;,</span><br><span class="line">  data: data,</span><br><span class="line">  options: &#123;</span><br><span class="line">      tooltips: &#123;</span><br><span class="line">          callbacks: &#123;</span><br><span class="line">              label: function(tooltipItem, data) &#123;</span><br><span class="line">                  var label = data.datasets[tooltipItem.datasetIndex].label || &apos;&apos;;</span><br><span class="line"></span><br><span class="line">                  if (label) &#123;</span><br><span class="line">                      label += &apos;: &apos;;</span><br><span class="line">                  &#125;</span><br><span class="line">                  label += Math.round(tooltipItem.yLabel * 100) / 100;</span><br><span class="line">                  return label;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Label Color Callback</strong></li></ol><p>For example, to return a red box for each item in the tooltip you could do:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">  type: &apos;line&apos;,</span><br><span class="line">  data: data,</span><br><span class="line">  options: &#123;</span><br><span class="line">      tooltips: &#123;</span><br><span class="line">          callbacks: &#123;</span><br><span class="line">              labelColor: function(tooltipItem, chart) &#123;</span><br><span class="line">                  return &#123;</span><br><span class="line">                      borderColor: &apos;rgb(255, 0, 0)&apos;,</span><br><span class="line">                      backgroundColor: &apos;rgb(255, 0, 0)&apos;</span><br><span class="line">                  &#125;;</span><br><span class="line">              &#125;,</span><br><span class="line">              labelTextColor: function(tooltipItem, chart) &#123;</span><br><span class="line">                  return &apos;#543453&apos;;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Tooltip Item Interface</strong></li></ol><p>The tooltip items passed to the tooltip callbacks implement the following interface.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Label for the tooltip</span><br><span class="line">  label: string,</span><br><span class="line"></span><br><span class="line">  // Value for the tooltip</span><br><span class="line">  value: string,</span><br><span class="line"></span><br><span class="line">  // X Value of the tooltip</span><br><span class="line">  // (deprecated) use `value` or `label` instead</span><br><span class="line">  xLabel: number | string,</span><br><span class="line"></span><br><span class="line">  // Y value of the tooltip</span><br><span class="line">  // (deprecated) use `value` or `label` instead</span><br><span class="line">  yLabel: number | string,</span><br><span class="line"></span><br><span class="line">  // Index of the dataset the item comes from</span><br><span class="line">  datasetIndex: number,</span><br><span class="line"></span><br><span class="line">  // Index of this data item in the dataset</span><br><span class="line">  index: number,</span><br><span class="line"></span><br><span class="line">  // X position of matching point</span><br><span class="line">  x: number,</span><br><span class="line"></span><br><span class="line">  // Y position of matching point</span><br><span class="line">  y: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://jtblin.github.io/angular-chart.js/" target="_blank" rel="noopener">https://jtblin.github.io/angular-chart.js/</a></li><li><a href="https://github.com/jtblin/angular-chart.js/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jtblin/angular-chart.js/blob/master/README.md</a></li><li><a href="https://valor-software.com/ng2-charts/" target="_blank" rel="noopener">https://valor-software.com/ng2-charts/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charts </tag>
            
            <tag> Plugins </tag>
            
            <tag> Customization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask + PyMongo Integration</title>
      <link href="/blog//uncategorized/Flask-PyMongo-Integration/"/>
      <url>/blog//uncategorized/Flask-PyMongo-Integration/</url>
      
        <content type="html"><![CDATA[<img src="/blog/uncategorized/Flask-PyMongo-Integration/maxresdefault.jpg" class=""><p>Flask + PyMongo Integration</p><p>In my college days I found quite difficulty regarding “How to integrate my application with the database”. May be most of us (mostly college students) still have the same problem. So today in this post I will show you how to integrate a Flask application with PyMongo.</p><p>What is <strong>PyMongo</strong>?</p><p>As according to its official site,“<strong>PyMongo is a Python distribution containing tools for working with <a href="http://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>, and is the recommended way to work with MongoDB from Python</strong>”. The PyMongo is very easy to use and quite easy to integrate with Flask. For this you must have install MongoDb in your machine.</p><p><strong>Let’s get started.</strong></p><p>If you are new to flask then before diving more into it, I highly recommend to check out my <a href="https://medium.com/@hghimanshu81/how-to-represent-any-trained-model-in-the-form-of-a-web-application-e5af87d9731d" target="_blank" rel="noopener">previous</a> post in which I discussed about how to create your first application.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Sf16kjWkKCSGNfR3mVRcUQ.png" alt="Fig. 1 Folder structure for the project"></p><p>Firstly we will write some basic files for the project before heading towards the main backend logic. Firstly we write the <strong><em>run.py</em></strong> file and write the code to start our flask server</p><pre><code>from labeler import app as  applicationfrom labeler import configapplication.config.from_object(config)application.config.from_pyfile(&apos;config/config.py&apos;)if __name__ == &quot;__main__&quot;:    application.run(host=&apos;0.0.0.0&apos;, port=8000)</code></pre><p>Now, write the <strong><strong>init</strong>.py</strong></p><pre><code>from flask import Flaskfrom flask_bootstrap import Bootstrapapp = Flask(__name__)Bootstrap(app)from labeler import routes</code></pre><p>Now make a <strong>settings.py</strong> file inside the <strong>config</strong> folder and write the below code in it.</p><pre><code>import pymongofrom pymongo import MongoClientENV = &quot;test&quot;if ENV.lower() == &quot;production&quot;:    MONGO_DB_NAME = &apos;image_search&apos;    MONGO_DB_URL = &apos;localhost&apos;else:    MONGO_DB_NAME = &apos;image_search_local&apos;    MONGO_DB_URL = &apos;localhost&apos;CLIENT = MongoClient()CLIENT = MongoClient(MONGO_DB_URL, 27017)DB = CLIENT[MONGO_DB_NAME]</code></pre><p>In this script, we simple configure our mongo database and connect pymongo with the DB.</p><p>Now, its time to make a script for mongo queries. Lets create a <strong>mongo.py</strong> file inside <strong>mongodb</strong> folder and write the below lines in it.</p><pre><code>import pymongofrom pymongo import MongoClientimport sysfrom labeler.config.settings import DBclass settingupDb:    def __init__(self, query, coll_name):        self.query = query        self.coll_name = coll_name    def constructDb(self):        self.coll = DB[self.coll_name]        return self.coll    def insertsToDb(self,db,coll,query):        self.post_id = coll.insert(self.query, check_keys=False)        print(&apos;Data inserted for Object ID:: &apos;,self.post_id)    def updatesInfo(self, db, coll, query, newVal):        self.query = query        self.newVal = newVal        self.updatedColl = coll.update_many(self.query, self.newVal)   def fetchInfo(self, db, coll, query):        self.results = coll.find(query)        return self.results   def aggregateQuery(self, db, coll, query_in_list):       self.results = coll.aggregate(query_in_list)       return self.resultsdef insertData(query, collection):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    c_db.insertsToDb(DB, coll, query)def fetchData(collection, query):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    res = c_db.fetchInfo(DB, coll, query)    return resdef groupingData(collection, query):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    res = c_db.aggregateQuery(DB, coll, query)    return resdef updateData(query, newVal, collection):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    c_db.updatesInfo(DB, coll, query, newVal)</code></pre><p>In this script, I created a class <em>settingupDb</em>, it basically sets up the db. Then defines some methods based on the queries. In this project we use some basic queries like :-</p><ul><li><p>Insert</p></li><li><p>Find</p></li><li><p>Update</p></li><li><p>Aggregate</p></li></ul><p>Will explain the use of these queries when we use them in the project.</p><p>Now lets make our <strong>routes.py</strong> file.</p><pre><code>from labeler import appimport jsonimport osfrom werkzeug import secure_filenameimport flaskfrom flask import render_templatefrom labeler.backend.handle_requests import STATIC_FOLDER = os.path.dirname(os.path.abspath(__file__)) + &apos;/static/&apos;</code></pre><p>Firstly we will import everything in the script. The last line is for the static folder where we server our media files.</p><p>Since our database is empty, so firstly we will write a <strong>Data Insertion</strong> endpoint. Now, write a <strong>handle_requests.py</strong> file inside the <strong>backend</strong> folder.</p><pre><code>from labeler.mongodb.mongo import fetchData, insertDataCOLL = &quot;Image-Data&quot;def isLabelInDb(label, image_path):    query = {&quot;label&quot;: label}    res = fetchData(COLL, query)    alreadyPresent = False    if res.count() == 0:        insert_q = {&quot;label&quot;: label, &quot;image_path&quot;: image_path}           insertData(insert_q, COLL)    else:        alreadyPresent = True    return alreadyPresent</code></pre><p>This function deals with the insertion and fetching part. The input is the label and the image. Firstly it checks the given label is already present in the database or not, if the label is not present then it inserts it into the database along with the image and if the label is already there in the database then it sets the “alreadyPresent” flag. Now according to the this logic we write our endpoint in the <strong>routes.py</strong> file.</p><pre><code>@app.route(&quot;/createLabels&quot;, methods=[&apos;GET&apos;, &apos;POST&apos;])def createLabels():    if flask.request.method == &apos;POST&apos;:        image = flask.request.files[&apos;image&apos;]        label = flask.request.form[&apos;label&apos;]        image.save(STATIC_FOLDER + secure_filename(image.filename))        alreadyPresent = isLabelInDb(label, image.filename)        if alreadyPresent:            message = &quot;The label is already in the database. Try with other label&quot;            return render_template(&apos;error.html&apos;, message = message)        else:            message = &quot;The label is successfully inserted to the database&quot;            return render_template(&apos;success.html&apos;, message = message)    else:        return render_template(&apos;createLabels.html&apos;)</code></pre><p>This endpoint takes two input for a <em>POST</em> request. The “image” and “label”. It calls the function described above and it renders a template with a message.</p><p>Now we defines our “home” endpoint. In <strong>routes.py</strong> write the below code.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*xcCmqMUDBsx78ryCtf5NHg.png" alt="Fig. 2. Page which creates the label and upload the associated image"></p><pre><code>@app.route(&apos;/home&apos;)def home():    allImages = getAllImages()    data = {}    if len(list(allImages._CommandCursor__data)) != 0:        for r in allImages:            label = r[&apos;_id&apos;]            images = r[&apos;image_path&apos;]            data[label] = images    return render_template(&apos;home.html&apos;, results=data)</code></pre><p>This renders all the images with their function to the home page. Lets create a “getAllImages” function for this code. In the <strong>handle_requests.py</strong> write below code.</p><p><img src="https://cdn-images-1.medium.com/max/2074/1*a0ZuZwhq8SCJJmJKwhVXjg.png" alt="Fig. 3. Home page of the application shows the available labels"></p><pre><code>def getAllImages():    group_q = {&quot;$group&quot;: {&quot;_id&quot;: &quot;$label&quot;, &quot;image_path&quot;: {&quot;$push&quot;: &quot;$image_path&quot;}}}    project_q = {&quot;$project&quot;: {&quot;label&quot;: 1, &quot;image_path&quot;:1}}    pipeline = [group_q, project_q]    res = groupingData(COLL, pipeline)    return res</code></pre><p>This function is basically grouping all the data based on the labels name present in the database and all image values associated with that are pushed into an array.</p><p>Now, we will write a function for fetching of image from database. In the <strong>handle_requests.py</strong> write the below code.</p><pre><code>def getRequiredImages(label):    query = {&quot;label&quot;: label}    res = fetchData(COLL, query)    totalImages = []    if res.count() != 0:        for i in res:            image_name = i[&apos;image_path&apos;]            totalImages.append(image_name)    return totalImages</code></pre><p>This function fetches all the images from the database for the given label name and returns them as a list. Now lets create its endpoint in the <strong>routes.py</strong>.</p><pre><code>@app.route(&apos;/fetchImages&apos;, methods=[&apos;POST&apos;])def fetchImages():    if flask.request.method == &apos;POST&apos;:        label = flask.request.form[&apos;label&apos;]        totalImages = getRequiredImages(label)        if len(totalImages) == 0:            message = &quot;No image is present in the database with the label &quot; + str(label)            return render_template(&apos;error.html&apos;, message = message)        else:            data = [totalImages, label]            return render_template(&apos;show_images.html&apos;, results=data)</code></pre><p>This endpoint takes a label name as input and fetches its images from the database and renders the image on the template.</p><p><img src="https://cdn-images-1.medium.com/max/2440/1*deLzuuUyotCHuYGIz3isfg.png" alt="Fig. 4. Fetching a particular label from the database"></p><p>Now the last type of operation left is <strong>UPDATE</strong>. For this write the below code in <strong>handle_requests.py</strong>.</p><pre><code>def updateInfo(image_path, curr_label, new_label):    curr_label_q = {&quot;label&quot;: curr_label}    new_label_q = {&quot;$set&quot;: {&quot;label&quot;: new_label}}    updateData(curr_label_q, new_label_q, COLL)</code></pre><p>This function takes three input :-</p><ul><li><p>the image name</p></li><li><p>the current label name</p></li><li><p>the new label name</p></li></ul><p>Now its corresponding endpoint in the <strong>routes.py</strong></p><pre><code>@app.route(&apos;/updateLabel&apos;, methods=[&apos;POST&apos;])def updateLabel():    if flask.request.method == &apos;POST&apos;:        image = flask.request.form[&apos;image&apos;]        curr_value = flask.request.form[&apos;current_label&apos;]        new_value = flask.request.form[&apos;new_label&apos;]        updateInfo(image, curr_value, new_value)        message = &quot;Label is updated !!&quot;        return render_template(&apos;success.html&apos;, message=message)</code></pre><p>This endpoint shows a message after successful updation of labels</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*4d_3cmuiPbHOUqW8TLfjgQ.png" alt="Fig. 5. Message showing that label is changed"></p><p><strong>Conclusion</strong></p><p>This is the very basic application which is made by integrating flask with pymongo. The code is available on <a href="https://github.com/hghimanshu/Blog/tree/master/image-labeler" target="_blank" rel="noopener">github.</a> The necessary templates are also uploaded there.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>App-Heartbeat</title>
      <link href="/blog//Android/App-Heartbeat/"/>
      <url>/blog//Android/App-Heartbeat/</url>
      
        <content type="html"><![CDATA[<p>This is an era of mobile technology where everyone is a smartphone user. To be able to use a smartphone we need to ‘Interact’ with it. A simple touch with a finger to open an app is an example of this ‘interact’ and this phenomenon is called ‘User Interaction’.<br>Heart of application will continue beat, as long as user interact. Heartbeat is used to calculate sessions, for how much time a user is interacted with application. When a user is started using app, we create a session. A session has two values, start time and end time. For a new session both start and end time will same (current time of system). Every one minute, we check, is user interacted or not. If user is interacted then we update that session by changing its end time (now end time for that session will be current time of system). If user is not interacted then we create a new session. Reason behind to create a heartbeat of application , we will have at least 60 seconds lost.</p><img src="/blog/Android/App-Heartbeat/heartbeat.jpeg" class="" title="Image_1"><h2 id="Let’s-get-started"><a href="#Let’s-get-started" class="headerlink" title="Let’s get started"></a>Let’s get started</h2><h3 id="Create-a-model"><a href="#Create-a-model" class="headerlink" title="Create a model"></a>Create a model</h3><p>In that data class, we will handle some sessions related tasks (check session is active or not, update session etc.). A session will have two values start time and end time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data class Session(</span><br><span class="line">    val startTime: Long,</span><br><span class="line">    var endTime: Long</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>We perform some operations in session -</p><h4 id="Is-session-active"><a href="#Is-session-active" class="headerlink" title="- Is session active :"></a>- Is session active :</h4><p>In that we check current session is active or not. If difference between System current time and end time of that session is less than a heartbeat( heartbeat duration + heartbeat buffer). In our case heartbeat duration is 60 seconds and heartbeat buffer is 2 seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun isActive(): Boolean &#123;</span><br><span class="line">        return System.currentTimeMillis() - endTime &lt;  HEARTBEAT_DURATION + HEARTBEAT_BUFFER</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Update-current-session"><a href="#Update-current-session" class="headerlink" title="- Update current session:"></a>- Update current session:</h4><p>If session is active then we update current session. For updating current session we will put system current time in end time of that session.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun update(): Session &#123;</span><br><span class="line">        endTime = System.currentTimeMillis()</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Create-a-manager"><a href="#Create-a-manager" class="headerlink" title="Create a manager"></a>Create a manager</h3><p>For handling all heartbeat operations, we will create a session manager. A session manager will manage all sessions activities like — add session, update session. When we open application in onResume() of activity we will start a handler and onPause(),will stop handler.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">init &#123;</span><br><span class="line">    lifecycleOwner.lifecycle.addObserver(object : LifecycleObserver</span><br><span class="line">           &#123;</span><br><span class="line">               @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span><br><span class="line">               fun startSession() &#123;</span><br><span class="line">               Timber.d(&quot;Starting Session for activity:$&#123;lifecycleOwner.javaClass.name&#125;&quot;)</span><br><span class="line">               handler.post(runnable)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">               fun pauseSession() &#123;</span><br><span class="line">               Timber.d(&quot;Pausing Session for activity:    $&#123;lifecycleOwner.javaClass.name&#125;&quot;)</span><br><span class="line">               handler.removeCallbacks(runnable)</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>In handler we are checking heartbeat of application, that user is interacted with app for last 60 seconds or not. If user is interacted then update current session otherwise create new session. We store these sessions into shared preferences.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fun heartBeat() &#123;</span><br><span class="line">    if (hasUserInteracted) &#123;</span><br><span class="line">        val currentSession = getLastSession()</span><br><span class="line">        if (currentSession != null &amp;&amp; currentSession.isActive()) &#123;</span><br><span class="line">            updateCurrentSession()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            createNewSession()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        handler.removeCallbacks(runnable)</span><br><span class="line">        onSessionTimeoutListener.onTimeout()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hasUserInteracted = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For more sample code , see the <a href="https://github.com/diwakarsinghdiwakar/App-Heartbeat" target="_blank" rel="noopener" title="App-Heartbeat"><code>App-Heartbeat</code></a></p><h2 id="And-we’re-done"><a href="#And-we’re-done" class="headerlink" title="And we’re done!"></a>And we’re done!</h2>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> user interaction </tag>
            
            <tag> Diwakar Singh </tag>
            
            <tag> sessions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Override Devise Auth Token Controllers</title>
      <link href="/blog//Ruby-on-Rails/override-devise-auth-token-controllers/"/>
      <url>/blog//Ruby-on-Rails/override-devise-auth-token-controllers/</url>
      
        <content type="html"><![CDATA[<p>For authentication and token management at backend in Ruby On Rails we use <a href="https://github.com/lynndylanhurley/devise_token_auth" target="_blank" rel="noopener">devise-token-auth</a>.</p><img src="/blog/Ruby-on-Rails/override-devise-auth-token-controllers/devise_token_auth.png" class=""><h2 id="Sometimes-we-need-to-update-some-of-the-following-default-behaviours"><a href="#Sometimes-we-need-to-update-some-of-the-following-default-behaviours" class="headerlink" title="Sometimes we need to update some of the following default behaviours:-"></a>Sometimes we need to update some of the following default behaviours:-</h2><ul><li>Registration(via facebook, twitter, mobile, email etc.)</li><li>Password reset flow(email reset link OR OTP based)</li><li>We would like to add or remove some fields from the signin API.<br>etc</li></ul><h2 id="Configutation"><a href="#Configutation" class="headerlink" title="Configutation:-"></a>Configutation:-</h2><p>Use <a href="https://devise-token-auth.gitbook.io/devise-token-auth/" target="_blank" rel="noopener">devise-token-auth-guide</a> to setup your devise configuration.</p><p>After configuration, your <strong>routes.rb</strong> would look like this:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line">mount_devise_token_auth_for <span class="string">'User'</span>, <span class="symbol">at:</span> <span class="string">'auth'</span></span><br></pre></td></tr></table></figure><h2 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding:-"></a>Overriding:-</h2><ul><li>Create a package named <code>overrides</code>, in cotrollers package.</li><li><strong>For overriding RegistrationsController</strong> used for signup flow, add <code>registrations_controller.rb</code> to the package we just created and extent the RegistrationsController by <code>DeviseTokenAuth::RegistrationsController</code>.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Overrides</span></span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationsController</span> &lt; DeviseTokenAuth::RegistrationsController</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Now write the <code>create</code> method yourself for your custom parameters you want to use while signing up a user with custom conditions and if there is any condition when you don’t want to handle, then just call <strong>super</strong> and the default signup flow will work for that case.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Overrides</span></span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationsController</span> &lt; DeviseTokenAuth::RegistrationsController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line"></span><br><span class="line">   ... <span class="comment">#Your custom conditions and handling</span></span><br><span class="line"></span><br><span class="line">   @resource = User.new(<span class="symbol">email:</span> email) <span class="comment">#This may vary based on your params and conditions you want</span></span><br><span class="line">   @resource.name = params[<span class="symbol">:name</span>]</span><br><span class="line">   @resource.password = params[<span class="symbol">:password</span>]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">unless</span> @resource.save</span><br><span class="line">    render <span class="symbol">json:</span> &#123; <span class="symbol">message:</span> @resource.errors.full_messages.join(<span class="string">', '</span>) &#125;, <span class="symbol">status:</span> <span class="symbol">:bad_request</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   @token = @resource.create_token</span><br><span class="line">   @resource.save</span><br><span class="line"></span><br><span class="line">   update_auth_header</span><br><span class="line">   render_create_success</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Now Update your <strong>routes.rb</strong></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount_devise_token_auth_for <span class="string">'User'</span>, <span class="symbol">at:</span> <span class="string">'auth'</span>, <span class="symbol">controllers:</span> &#123;</span><br><span class="line"> <span class="symbol">registrations:</span> <span class="string">'overrides/registrations'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Likewise-we-can-override-following-controllers"><a href="#Likewise-we-can-override-following-controllers" class="headerlink" title="Likewise we can override following controllers:-"></a>Likewise we can override following controllers:-</h2><ul><li>ConfirmationsController</li><li>PasswordsController</li><li>OmniauthCallbacksController</li><li>SessionsController</li><li>TokenValidationsController<br>&nbsp;</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://github.com/lynndylanhurley/devise_token_auth" target="_blank" rel="noopener">devise_token_auth</a> gem</li><li><a href="https://devise-token-auth.gitbook.io/devise-token-auth/" target="_blank" rel="noopener">Devise Token Auth</a> Guide</li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/">Generating Pdf in Ruby on Rails using Prawn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby on Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ashish Jajoria </tag>
            
            <tag> backend </tag>
            
            <tag> rails </tag>
            
            <tag> ruby </tag>
            
            <tag> ror </tag>
            
            <tag> authentication </tag>
            
            <tag> devise </tag>
            
            <tag> devise_auth_token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Character-Recognition-with-CNN-network</title>
      <link href="/blog//AI/Character-Recognition-with-CNN-network/"/>
      <url>/blog//AI/Character-Recognition-with-CNN-network/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post talks about a simple Convolution Neural Network (CNN) which is used to<br>recognize characters i.e. Numeric and Alphabet. We have total 10 Numeric and 26<br>Alphabets that sums up the total number of classes in our network to 36. In<br>order to get characters from the License Plates we first need to use some kind<br>of License Plate detector which is followed by a Character segmentation method<br>in order to extract character from the License Plates (LP).</p><h2 id="Architecture-of-model"><a href="#Architecture-of-model" class="headerlink" title="Architecture of model"></a>Architecture of model</h2><p>We have used very familiar CNN network for OCR, usually CNN consists of some<br>Convolution layers(All Convolution layers are followed by max pooling layers)<br>and fully connected layers.</p><p>We already know much about Convolution layers so i am gonna talk about max<br>pooling and fully connected layers here.</p><p><strong>Pooling</strong> <strong>layers</strong> section would reduce the number of parameters when the<br>images are too large. Spatial pooling also called sub-sampling or down-sampling<br>which reduces the dimensionality of each map but retains important information.<br>Spatial pooling can be of different types:</p><ul><li>Max Pooling</li><li>Average Pooling</li><li>Sum Pooling</li></ul><p>Max pooling takes the largest element from the rectified feature map. Taking the<br>largest element could also take the average pooling. Sum of all elements in the<br>feature map call as sum pooling.</p><p>The layer we call as <strong>Fully Connected Layer (FC) layer</strong>, we flattened our<br>matrix into vector and feed it into a fully connected layer like a neural<br>network. After the last max pooling layer there will be a sequence of FC layers.<br>Finally we will apply an activation function such as softmax or sigmoid to<br>classify the outputs between classes.</p><p>Model configuration is given below:</p><p>Total layer : 14</p><ol><li>Convolution with 64 different filters in size of (3x3)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function</li><li>Batch Normalization</li></ul></li><li>Convolution with 128 different filters in size of (3x3)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function</li><li>Batch Normalization</li></ul></li><li>Convolution with 256 different filters in size of (5x5)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function </li><li>Batch Normalization</li></ul></li><li>Convolution with 512 different filters in size of (5x5)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function </li><li>Batch Normalization</li></ul></li><li>Flattening the 3-D output of the last convolving operations.</li><li>Fully Connected Layer with 128 units</li><li>Fully Connected Layer with 256 units</li><li>Fully Connected Layer with 512 units</li><li>Fully Connected Layer with 1024 units</li><li>Fully Connected Layer with 36 units (number of classes)<img src="/blog/AI/Character-Recognition-with-CNN-network/p1.png" class=""> <center>Figure 1.  Architecture of model</center></li></ol><h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><p>Defining a placeholder in tensorflow is very common. When we want to declare our<br>input and output without initialization this method comes very useful. You can<br>use them during training of model by feeding them with training data and labels.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def create_placeholders(n_H0, n_W0, n_C0, n_y):</span><br><span class="line">    X = tf.placeholder(tf.float32, shape = (None, n_H0, n_W0, n_C0), name=&apos;X&apos;)</span><br><span class="line">    Y = tf.placeholder(tf.float32, shape = (None, n_y), name = &apos;Y&apos;)</span><br><span class="line">    keep_prob = tf.placeholder(tf.float32, name=&quot;keep_prob&quot;)</span><br><span class="line"></span><br><span class="line">    return X,Y,keep_prob</span><br><span class="line"></span><br><span class="line"># X_train contains training data with shape (batch_size,height,widht,channel)</span><br><span class="line"></span><br><span class="line"># Y_train contains labels of training data with shape (batch_size,num_classes,1)</span><br><span class="line">m, n_H0, n_W0, n_C0 = X_train.shape</span><br><span class="line">n_y = Y_train.shape[1]</span><br><span class="line">X, Y, keep_prob = create_placeholders(n_H0, n_W0, n_C0, n_y)</span><br></pre></td></tr></table></figure><br> <p>Once you have defined your model architecture you now need to define cost and<br>optimizer for your model which is defined in the next section.</p><h2 id="Cost-function-and-optimizer"><a href="#Cost-function-and-optimizer" class="headerlink" title="Cost function and optimizer"></a>Cost function and optimizer</h2><p>Cost function gives degree of error between predicted and expected values and<br>after that it represent it in form of a real number. Whereas optimizer update<br>the weight parameters to minimize the cost function.</p><p>Finally, you’ll define cost, optimizer, and accuracy. The <a href="https://www.tensorflow.org/api_docs/python/tf/math/reduce_mean" target="_blank" rel="noopener">tf.reduce_mean</a><br>takes an input tensor to reduce, and the input tensor is the results of  certain<br>loss functions between predicted results and ground truths. We have to measure<br>loss over 36 classes, <a href="https://www.tensorflow.org/api_docs/python/tf/nn/softmax_cross_entropy_with_logits" target="_blank" rel="noopener">tf.nn.softmax_cross_entropy_with_logis</a>  function is<br>used. </p><p>When training the network, what you want is minimize  the cost by applying a<br>algorithm of your choice. It could be <a href="https://www.tensorflow.org/api_docs/python/tf/train/GradientDescentOptimizer" target="_blank" rel="noopener">SGD</a>,<a href="https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer" target="_blank" rel="noopener">AdamOptimizer</a><a href="https://www.tensorflow.org/api_docs/python/tf/train/AdagradOptimizer" target="_blank" rel="noopener">,AdagradOptimizer</a> or<br>something else. You have to study how each algorithm works to choose what<br>to use, but AdamOptimizer works fine for most cases in general.</p><p>Please find cost and optimizer sample below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = 0.001</span><br><span class="line"># X is placeholder you defined in previous section</span><br><span class="line">Z3 = forward_propagation(X, keep_prob)</span><br><span class="line"></span><br><span class="line"># Z3 has the model structure</span><br><span class="line"># Loss and Optimizer</span><br><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=Z3, labels=Y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"># Accuracy</span><br><span class="line">y_pred = tf.nn.softmax(Z3)</span><br><span class="line">y_pred_class = tf.argmax(y_pred, axis = 1)</span><br><span class="line">y_true_class = tf.argmax(Y, axis = 1)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(y_pred_class, y_true_class)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So in this post i have explained basic steps to train simple CNN network for any<br>classification task i.e. OCR in this particular post. I have given all the steps<br>except the training part for that you just need to use session of tensorflow<br>while feeding image data and labels for those images to placeholder you have<br>created to the session.run function.</p><br> <br> ]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> OCR </tag>
            
            <tag> Character Recognition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started with Ruby on Rails</title>
      <link href="/blog//Rails/rails-getting-started/"/>
      <url>/blog//Rails/rails-getting-started/</url>
      
        <content type="html"><![CDATA[<img src="/blog/Rails/rails-getting-started/ruby-on-rails.png" class=""><p>We recently inducted a couple of engineers into our Rails team. Both of them had a web frontend experience, but zero experience with Ruby or backend development. Thanks to the simplicity and convention focussed approach of the Rails framework, both of them were writing test driven production grade code within a week!</p><p>First thing was setting up their machines. We decided to go with</p><ul><li>Ubuntu 18.04 for the OS</li><li>RVM as the Ruby version manager</li><li>RubyMine as the IDE</li><li>Postgresql as the database</li></ul><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>First step was to get them comfortable with Ruby. We believe that doing is the best way of learning. So we got them to complete the wonderful koans at <a href="http://rubykoans.com/" target="_blank" rel="noopener">http://rubykoans.com/</a> to get hands on practice.</p><p>An important thing while working in a team is to have consistent coding style across all members. We follow the style guide at <a href="https://github.com/rubocop-hq/ruby-style-guide" target="_blank" rel="noopener">https://github.com/rubocop-hq/ruby-style-guide</a> , so they read through the guide.</p><h3 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h3><p>We feel the best guide for Rails is the official guide itself.</p><p><a href="https://edgeguides.rubyonrails.org/" target="_blank" rel="noopener">https://edgeguides.rubyonrails.org/</a></p><p>The three sections that were assigned were,</p><ul><li>Getting Started with Rails</li><li>Models</li><li>Controllers</li></ul><p>We skipped the views as we mostly work on API only apps.</p><p>After this, we covered the Rails style guide <a href="https://github.com/rubocop-hq/rails-style-guide" target="_blank" rel="noopener">https://github.com/rubocop-hq/rails-style-guide</a> .</p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>We use <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a> and <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">FactoryBot</a> internally for writing our tests.</p><p>For RSpec, the Github page is a good starting point <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">https://github.com/rspec/rspec-rails</a></p><p>For FactoryBot, we assigned the Getting Started guide on Github <a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md" target="_blank" rel="noopener">https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md</a></p><h3 id="Continuing-Education"><a href="#Continuing-Education" class="headerlink" title="Continuing Education"></a>Continuing Education</h3><p>With these basic tutorials, the engineers were basically ready for contributing to production. Their first few pull requests had many comments, but they came down significantly within the first two weeks.</p><p>For continuing our Rails education, we keep reading up on the frequent gems that we use, such as</p><ul><li>devise</li><li>aasm</li><li>active_model_serializers</li><li>pundit</li><li>resque</li><li>whenever</li><li>carrierwave</li></ul><p>and other excellent gems.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>We got a pleasant reminder as to why Rails is our favorite framework to work on. Within the first few weeks only the engineers were writing production grade, well tested code.</p><p>Hats off to the Ruby philosophy and Matz that our fresh Ruby engineers were able to start guessing the function names for different classes almost immediately!</p>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL in custom Grafana panels</title>
      <link href="/blog//Web/using-mysql-in-custom-grafana-panel/"/>
      <url>/blog//Web/using-mysql-in-custom-grafana-panel/</url>
      
        <content type="html"><![CDATA[<br><img src="/blog/Web/using-mysql-in-custom-grafana-panel/grafana.png" class="" title="l"><blockquote><p>In this post, we will see how to use MySQL in your custom panel in Grafana.</p></blockquote><p><em>If you don’t know how to make <strong>custom panels</strong> read this post before this. <a href="https://nayan.co/blog/2020/01/06/create-custom-grafana-panel/">https://nayan.co/blog/2020/01/06/create-custom-grafana-panel/</a></em></p><h3 id="MySQL-in-Grafana"><a href="#MySQL-in-Grafana" class="headerlink" title="MySQL in Grafana"></a>MySQL in Grafana</h3><p>To use your MySQL in your dashboard, you need to link your MySQL db with your dashboard. To do so, follow the steps below:</p><ul><li>Find the <strong>Configurations</strong> icon of your Grafana on the left side of your dashbaord.</li><li>Click <strong>Add Datasource</strong><br><img src="datasources.png" alt=""></li><li>Click on <strong>Add New Source</strong></li><li>Choose MySQL and add your databse credentials.</li></ul><h3 id="Using-Data-in-your-panel"><a href="#Using-Data-in-your-panel" class="headerlink" title="Using Data in your panel."></a>Using Data in your panel.</h3><p>To show data from your SQL db to your panel. You need to use it in your panel’s module.ts and frontend page.</p><p>This example has data integration, if you want to see a code for referral.<br><a href="https://github.com/grafana/piechart-panel" target="_blank" rel="noopener">https://github.com/grafana/piechart-panel</a></p><p>To get the data in your panel you need to call your function when queries fetch the data from DB. There are 5 events in a grafana panel which are listed below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.events.on(&apos;render&apos;, this.onRender.bind(this));</span><br><span class="line">this.events.on(&apos;data-received&apos;, this.onDataReceived.bind(this));</span><br><span class="line">this.events.on(&apos;data-error&apos;, this.onDataError.bind(this));</span><br><span class="line">this.events.on(&apos;data-snapshot-load&apos;, this.onDataReceived.bind(this));</span><br><span class="line">this.events.on(&apos;init-edit-mode&apos;, this.onInitEditMode.bind(this));</span><br></pre></td></tr></table></figure><p>The only one we need to think about right now is data-received event. This event is called whenever an SQL query is entered in the <strong>Query</strong> Editor of a panel in Grafana.<br><img src="queries.png" alt=""></p><h3 id="onDataReceived"><a href="#onDataReceived" class="headerlink" title="onDataReceived"></a>onDataReceived</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onDataReceived(dataList: any) &#123;</span><br><span class="line">  console.log(dataList)</span><br><span class="line">  this.series = dataList.map(this.seriesHandler.bind(this));</span><br><span class="line">  this.data = this.parseSeries(this.series);</span><br><span class="line">  this.render(this.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function is called whenever data is received on panel. Since we bind <strong>this</strong> in this function. Its own object is sent in this function. <strong>dataList</strong> contains all the data in this case. You can manipulate and show the data however you want in this function.</p><p><em>You can enter any number of queries in the Queries Section of your panel in the dashboard and use them as they are sent in dashboard as an Array output.</em></p><p>This is how you use SQL DB in your custom Grafana Panel</p><blockquote><p>Tips: You can use $__timeFilter(column_name) to filter the data according to the timestamp provided in Grafana dashboard. This is an inbuilt function in grafana MySQL.</p></blockquote><p>References:</p><ul><li><a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></li><li><a href="https://github.com/grafana/piechart-panel" target="_blank" rel="noopener">https://github.com/grafana/piechart-panel</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boost-up-neural-networks-using-docker-containers-and-spark</title>
      <link href="/blog//AI/boost-up-neural-networks-using-docker-containers-and-spark/"/>
      <url>/blog//AI/boost-up-neural-networks-using-docker-containers-and-spark/</url>
      
        <content type="html"><![CDATA[<h1 id="Boost-up-neural-networks-using-docker-containers-and-pyspark-part-1"><a href="#Boost-up-neural-networks-using-docker-containers-and-pyspark-part-1" class="headerlink" title="Boost up neural networks using docker containers and pyspark part : 1"></a>Boost up neural networks using docker containers and pyspark part : 1</h1><p><img src="Boost-up0.jpg" alt="alt_text" title="image_tooltip"></p><p>src: <a href="https://images.app.goo.gl/itH6Cbq8LK7cNZxM8" target="_blank" rel="noopener">https://images.app.goo.gl/itH6Cbq8LK7cNZxM8</a></p><p>Introduction:</p><p>In this blog we will learn how we can use spark to boost up the inference speed of the neural network model. The whole topic is too long to cover in a single blog so we will divide it in two parts</p><ol><li>Create spark cluster on which we will run multiple instances of the model </li><li>Run the neural networks on the cluster</li></ol><p><strong>Lets begin,</strong></p><p>For creating cluster we will use docker containers and create a common network where they can communicate with each other</p><p>Lets start with introduction of Docker:</p><p><em>Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. [<a href="https://en.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Docker</a></em>(software)](<a href="https://en.wikipedia.org/wiki/Docker_(software)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Docker_(software)</a>)_</p><p>Thanks to docker containers we will be able to create several worker nodes on which we can run spark for distributed processing.</p><p><strong><span style="text-decoration:underline;">Docker Installation:</span></strong></p><p>Docker installation is very easy just follow the steps in the following link</p><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Get Docker Engine - Community for Ubuntu</a></p><p><strong><span style="text-decoration:underline;">Create Docker image :</span></strong></p><p>To create a docker image we need to first create a Dockerfile which upon building will install all the libraries that we want.</p><p><em>Sample docker file:</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FROM nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04</span><br><span class="line">MAINTAINER XYZ</span><br><span class="line">RUN apt-get update -y &amp;&amp; apt-get install -y python3-pip python3-dev libsm6 libxext6 libxrender-dev</span><br><span class="line"># addons</span><br><span class="line">RUN \</span><br><span class="line">apt-get install -y \</span><br><span class="line">wget \</span><br><span class="line">unzip \</span><br><span class="line">ffmpeg \ </span><br><span class="line">git</span><br><span class="line">RUN pip3 install opencv-python</span><br><span class="line">RUN pip3 install moviepy</span><br><span class="line">RUN pip3 install pandas</span><br><span class="line">RUN pip3 install requests</span><br><span class="line">RUN pip3 install numba</span><br><span class="line">RUN pip3 install imutils</span><br><span class="line">RUN pip3 install filterpy</span><br><span class="line">RUN pip3 install sklearn</span><br><span class="line">RUN pip3 install kafka-python</span><br></pre></td></tr></table></figure><p>Now build the docker image using the following command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t &quot;my_docker_image&quot; .</span><br></pre></td></tr></table></figure><p>This will create a docker image with name my_docker_image</p><p><img src="1.png" alt="fig_1" title="image_tooltip"></p><p>You can see the list of images by using the following command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>You should see your newly created image.</p><p>Now we are ready to create containers using the above image.</p><p><strong><span style="text-decoration:underline;">Create docker network:</span></strong></p><p>Docker network is essential when containers wants to communicate . The most common and default network is bridge.</p><p>Run the following command to create a network</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create &quot;my_network&quot;</span><br></pre></td></tr></table></figure><p>Run the following command to list all existing networks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network ls</span><br></pre></td></tr></table></figure><p>You should see your newly created networks</p><p><img src="2.png" alt="fig_2" title="img_tooltip"></p><p>Now that we have created the network , we can now create containers and bind them with the network that we created.</p><p>Create docker container:</p><p>Let’s first create a master node of the cluster</p><p>Run the following command to create the master docker container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name master-docker --network my_network my_image /bin/sh</span><br></pre></td></tr></table></figure><p>This command will create the container and attach a shell with the container</p><p>To check if the docker is running , run the following command to list down all running container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><p>You should see the container master-docker running</p><p><img src="3.png" alt="fig_3"></p><p>Now lets create 2 worker nodes</p><p>The following commands will create two worker nodes with names worker_docker_1 and worker_docker_2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name worker_docker_1 --network my_network my_image /bin/sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name worker_docker_2 --network my_network my_image /bin/sh</span><br></pre></td></tr></table></figure><p>Now again check the running container now you will be able to see one master node and 2 worker nodes.</p><p><img src="4.png" alt="fig_4"></p><p>That’s it for this part , tune in for part 2 of the blog where we will run spark over the cluster and run neural network over it</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> Docker </tag>
            
            <tag> neural-network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation</title>
      <link href="/blog//AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/"/>
      <url>/blog//AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/</url>
      
        <content type="html"><![CDATA[<!-- # Efficient Residual Factorized Neural Network for Semantic Segmentation --><blockquote><p>This post explains a research paper ERFNET, a real time and accurate ConvNet for semantic segmentation and the underlying concepts.</p></blockquote><h2 id="Semantic-Segmentation"><a href="#Semantic-Segmentation" class="headerlink" title="Semantic Segmentation"></a>Semantic Segmentation</h2><p>Semantic segmentation is the task of classifying each image pixel to a class label. It is a classification task but at pixel level instead of image level. The labels could include a person, car, flower, piece of furniture, etc. For example, in the below image, all the cars will have the same labels. However, one can differentiate between the same class objects, this is called instance segmentation. For example, in an image that has many cars, <strong>instance segmentation</strong> can differentiate between each car object.</p><!-- ![Image 1](https://cdn-images-1.medium.com/max/3840/1*CUp00rA4mSlJ8CRflVvKcA.jpeg)*Image 1* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/image_1.jpeg" class="" title="Image 1"><p>Semantic segmentation has many applications in autonomous vehicles, Advanced Driver Assistance Systems (ADAS), robotics, self-driving cars because it is important to know the context in which the agent operates.</p><p>Convolutional Neural Networks (CNN), which initially designed for classification tasks, have impressive capabilities in solving complex segmentation tasks as well. <strong>Residual layers</strong> have created a new trend in ConvNets design. Their reformulation of the convolutional layers to avoid the degradation problem of deep architectures allowed neural networks to achieve very high accuracies with large amounts of layers.</p><p>Computation resources are key factors in self-driving and autonomous vehicles. Algorithms are not only required to operate reliably, but they are required to operate fast (real-time), fit in embedded devices due to space constraints (compactness), and have low power consumption to affect as minimum as possible the vehicle autonomy. Considering a reasonable amount of layers, enlarging the depth with more convolutions achieves only small gains in accuracy while significantly increasing the required computational resources.</p><h3 id="Residual-Layer"><a href="#Residual-Layer" class="headerlink" title="Residual Layer"></a>Residual Layer</h3><p>The paper proposes a new architecture design that leverages skip connections and convolutions with 1D kernels. While the skip connections allow the convolutions to learn residual functions that facilitate training, the 1D factorized convolutions allow a significant reduction of the computational costs while retaining a similar accuracy compared to the 2D ones.</p><!-- ![Residual Block](https://cdn-images-1.medium.com/max/2000/1*6WlIo8W1_Qc01hjWdZy-1Q.png)*Residual Block* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/residual_block.png" class="" title="Residual Block"><p>Residual blocks allow convolutional layers to learn the residual functions. For example, in the above image, x is the input vector and F(X)+x is the output vector of the y vector. F(X) is the residual function to be learned. This residual formulation facilitates learning and significantly reduces the degradation problem present in architectures that stack a large number of layers.</p><h3 id="Non-bottleneck-Residual-Layers"><a href="#Non-bottleneck-Residual-Layers" class="headerlink" title="Non-bottleneck Residual Layers"></a>Non-bottleneck Residual Layers</h3><p>There can be two instances of residual layer: the non-bottleneck design with two 3x3 convolutions as depicted in Fig. 1(a), and the bottleneck version as depicted in Fig. 1(b). Both versions have a similar number of parameters and almost equivalent accuracy. However, the bottleneck requires less computational resources and these scale in a more economical way as depth increases. Hence, the bottleneck design has been commonly adopted in state-of-the-art networks. However, it has been reported that non-bottleneck ResNets gain more accuracy from increased depth than the bottleneck versions, which indicates that they are not entirely equivalent and that the bottleneck design still suffers from the degradation problem</p><!-- ![Figure 1](https://cdn-images-1.medium.com/max/2000/1*gu-iuZvJS1-8w-UlWGXmww.png)*Figure 1* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/figure_1.png" class="" title="Figure 1"><p>The paper proposed a new implementation of the residual layer that decomposes 2D convolution into a pair of 1D convolutions to accelerate and reduce the parameters of the original non-bottleneck layer. We refer to this proposed module as “non-bottleneck-1D” (non-bt-1D), which is depicted in Fig. 1(c). This module is faster (as in computation time) and has fewer parameters than the bottleneck design while keeping a learning capacity and accuracy equivalent to the non-bottleneck one.</p><h3 id="Dilated-Convolutions"><a href="#Dilated-Convolutions" class="headerlink" title="Dilated Convolutions"></a>Dilated Convolutions</h3><p>Dilated convolutions are convolutions applied to input images with gaps. The standard convolution is 1-Dilated convolution. Dilated convolutions other than standard convolutions increase the receptive field of the network. Dilated convolutions are more effective in terms of computational cost and parameters than the convolutions with larger kernel size. The paper proposes a network that uses dilated convolution.</p><!-- ![standard convolution](https://cdn-images-1.medium.com/max/2000/1*aIPu6hDHHWFatmOCYP9YPg.gif)*standard convolution* --><!-- ![dilated convolution](https://cdn-images-1.medium.com/max/2000/1*wz4x8BcAOFBPNL6nX4tx-g.gif)*dilated convolution* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/standard_conv.gif" class="" title="Standard Convolution"><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/dilated_conv.gif" class="" title="Dilated Convolution"><h3 id="Network-Architecture"><a href="#Network-Architecture" class="headerlink" title="Network Architecture"></a>Network Architecture</h3><p>The paper presents an encoder-decoder architecture for semantic segmentation. The encoder segment produces downsampled feature maps and the decoder segments upsample the features to match input image resolution. Full network architecture is given in Figure 2</p><!-- ![architecture with feature maps](https://cdn-images-1.medium.com/max/2000/1*YMWnwx78KluFYgcV5KGB0g.png)*architecture with feature maps*![Figure 2](https://cdn-images-1.medium.com/max/2000/1*9Bbsq9_xHHImVSqtFkJrtw.png)*Figure 2* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/image_2.png" class="" title="Architecture with feature maps"><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/figure_2.png" class="" title="figure 2"><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><p><a href="https://pixabay.com/photos/traffic-locomotion-roadway-mobility-3612474/" target="_blank" rel="noopener">https://pixabay.com/photos/traffic-locomotion-roadway-mobility-3612474/</a></p></li><li><p>ERFNet: Efficient Residual Factorized ConvNet for Real-time Semantic Segmentation.</p></li><li><p><a href="https://cdn-images-1.medium.com/max/800/1*aIPu6hDHHWFatmOCYP9YPg.gif" target="_blank" rel="noopener">https://cdn-images-1.medium.com/max/800/1*wz4x8BcAOFBPNL6nX4tx-g.gif</a></p></li><li><p><a href="https://miro.medium.com/max/395/0*3cTXIemm0k3Sbask.gif" target="_blank" rel="noopener">https://miro.medium.com/max/395/0*3cTXIemm0k3Sbask.gif</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Residual Networks </tag>
            
            <tag> Dilated Convolutions </tag>
            
            <tag> Semantic segmentation </tag>
            
            <tag> Autonomous driving </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creating custom Grafana panel</title>
      <link href="/blog//Web/create-custom-grafana-panel/"/>
      <url>/blog//Web/create-custom-grafana-panel/</url>
      
        <content type="html"><![CDATA[<br><img src="/blog/Web/create-custom-grafana-panel/grafana.png" class="" title="l"><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p>Grafana is an open source platform for monitoring and observability. Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data driven culture.</p><p>Grafana is a tool that is used to create dashboards. Dashboards consists of Panels which are used to visualize data in many ways. Grafana has many types of panels available to visualize your data in many forms. Such panels include Graphs, Tables, Single stats, etc. But what if you want to use the Grafana but show data in your own format. Grafana allows that as well. These components are known as plugins.</p><blockquote><p>In this post we will see how to make our own <strong>custom plugin</strong> and use it in our Grafana dashboard.</p></blockquote><h3 id="Requisites"><a href="#Requisites" class="headerlink" title="Requisites:"></a>Requisites:</h3><ul><li>npm or yarn</li><li>Git</li></ul><p>First download the Grafana repo from Grafana website<br><a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a></p><p><img src="directory.png" alt=""></p><p>Then clone Hello World Custom panel with the command written below in the folder <strong>data/plugins</strong> or <strong>var/lib/grafana/plugins</strong>. If no such folder exists in root directory create one.<br><code>Git clone https://github.com/grafana/simple-angular-panel</code></p><p><img src="clone.png" alt=""></p><p>This folder will be created in your data/plugins.</p><p><img src="angular_panel.png" alt=""></p><p>Install the dependencies required for that panel using <code>npm install</code> or <code>yarn</code>. Then build the plugin using <code>yarn build</code> or <code>npm run build</code>. (Running the build script defined in package.json)</p><p>Then start the grafana-server:</p><ul><li>By running the command <code>./bin/grafana-server</code> in the root directory of your grafana repo (<strong>Linux</strong>).</li><li>By running the <strong>grafana-server.exe</strong> in bin Folder (<strong>Windows</strong>).</li></ul><p><img src="bin.png" alt=""></p><p>Then panel will be availables in your visualization section when you create a new panel</p><p><img src="panel_icon.png" alt=""></p><h3 id="Plugin-json"><a href="#Plugin-json" class="headerlink" title="Plugin.json"></a>Plugin.json</h3><p>It defines your panel and uniquely identifies it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;panel&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Simple Angular&quot;,</span><br><span class="line">&quot;id&quot;: &quot;simple-angular-panel&quot;,</span><br><span class="line"></span><br><span class="line">&quot;info&quot;: &#123;</span><br><span class="line">&quot;description&quot;: &quot;Simple Angular Panel&quot;,</span><br><span class="line">&quot;author&quot;: &#123;</span><br><span class="line">&quot;name&quot;: &quot;Grafana Labs&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keywords&quot;: [ &quot;discrete&quot;, &quot;events&quot;, &quot;strings&quot; ],</span><br><span class="line">&quot;logos&quot;: &#123;</span><br><span class="line">&quot;small&quot;: &quot;img/logo.svg&quot;,</span><br><span class="line">&quot;large&quot;: &quot;img/logo.svg&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;links&quot;: [],</span><br><span class="line">&quot;screenshots&quot;: [],</span><br><span class="line">&quot;version&quot;: &quot;%VERSION%&quot;,</span><br><span class="line">&quot;updated&quot;: &quot;%TODAY%&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">&quot;grafanaVersion&quot;: &quot;6.3.x&quot;,</span><br><span class="line">&quot;plugins&quot;: [ ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>“name”</strong>: Name Displayed on panel</li><li><strong>“id”</strong>: Unique Identified of your plugin. If two panels have same ID only 1 will be shown</li><li><strong>“logos”</strong>: shows the images shown for your panel which can be found in src/img folder.</li></ul><h3 id="Module-ts"><a href="#Module-ts" class="headerlink" title="Module.ts"></a>Module.ts</h3><p>It is the entry point of your panel. Functions and variables can be created in <strong>module.ts</strong> and be used In html page using “ctrl” as the object of the class.</p><h3 id="Front-HTML-Page"><a href="#Front-HTML-Page" class="headerlink" title="Front HTML Page."></a>Front HTML Page.</h3><p>This page can be found at <strong>partials/module.html</strong>.</p><p><img src="FrontPage.png" alt=""></p><p>So if you create a variable named “text” in the SimpleCtrl Class (<em>in module.ts</em>). It can be accessed in HTML page using ““.</p><p><strong>Options.html</strong> page contains the page the visualization section which is shown when you create or edit a panel.</p><p>After You create your html pages and functionality in module.ts, you can run <code>npm run build</code> or <code>yarn build</code> and use the panel in your own Grafana however you like.</p><blockquote><p>Tips : If you want to see changes in your panel while you are creating it. Use <code>npm run watch</code> or <code>yarn watch</code>. It implements changes as you make them. It basically creates build with environment settings as development. You can see the changes by refreshing the webpage.</p></blockquote><p>References:</p><ul><li><a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a></li><li><a href="https://github.com/grafana/simple-angular-panel" target="_blank" rel="noopener">https://github.com/grafana/simple-angular-panel</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Charts</title>
      <link href="/blog//Web/angular-charts/"/>
      <url>/blog//Web/angular-charts/</url>
      
        <content type="html"><![CDATA[<br><img src="/blog/Web/angular-charts/BG.png" class=""><p>Chart.js is a popular JavaScript charting library and ng2-charts is a wrapper for Angular 2+ that makes it easy to integrate Chart.js in Angular. Let’s go over the basic usage.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Install ng2-charts using npm: <code>npm install --save ng2-charts</code></li><li>Install Chart.js library: <code>npm install --save chart.js</code></li><li><em>[Options]</em> Then, if you’re using the <strong>Angular CLI</strong>, you can simply add Chart.js to the list of scripts in your <code>.angular-cli.json</code> file so that it gets bundled with the app:</li></ol><p><strong><em>angular-cli.json</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: [</span><br><span class="line">  &quot;../node_modules/chart.js/dist/Chart.min.js&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Now you’ll want to import ng2-chart’s <code>ChartsModule</code> into your app module or a feature module:</p><p><strong><em>app.module.ts</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; ChartsModule &#125; from &apos;ng2-charts&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    ChartsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>ng2-charts gives us a <code>baseChart</code> directive that can be applied on an HTML <code>canvas</code> element. Here’s an example showing-off some of the options to pass-in as inputs and the <code>chartClick</code> event that’s outputted by the directive:</p><p><strong><em>app.component.html</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width: 40%;&quot;&gt;</span><br><span class="line">  &lt;canvas</span><br><span class="line">      baseChart</span><br><span class="line">      [chartType]=&quot;&apos;line&apos;&quot;</span><br><span class="line">      [datasets]=&quot;chartData&quot;</span><br><span class="line">      [labels]=&quot;chartLabels&quot;</span><br><span class="line">      [options]=&quot;chartOptions&quot;</span><br><span class="line">      [legend]=&quot;true&quot;</span><br><span class="line">      (chartClick)=&quot;onChartClick($event)&quot;&gt;</span><br><span class="line">  &lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>And here’s what it can look like in our component class:</p><p><strong><em>app.component.ts</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123; ... &#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  chartOptions = &#123;</span><br><span class="line">    responsive: true</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  chartData = [</span><br><span class="line">    &#123; data: [330, 600, 260, 700], label: &apos;Account A&apos; &#125;,</span><br><span class="line">    &#123; data: [120, 455, 100, 340], label: &apos;Account B&apos; &#125;,</span><br><span class="line">    &#123; data: [45, 67, 800, 500], label: &apos;Account C&apos; &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  chartLabels = [&apos;January&apos;, &apos;February&apos;, &apos;Mars&apos;, &apos;April&apos;];</span><br><span class="line"></span><br><span class="line">  onChartClick(event) &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="chart_1.png" alt="Chart 1: Basic Line Chart"></p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Here’s a quick breakdown of the different input options</p><ul><li>chartType: This sets the base type of the chart. The value can be <code>pie</code>, <code>doughnut</code>, <code>bar</code>, <code>line</code>, <code>polarArea</code>, <code>radar</code> or <code>horizontalBar</code>.</li><li>legend: A boolean for whether or not a legend should be displayed above the chart.</li><li>datasets: This should be an array of objects that contain a data array and a label for each data set.</li><li>data: If your chart is simple and has only one data set, you can use <code>data</code> instead of <code>datasets</code> and pass-in an array of data points.</li><li>labels: An array of labels for the X-axis.</li><li>options: An object that contains options for the chart. You can refer to the official <a href="https://www.chartjs.org/docs/latest/configuration/" target="_blank" rel="noopener"><code>Chart.js documentation</code></a> for details on the available options.</li></ul><p>In the above example we set the chart to be responsive and adapt depending on the viewport size.</p><ul><li>colors: Not shown in the above example, but you can define your own colors with the <code>colors</code> input. Pass-in an array of object literals that contain the following value:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">myColors = [</span><br><span class="line">  &#123;</span><br><span class="line">    backgroundColor: &apos;rgba(103, 58, 183, .1)&apos;,</span><br><span class="line">    borderColor: &apos;rgb(103, 58, 183)&apos;,</span><br><span class="line">    pointBackgroundColor: &apos;rgb(103, 58, 183)&apos;,</span><br><span class="line">    pointBorderColor: &apos;#fff&apos;,</span><br><span class="line">    pointHoverBackgroundColor: &apos;#fff&apos;,</span><br><span class="line">    pointHoverBorderColor: &apos;rgba(103, 58, 183, .8)&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  ... other colors</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>Two events are emitted, <code>chartClick</code> and <code>chartHover</code>, and they allow to react to the user interacting with the chart. The currently active points and labels are returned as part of the emitted event’s data.</p><ul><li>chartClick: fires when click on a chart has occurred, returns information regarding active points and labels</li><li>chartHover: fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels</li><li>Updating Datasets Dynamically: Of course, the beauty of Chart.js is that your charts can easily by dynamic and update/respond to data received from a backend or from user input.</li></ul><p>In the bellow example we add a new data points for the month of May:</p><p><strong><em>app.component.ts</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">newDataPoint(dataArr = [100, 100, 100], label) &#123;</span><br><span class="line"></span><br><span class="line">  this.chartData.forEach((dataset, index) =&gt; &#123;</span><br><span class="line">    this.chartData[index] = Object.assign(&#123;&#125;, this.chartData[index], &#123;</span><br><span class="line">      data: [...this.chartData[index].data, dataArr[index]]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  this.chartLabels = [...this.chartLabels, label];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And it can be used like this:</p><p><strong><em>app.component.html</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=&quot;newDataPoint([900, 50, 300], &apos;May&apos;)&quot;&gt;</span><br><span class="line">  Add data point</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><h2 id="Schematics"><a href="#Schematics" class="headerlink" title="Schematics"></a>Schematics</h2><p>There are schematics that may be used to generate chart components using Angular CLI. The components are defined in package ng2-charts-schematics.</p><p>Installation of Schematics Package<br><code>npm instal --save-dev ng2-charts-schematics</code></p><p>Example of Generating a Line Chart using Angular CLI<br><code>ng generate ng20chart0schematics:line my-line-chart</code></p><p>This calls angular’s component schematics and then modifies the result, so all the options for the component schematic are also usable here. This schematics will also add the ChartsModule as an imported module in the main app module (or another module as specified in the –module command switch).</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Line Chart </tag>
            
            <tag> Javascript </tag>
            
            <tag> Data Visualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paytm Gateway Integration</title>
      <link href="/blog//Ruby-on-Rails/paytm-gateway-integration/"/>
      <url>/blog//Ruby-on-Rails/paytm-gateway-integration/</url>
      
        <content type="html"><![CDATA[<p>A complete guide on adding payments to your Android app with backend as RoR</p><img src="/blog/Ruby-on-Rails/paytm-gateway-integration/img_flow_android_ios_sdk.png" class=""><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps :-"></a>Steps :-</h2><ol><li>Install SDK</li><li>Add Static SMS Permission (for SMS autoread)</li><li>Add Runtime SMS Permission (for SMS autoread)</li><li>Add Proguard Rules</li><li>Get Order Checksum from Server (our Server)</li><li>Generate and send Checksum (from Our Server)</li><li>Start Payment Transaction</li><li>Send Payment Response to Server</li><li>Confirm with Paytm Gateway about payment status</li><li>Update Order Status</li><li>Show Order Status on App<br>&nbsp;<br>&nbsp;</li></ol><h3 id="Step-1-Install-SDK"><a href="#Step-1-Install-SDK" class="headerlink" title="Step 1: Install SDK"></a>Step 1: Install SDK</h3><p>Add the following dependency to your <strong>app level</strong> <code>build.gradle</code>.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Paytm SDK</span></span><br><span class="line"> implementation(<span class="string">'com.paytm:pgplussdk:1.4.4'</span>) &#123;</span><br><span class="line">  transitive = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2-Add-Static-SMS-Permission-for-SMS-autoread"><a href="#Step-2-Add-Static-SMS-Permission-for-SMS-autoread" class="headerlink" title="Step 2: Add Static SMS Permission (for SMS autoread)"></a>Step 2: Add Static SMS Permission (for SMS autoread)</h3><p>Add the following permissions to your <code>AndroidManifest.xml</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">”android.permission.READ_SMS”/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">”android.permission.RECEIVE_SMS”/</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Step-3-Add-Runtime-SMS-Permission-for-SMS-autoread"><a href="#Step-3-Add-Runtime-SMS-Permission-for-SMS-autoread" class="headerlink" title="Step 3: Add Runtime SMS Permission (for SMS autoread)"></a>Step 3: Add Runtime SMS Permission (for SMS autoread)</h3><p>We used <a href="https://github.com/Karumi/Dexter" target="_blank" rel="noopener">Dexter</a> library for handling runtime permissions. To install that add the following dependency to your <strong>app level</strong> <code>build.gradle</code>.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Dexter runtime permissions</span></span><br><span class="line"> implementation <span class="string">'com.karumi:dexter:4.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add the following code before starting your transaction process.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Dexter.withActivity(<span class="keyword">this</span>)</span><br><span class="line">      .withPermissions(</span><br><span class="line">       android.Manifest.permission.READ_SMS”,</span><br><span class="line">       android.Manifest.permission.RECEIVE_SMS”</span><br><span class="line">      )</span><br><span class="line">      .withListener(<span class="keyword">object</span> : MultiplePermissionsListener &#123;</span><br><span class="line">       <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPermissionsChecked</span><span class="params">(report: <span class="type">MultiplePermissionsReport</span>?)</span></span> &#123;</span><br><span class="line">        report?.let &#123;</span><br><span class="line">         <span class="keyword">if</span> (it.areAllPermissionsGranted()) &#123;</span><br><span class="line">          beginPaytmTransaction()</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          showMessage(<span class="string">"Permission Denied"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPermissionRationaleShouldBeShown</span><span class="params">(permissions: <span class="type">MutableList</span>&lt;<span class="type">PermissionRequest</span>&gt;?, token: <span class="type">PermissionToken</span>?)</span></span> &#123;</span><br><span class="line">        token?.continuePermissionRequest()</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .withErrorListener &#123;</span><br><span class="line">       showMessage(<span class="string">"Error occurred! <span class="variable">$it</span>"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      .onSameThread()</span><br><span class="line">      .check()</span><br></pre></td></tr></table></figure><h3 id="Step-4-Add-Proguard-Rules"><a href="#Step-4-Add-Proguard-Rules" class="headerlink" title="Step 4: Add Proguard Rules"></a>Step 4: Add Proguard Rules</h3><p>Add the following rules to your <code>proguard-rules.pro</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class com.paytm.pgsdk.paytmWebView$PaytmJavaScriptInterface &#123;</span><br><span class="line"> public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-5-Get-Order-Checksum-from-Server-our-Server"><a href="#Step-5-Get-Order-Checksum-from-Server-our-Server" class="headerlink" title="Step 5: Get Order Checksum from Server (our Server)"></a>Step 5: Get Order Checksum from Server (our Server)</h3><p>Make an API call to your server to get the order checksum</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OurService</span> </span>&#123;</span><br><span class="line"> <span class="meta">@GET(<span class="meta-string">"/subscriptions/new"</span>)</span></span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">newSubscription</span><span class="params">()</span></span>: NewSubscriptionResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> ourService: OurService) &#123;</span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">createNewSubscription</span><span class="params">()</span></span>: NewSubscriptionResponse = ourService.newSubscription()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityState</span></span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> _paytmState: MutableLiveData&lt;ActivityState&gt; = MutableLiveData(InitialState)</span><br><span class="line"> <span class="keyword">val</span> paytmState: LiveData&lt;ActivityState&gt; = _paytmState</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">createNewSubscription</span><span class="params">()</span></span> &#123;</span><br><span class="line">  viewModelScope.launch &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    _paytmState.value = ProgressState</span><br><span class="line">    _paytmState.value = PaytmChecksumState(userRepository.createNewSubscription())</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: HttpException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">object</span> ProgressState : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PaytmChecksumState</span></span>(<span class="keyword">val</span> checksumResponse: NewSubscriptionResponse) : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span></span>(<span class="keyword">val</span> exception: Exception) : ActivityState()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> profileViewModel: ProfileViewModel <span class="keyword">by</span> viewModel()</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">beginPaytmTransaction</span><span class="params">()</span></span> &#123;</span><br><span class="line">  profileViewModel.createNewSubscription()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-6-Generate-and-send-Checksum-from-Our-Server"><a href="#Step-6-Generate-and-send-Checksum-from-Our-Server" class="headerlink" title="Step 6: Generate and send Checksum (from Our Server)"></a>Step 6: Generate and send Checksum (from Our Server)</h3><p>To your project directory add a package named <strong>paytm</strong>.</p><p>Add <code>checksum_tool.rb</code> and <code>encryption_new_pg.rb</code> to the <strong>paytm</strong> package from <a href="https://github.com/Paytm-Payments/Paytm_App_Checksum_Kit_Ruby/tree/master/paytm" target="_blank" rel="noopener">Paytm_App_Checksum_Kit_Ruby</a></p><p>We will be creating order for a PaymentRequest and we follow model heavy approach for business logic. So we added a static method to generate checksum for our order in PaymentRequest model itself.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequest</span> &lt; ApplicationRecord</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create_checksum</span><span class="params">(user, order_id)</span></span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'./paytm/encryption_new_pg.rb'</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'./paytm/checksum_tool.rb'</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'uri'</span></span><br><span class="line"></span><br><span class="line">  paytm_hash = Hash.new</span><br><span class="line"></span><br><span class="line">  is_staging = <span class="string">'true'</span> == ENV[<span class="string">'PAYTM_STAGING'</span>]</span><br><span class="line">  merchant_id = is_staging ? ENV[<span class="string">'STAGING_PAYTM_MERCHANT_ID'</span>] : ENV[<span class="string">'PAYTM_MERCHANT_ID'</span>]</span><br><span class="line">  industry_type = is_staging ? ENV[<span class="string">'STAGING_PAYTM_INDUSTRY_TYPE'</span>] : ENV[<span class="string">'PAYTM_INDUSTRY_TYPE'</span>]</span><br><span class="line">  paytm_website = is_staging ? ENV[<span class="string">'STAGING_PAYTM_WEBSITE'</span>] : ENV[<span class="string">'PAYTM_WEBSITE'</span>]</span><br><span class="line">  paytm_callback = is_staging ? ENV[<span class="string">'STAGING_PAYTM_CALLBACK'</span>] : ENV[<span class="string">'PAYTM_CALLBACK'</span>]</span><br><span class="line"></span><br><span class="line">  paytm_hash[<span class="string">"REQUEST_TYPE"</span>] = <span class="string">'DEFAULT'</span></span><br><span class="line">  paytm_hash[<span class="string">"MID"</span>] = merchant_id <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"ORDER_ID"</span>] = order_id; <span class="comment">#unique OrderId for every request\</span></span><br><span class="line">  paytm_hash[<span class="string">"CUST_ID"</span>] = user.id.to_s <span class="comment">#unique customer identifier</span></span><br><span class="line">  paytm_hash[<span class="string">"INDUSTRY_TYPE_ID"</span>] = industry_type <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"CHANNEL_ID"</span>] = <span class="string">'WAP'</span>; <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"TXN_AMOUNT"</span>] = <span class="string">'1'</span>; <span class="comment">#transaction amount</span></span><br><span class="line">  paytm_hash[<span class="string">"WEBSITE"</span>] = paytm_website <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"EMAIL"</span>] = user.email; <span class="comment">#customer email id</span></span><br><span class="line">  <span class="keyword">if</span> user.phone_number.present?</span><br><span class="line">   paytm_hash[<span class="string">"MOBILE_NO"</span>] = user.phone_number; <span class="comment">#customer 10 digit mobile no.</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  paytm_hash[<span class="string">"CALLBACK_URL"</span>] = paytm_callback + <span class="string">"<span class="subst">#&#123;order_id&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">  checksum_hash = ChecksumTool.new.get_checksum_hash(paytm_hash).gsub(<span class="string">"\n"</span>, <span class="string">''</span>)</span><br><span class="line">  paytm_hash[<span class="string">"CHECKSUMHASH"</span>] = checksum_hash</span><br><span class="line">  paytm_hash</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>First create a subscription for current user, then create a payment request for that subscription and create checksum treating that payment request as your Order.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionsController</span> &lt; ApplicationController</span></span><br><span class="line"> before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">  user = current_user</span><br><span class="line">  subscription = user.subscriptions.create!</span><br><span class="line">  payment_request = subscription.payment_requests.create!</span><br><span class="line"></span><br><span class="line">  checksum = PaymentRequest.create_checksum(user, payment_request.id)</span><br><span class="line">  render <span class="symbol">json:</span> &#123; <span class="symbol">paytm_params:</span> checksum, <span class="symbol">is_staging:</span> <span class="string">'true'</span> == ENV[<span class="string">'PAYTM_STAGING'</span>]&#125;, <span class="symbol">status:</span> <span class="symbol">:ok</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Step-7-Start-Payment-Transaction"><a href="#Step-7-Start-Payment-Transaction" class="headerlink" title="Step 7: Start Payment Transaction"></a>Step 7: Start Payment Transaction</h3><p>With checksum response from server, initiate the paytm purchase.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initiatePaytmPurchase</span><span class="params">(checksumResponse: <span class="type">NewSubscriptionResponse</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> order = PaytmOrder(checksumResponse.paytmParams)</span><br><span class="line">  <span class="keyword">val</span> service = <span class="keyword">if</span> (checksumResponse.isStaging)</span><br><span class="line">     PaytmPGService.getStagingService(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     PaytmPGService.getProductionService()</span><br><span class="line">  </span><br><span class="line">  service.initialize(order, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  service.startPaymentTransaction(context, <span class="literal">true</span>, <span class="literal">true</span>, <span class="keyword">object</span> : PaytmPaymentTransactionCallback &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransactionResponse</span><span class="params">(inResponse: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clientAuthenticationFailed</span><span class="params">(inErrorMessage: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">someUIErrorOccurred</span><span class="params">(inErrorMessage: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransactionCancel</span><span class="params">(inErrorMessage: <span class="type">String</span>?, inResponse: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">networkNotAvailable</span><span class="params">()</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onErrorLoadingWebPage</span><span class="params">(iniErrorCode: <span class="type">Int</span>, inErrorMessage: <span class="type">String</span>?, inFailingUrl: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressedCancelTransaction</span><span class="params">()</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="merchant_pg_android.gif" alt="Demo of Paytm checkout flow in app"></p><h3 id="Step-8-Send-Payment-Response-to-Server"><a href="#Step-8-Send-Payment-Response-to-Server" class="headerlink" title="Step 8: Send Payment Response to Server"></a>Step 8: Send Payment Response to Server</h3><p>On Transaction response from paytm payments Activity, send the response to your server to update payment status.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OurService</span> </span>&#123;</span><br><span class="line"> <span class="meta">@POST(<span class="meta-string">"/payment_requests/&#123;requestId&#125;/update_status"</span>)</span></span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">updatePaymentStatus</span><span class="params">(<span class="meta">@Path(value = <span class="meta-string">"requestId"</span>)</span> requestId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@Body</span> transactionResponse: <span class="type">JsonObject</span>)</span></span>: UpdatePaymentResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> ourService: OurService) &#123;</span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">updatePaymentResponse</span><span class="params">(requestId: <span class="type">Int</span>, transactionResponse: <span class="type">JsonObject</span>)</span></span>: UpdatePaymentResponse = ourService.updatePaymentStatus(requestId, transactionResponse)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityState</span></span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> _paytmState: MutableLiveData&lt;ActivityState&gt; = MutableLiveData(InitialState)</span><br><span class="line"> <span class="keyword">val</span> paytmState: LiveData&lt;ActivityState&gt; = _paytmState</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">updatePaymentStatus</span><span class="params">(requestId: <span class="type">Int</span>, transactionResponse: <span class="type">JsonObject</span>)</span></span> &#123;</span><br><span class="line">  viewModelScope.launch &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    _paytmState.value = ProgressState</span><br><span class="line">    <span class="keyword">val</span> response = userRepository.updatePaymentResponse(requestId, transactionResponse)</span><br><span class="line">    _paytmState.value = PaytmStatusState(response)</span><br><span class="line">    _paytmState.value = PaytmIdleState</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: HttpException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">object</span> ProgressState : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PaytmStatusState</span></span>(<span class="keyword">val</span> updatePaymentResponse: UpdatePaymentResponse) : ActivityState()</span><br><span class="line"> <span class="keyword">object</span> PaytmIdleState : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span></span>(<span class="keyword">val</span> exception: Exception) : ActivityState()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransactionResponse</span><span class="params">(inResponse: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> orderId = inResponse?.getString(<span class="string">"ORDERID"</span>)</span><br><span class="line">  orderId?.let &#123;</span><br><span class="line">   <span class="keyword">val</span> responseJson = JsonObject()</span><br><span class="line">   inResponse.keySet()?.forEach &#123;</span><br><span class="line">    responseJson.addProperty(it, inResponse.getString(it))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">val</span> responseJsonWrapper = JsonObject()</span><br><span class="line">   responseJsonWrapper.add(<span class="string">"gateway_response"</span>, responseJson)</span><br><span class="line"></span><br><span class="line">   profileViewModel.updatePaymentStatus(Integer.parseInt(orderId), responseJsonWrapper)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-9-Confirm-with-Paytm-Gateway-about-payment-status"><a href="#Step-9-Confirm-with-Paytm-Gateway-about-payment-status" class="headerlink" title="Step 9: Confirm with Paytm Gateway about payment status"></a>Step 9: Confirm with Paytm Gateway about payment status</h3><p>Confirm with Paytm gateway using <a href="https://developer.paytm.com/docs/transaction-status-api/" target="_blank" rel="noopener">Transaction Status API</a>.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequest</span> &lt; ApplicationRecord</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">confirm_with_gateway</span><span class="params">(user)</span></span></span><br><span class="line">  is_staging = <span class="string">'true'</span> == ENV[<span class="string">'PAYTM_STAGING'</span>]</span><br><span class="line">  status_api_url = is_staging ? ENV[<span class="string">'STAGING_PAYTM_STATUS'</span>] : ENV[<span class="string">'PAYTM_STATUS'</span>]</span><br><span class="line">  merchant_id = is_staging ? ENV[<span class="string">'STAGING_PAYTM_MERCHANT_ID'</span>] : ENV[<span class="string">'PAYTM_MERCHANT_ID'</span>]</span><br><span class="line">  order_id = <span class="keyword">self</span>.id</span><br><span class="line"></span><br><span class="line">  response = HTTParty.post(status_api_url,</span><br><span class="line">                           <span class="symbol">body:</span> &#123;</span><br><span class="line">                                  <span class="symbol">MID:</span> merchant_id,</span><br><span class="line">                                  <span class="symbol">ORDERID:</span> order_id,</span><br><span class="line">                                  <span class="symbol">CHECKSUMHASH:</span> PaymentRequest.create_checksum(user, order_id)[<span class="string">"CHECKSUMHASH"</span>]</span><br><span class="line">                                 &#125;.to_json,</span><br><span class="line">                           <span class="symbol">multipart:</span> <span class="literal">false</span>,</span><br><span class="line">                           <span class="symbol">headers:</span> &#123;</span><br><span class="line">                                     <span class="string">'Content-Type'</span> =&gt; <span class="string">'application/json'</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                           <span class="symbol">timeout:</span> <span class="number">10000</span>)</span><br><span class="line">  update_status(response) <span class="comment"># We will learn about this in next step</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>After confirming with gateway, send back the response to App.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequestsController</span> &lt; ApplicationController</span></span><br><span class="line"> before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">update_status</span></span></span><br><span class="line">  payment_request = PaymentRequest.find(params[<span class="symbol">:id</span>])</span><br><span class="line">  payment_request.initiate! <span class="comment">#We are using aasm gem for this https://github.com/aasm/aasm</span></span><br><span class="line">  payment_request.confirm_with_gateway(current_user)</span><br><span class="line">  payment_request.reload</span><br><span class="line"></span><br><span class="line">  render <span class="symbol">json:</span> &#123;</span><br><span class="line">                <span class="symbol">message:</span> get_status_message(payment_request),</span><br><span class="line">                <span class="symbol">status:</span> payment_request.aasm_state</span><br><span class="line">               &#125;,</span><br><span class="line">         <span class="symbol">status:</span> <span class="symbol">:ok</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_status_message</span><span class="params">(payment_request)</span></span></span><br><span class="line">  <span class="keyword">case</span> payment_request.aasm_state</span><br><span class="line">  <span class="keyword">when</span> <span class="symbol">:gateway_confirmation_pending</span></span><br><span class="line">   <span class="string">'Payment is still under process, please wait until the status of transaction is updated'</span></span><br><span class="line">  <span class="keyword">when</span> <span class="symbol">:success</span></span><br><span class="line">   <span class="string">'Payment was successful'</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="string">'Payment has failed'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Step-10-Update-Order-Status"><a href="#Step-10-Update-Order-Status" class="headerlink" title="Step 10: Update Order Status"></a>Step 10: Update Order Status</h3><p>Based on response codes, update the payment status of order. Response codes and statuses can be found <a href="https://developer.paytm.com/docs/transaction-status-api/" target="_blank" rel="noopener">Transaction Status API’s Response codes and Messages section</a> and <a href="https://developer.paytm.com/assets/Transaction%20response%20codes%20and%20messages.pdf" target="_blank" rel="noopener">Transaction response codes and messages</a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequest</span> &lt; ApplicationRecord</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> private</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">update_status</span><span class="params">(response)</span></span></span><br><span class="line">  response = response.symbolize_keys</span><br><span class="line">  response_code = response[<span class="symbol">:RESPCODE</span>]</span><br><span class="line">  <span class="keyword">if</span> response_code == <span class="string">"01"</span></span><br><span class="line">   <span class="keyword">self</span>.update(<span class="symbol">transaction_reference:</span> response[<span class="symbol">:TXNID</span>], <span class="symbol">metadata:</span> response)</span><br><span class="line">   <span class="keyword">self</span>.mark_as_succeed!</span><br><span class="line">  <span class="keyword">elsif</span> response_code == <span class="string">"400"</span> <span class="params">||</span> response_code == <span class="string">"402"</span></span><br><span class="line">  <span class="keyword">elsif</span> response_code == <span class="string">"294"</span></span><br><span class="line">   <span class="keyword">self</span>.mark_as_expired!</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="keyword">self</span>.update(<span class="symbol">transaction_reference:</span> response[<span class="symbol">:TXNID</span>], <span class="symbol">error_message:</span> response[<span class="symbol">:RESPMSG</span>], <span class="symbol">metadata:</span> response)</span><br><span class="line">   <span class="keyword">self</span>.mark_as_failed!</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Step-11-Show-Order-Status-on-App"><a href="#Step-11-Show-Order-Status-on-App" class="headerlink" title="Step 11: Show Order Status on App"></a>Step 11: Show Order Status on App</h3><p>Based on server response, show messages on UI.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> paytmStateObserver: Observer&lt;ActivityState&gt; = Observer &#123;</span><br><span class="line">  <span class="keyword">when</span> (it) &#123;</span><br><span class="line">   <span class="keyword">is</span> ProfileViewModel.PaytmStatusState -&gt; &#123;</span><br><span class="line">    <span class="keyword">when</span> (it.updatePaymentResponse.status) &#123;</span><br><span class="line">     <span class="string">"success"</span> -&gt; &#123;</span><br><span class="line">                   Snackbar.make(progressBar, <span class="string">"Payment success"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                  &#125;</span><br><span class="line">     <span class="string">"failed"</span> -&gt; &#123;</span><br><span class="line">                  Snackbar.make(progressBar, <span class="string">"Payment failed. <span class="subst">$&#123;it.updatePaymentResponse.message&#125;</span>"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                 &#125;</span><br><span class="line">     <span class="string">"expired"</span> -&gt; &#123;</span><br><span class="line">                   Snackbar.make(progressBar, <span class="string">"Payment expired. Please try again"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                  &#125;</span><br><span class="line">     <span class="string">"gateway_confirmation_pending"</span> -&gt; &#123;</span><br><span class="line">                                        Snackbar.make(progressBar, <span class="string">"Payment pending. <span class="subst">$&#123;it.updatePaymentResponse.message&#125;</span>"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                                       &#125;</span><br><span class="line">     <span class="keyword">else</span> -&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://developer.paytm.com/docs/v1/android-sdk/" target="_blank" rel="noopener">Add payments to your Android app with Paytm SDK</a></li><li><a href="https://github.com/Paytm-Payments/Paytm_App_Checksum_Kit_Ruby" target="_blank" rel="noopener">Paytm_App_Checksum_Kit_Ruby</a></li><li><a href="https://medium.com/the-zalonin/android-payment-gateway-integration-guide-paytm-fa2ee01286e" target="_blank" rel="noopener">Android Payment Gateway Integration Guide: PAYTM</a></li><li><a href="https://developer.paytm.com/docs/transaction-status-api/" target="_blank" rel="noopener">Transaction Status API</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/">Generating Pdf in Ruby on Rails using Prawn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Ruby on Rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> Ashish Jajoria </tag>
            
            <tag> backend </tag>
            
            <tag> rails </tag>
            
            <tag> ror </tag>
            
            <tag> paytm </tag>
            
            <tag> gateway </tag>
            
            <tag> payment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make a web application for any AI model</title>
      <link href="/blog//AI/How-to-make-a-web-application-for-any-AI-model/"/>
      <url>/blog//AI/How-to-make-a-web-application-for-any-AI-model/</url>
      
        <content type="html"><![CDATA[<p>Yes! you read the title right. So, today in this post I’ll show you how to setup a basic image-classifier in the form of a web application.</p><h2 id="Basic-requirements"><a href="#Basic-requirements" class="headerlink" title="Basic requirements"></a>Basic requirements</h2><p>Before we getting dive more into it, I am listing down the basic ingredients which are required to make a web application in python.</p><ul><li><p>Flask</p></li><li><p>Flask Bootstrap</p></li></ul><p>Please note that, I am not showing about how to create an AI classifier model, so make sure you have your classifier already before seeking into this post, if not then you can download a pre-trained model.</p><p>Let’s get started !</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>You need to have installed the above mentioned libraries. You can easily install them by using <strong>pip</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install flask-bootstrap</span><br></pre></td></tr></table></figure><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>So, firstly we arrange our files and folders in the below shown order.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*UcQSsTBtUdYL4x-HffjTNg.png" alt="Figure 1: Showing basic folder structure for the project"></p><p>You can change the main folder name <em>image-classifier (In my case)</em> to any other name as you like.</p><p>So, firstly we will write a basic flask app structure in <code>__init__.py</code>. This file can be found inside the classifier. Inside the <code>__init__.py</code> file write the below code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_bootstrap import Bootstrap</span><br><span class="line">from classifier import routes</span><br><span class="line"></span><br><span class="line">app = Flask(__name__) ## defining our flask application</span><br><span class="line">Bootstrap(app) ## giving a nice bootstrap touch to our application</span><br></pre></td></tr></table></figure><p>Now, writing our run.py file. You can find this run.py file inside the main folder. Open the file and write the below code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from classifier import app as  application</span><br><span class="line">application.config.from_pyfile(&apos;config/config.py&apos;)  </span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    application.run(host=&apos;0.0.0.0&apos;, port=8000)  ## This tells our</span><br><span class="line">      ##application will run on this host and on this port.</span><br></pre></td></tr></table></figure><p>Now, we will create write a config.py file. This file contains the configuration for the application. The basic configuration we can put now is that, we can just put our application in DEBUG mode. So, open the config.py file and write the below line.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from os.path import join, dirname, realpath</span><br><span class="line"></span><br><span class="line">DEBUG = True</span><br><span class="line">## If True, then it refresh the server after making any changes to the code.</span><br><span class="line">UPLOAD_FOLDER = join(dirname(realpath(__file__)), &apos;uploaded_images/&apos;)</span><br></pre></td></tr></table></figure><p>Make a <strong>uploaded_images</strong> folder inside the config folder, this folder contains the image which will be uploaded on the server via user.</p><h2 id="Writing-a-basic-route-for-our-flask-app"><a href="#Writing-a-basic-route-for-our-flask-app" class="headerlink" title="Writing a basic route for our flask app"></a>Writing a basic route for our flask app</h2><p>We have completely setup our basic flask environment. Now, its time to write a very basic flask api for hello world. Open the routes.py inside the classifier folder. Add the below lines to it</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from classifier import app</span><br><span class="line">import flask</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/testing&apos;)</span><br><span class="line">def testing():</span><br><span class="line">    return &quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure><p>Here, the <strong>route()</strong> function of the Flask class is a decorator, which tells the application which URL should call the associated function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.route(rule, options)</span><br></pre></td></tr></table></figure><ul><li><p>The <strong>rule</strong> parameter represents URL binding with the function.</p></li><li><p>The <strong>options</strong> is a list of parameters to be forwarded to the underlying Rule object.</p></li></ul><p>and in the end we just returned a simple message using some HTML tags.</p><p>To run this code, follows below steps.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd path/to/main-folder</span><br><span class="line">python run.py</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*kJBAht4yhvPymR1dyV9Eow.png" alt="Figure 2: After running the above command you should see above like messages"></p><p>Just open the browser and type localhost:8000/testing. You should see a screen just like below</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*vLAQroEaj-4mJwLDFe4Tlg.png" alt="Figure 3: This is the route which we wrote for “/testing”"></p><h2 id="Lets-start-our-main-route"><a href="#Lets-start-our-main-route" class="headerlink" title="Lets start our main route"></a>Lets start our main route</h2><p>Lets make our template. For this, firstly makes a folder called <strong>template</strong> inside the <strong>classifier</strong> folder. Now inside the template, create a home.html file and paste the code from this <a href="https://raw.githubusercontent.com/hghimanshu/Blog/master/image-classifier/classifier/templates/home.html" target="_blank" rel="noopener">link</a> in it.</p><p>Now, we make our home url and our backend part !!. So we will rewrite our routes.py file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/home&apos;)</span><br><span class="line">def home():</span><br><span class="line">    return render_template(&apos;home.html&apos;)  ## The template which we created above</span><br></pre></td></tr></table></figure><p>Now, our image processing function will be like below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import render_template</span><br><span class="line">from werkzeug import secure_filename</span><br><span class="line">from classifier.backend.prediction import image_prediction</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/fetchingImage&quot;, methods = [&apos;POST&apos;])</span><br><span class="line">def fetchingImage():</span><br><span class="line">    if flask.request.method == &apos;POST&apos;</span><br><span class="line">        image = flask.request.files[&apos;image&apos;]</span><br><span class="line">        image.save(app.config[&apos;UPLOAD_FOLDER&apos;] + secure_filename(image.filename))</span><br><span class="line">        full_img = app.config[&apos;UPLOAD_FOLDER&apos;] + image.filename</span><br><span class="line">        data = image_prediction(full_img)</span><br><span class="line">        if len(data)==2:</span><br><span class="line">            return render_template(&apos;prediction.html&apos;, results = data)</span><br><span class="line">        else:</span><br><span class="line">            return render_template(&apos;error.html&apos;, results = data)</span><br></pre></td></tr></table></figure><p>Here, firstly we get the image from the form in the <strong>home.html</strong>, then save the image into the system and then fetch that file and send it to another function <em>image_prediction</em> for processing. Then, we simply render the response from the model to the webpage. If there is no error, then we display the <strong>prediction.html</strong> template or else, we render the <strong>error.html</strong>. Now, working on our <em>image_prediction</em> function.</p><p>For making the this, firstly create a folder named <strong>backend</strong> inside the <em>classifier</em> folder, then inside the <strong>backend</strong> folder, create a <strong>prediction.py</strong> file and write the below code into it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import keras</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import cv2</span><br><span class="line">from keras.models import load_model</span><br><span class="line">from keras.applications.vgg19 import VGG19</span><br><span class="line">from keras.applications.vgg19 import decode_predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def image_prediction(image):</span><br><span class="line">    MODEL = VGG19()</span><br><span class="line">    try:</span><br><span class="line">        image = cv2.imread(image)</span><br><span class="line">        image = cv2.resize(image, (224, 224))</span><br><span class="line">        image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))</span><br><span class="line">        yhat = MODEL.predict(image)</span><br><span class="line">        label = decode_predictions(yhat)</span><br><span class="line">        label = label[0][0]</span><br><span class="line">        label, conf = label[1], label[2]*100</span><br><span class="line">        results = [label, conf]</span><br><span class="line">    except Exception as e:</span><br><span class="line">        results = &quot;Please check the image.&quot;</span><br><span class="line">    return results</span><br></pre></td></tr></table></figure><p>Now, let’s make our <strong>error.html</strong> and <strong>prediction.html</strong> templates. These templates are also, saved inside the <em>templates</em> folder. So, you can get the code for both the templates from <a href="https://github.com/hghimanshu/Blog/tree/master/image-classifier/classifier/templates" target="_blank" rel="noopener">here</a>.</p><p>Well the coding part is mostly done, now we will test our web application. Now open your console and run the below command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python run.py</span><br></pre></td></tr></table></figure><p>After this, it will firstly download the VGG19 pretrained weights <em>(if you are following my code.)</em>, then it will start the server. Now, open the browser and go to <strong>localhost:8000/home</strong>, you will see something like this</p><p><img src="https://cdn-images-1.medium.com/max/2454/1*D8SVbfL_3Mdj_00zhNFSuQ.png" alt="Figure 4: Our classifier’s home page"></p><p>Now, click on browse to upload any image and click the <strong>predict</strong> button. You’ll see some message like this (based on your image)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*IH_y0QAKul0HqqtZxboYrA.png" alt="Figure 5: Our Image Classification result"></p><p>If there is any some issue with your image, then below screen will appear</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ZHXZWF3g6hnKU7cSvhknuA.png" alt="Figure 6: Error message"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So, this is how we can make a very basic web application for our image classifier. You can also find the whole code from my <a href="https://github.com/hghimanshu/Blog/tree/master/image-classifier" target="_blank" rel="noopener">github</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://www.tutorialspoint.com/flask/index.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/flask/index.htm</a></p></li><li><p><a href="https://www.w3schools.com/bootstrap/bootstrap_templates.asp" target="_blank" rel="noopener">https://www.w3schools.com/bootstrap/bootstrap_templates.asp</a></p></li><li><p><a href="https://pythonprogramming.net/flask-send-file-tutorial/" target="_blank" rel="noopener">https://pythonprogramming.net/flask-send-file-tutorial/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Image-Classification </tag>
            
            <tag> Keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Testing Strategy</title>
      <link href="/blog//Android/Android-Testing-Strategy/"/>
      <url>/blog//Android/Android-Testing-Strategy/</url>
      
        <content type="html"><![CDATA[<img src="/blog/Android/Android-Testing-Strategy/testing_strategy.jpeg" class="" title="Testing Strategy"><p>Testing android application is quite hard. There is no set guidelines for us to follow. When ever I started thinking of testing my application I always get confused where to start, should I write unit tests or instrumentation tests and should I start with integration and End to end tests. There is also a lot of confusion on frameworks available for android testing.<br>This article has been written in a sense to address this confusion and show us as developers what kind of testing is most preferred and what frameworks are available.</p><h2 id="Kinds-of-Tests"><a href="#Kinds-of-Tests" class="headerlink" title="Kinds of Tests"></a>Kinds of Tests</h2><h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>This is often referred to as local tests and  doesn’t require a device or emulator for running them. These can be classified broadly into categories</p><ul><li>Local/ Pure Unit tests - tests which can run on JVM, mainly written for testing business logic. On android JUnit, Mockito, the mockable Android JARs give us a nice combination of tools to run fast unit-style tests in the local JVM.</li><li>Android  Unit Tests -  tests which  requires the Android system (ART) and for this we need to replace android dependencies using Roboelectric<br>Guidelines</li><li>If you have dependencies on the Android framework, particularly those that create complex interactions with the framework, it’s better to include framework dependencies using Robolectric.</li><li>If your tests have minimal dependencies on the Android framework, or if the tests depend only on your own objects, it’s fine to include mock dependencies using a mocking framework like Mockito and PowerMock.</li></ul><p>Reference Url : <a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests" target="_blank" rel="noopener">https://developer.android.com/training/testing/unit-testing/local-unit-tests</a></p><h3 id="Instrumentation-Tests"><a href="#Instrumentation-Tests" class="headerlink" title="Instrumentation Tests"></a>Instrumentation Tests</h3><p>These tests requires device or an emulator for running. This is mostly used for UI testing but it can be used to test none UI logic as well.</p><ul><li><p>This is useful when you need to test code that has a dependency on context. </p></li><li><p>UI tests can be an essential component of any testing strategy since they can uncover issues related to UI, hardware, firmware, and backwards compatibility</p></li></ul><p>Reference Url: <a href="https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests" target="_blank" rel="noopener">https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests</a></p><h2 id="Testing-Frameworks"><a href="#Testing-Frameworks" class="headerlink" title="Testing Frameworks"></a>Testing Frameworks</h2><h3 id="Android-X-Test-Framework"><a href="#Android-X-Test-Framework" class="headerlink" title="Android X Test Framework"></a>Android X Test Framework</h3><p> It is testing framework and APIs provided  by android team for writing unit tests.</p><h3 id="Roboelectric"><a href="#Roboelectric" class="headerlink" title="Roboelectric"></a>Roboelectric</h3><p>It is a framework that brings fast and reliable unit tests to android. Runs inside JVM or your workstation in seconds. This is usually used to Integration testing. Integration tests validate how your code interacts with other parts of the system but without the added complexity of a UI framework.</p><p>app/src/test/java - for any unit test which can run on the JVM</p><p><strong>Question</strong> : How does it work?<br><strong>Answer</strong> : Unlike traditional emulators-based androids tests, it tests run inside a sandbox which allows the android environment to be precisely configured to the desired conditions for each test. It lets you run your tests on your workstation, or on your continuous integration environment in a regular JVM, without an emulator. It handles inflation of views, resource loading, and lots of other stuff that’s implemented in native C code on Android devices. This allows tests to do most things you could do on a real device. It’s easy to provide  our own implementation for specific SDK methods too, so you could simulate error conditions or real-world sensor behaviour. It allows a test style that is closer to black box testing, making the tests more effective for refactoring and allowing the tests to focus on the behaviour of the application instead of the implementation of Android</p><p><strong>Question</strong> : Why should be prefer this?<br><strong>Answer</strong> : In order for this to run tests it needs regular JVM,  Because of this, the dexing, packaging, and installing-on-the emulator steps aren’t necessary, reducing test cycles from minutes to seconds so you can iterate quickly and refactor your code with confidence. Robolectric executes your code against real (not mock) Android JARs in the local JVM.</p><h3 id="Espresso"><a href="#Espresso" class="headerlink" title="Espresso"></a>Espresso</h3><p> Use it to write concise, beautiful, and reliable Android UI tests. These tests are called Instrumentation tests and unlike unit tests takes more time to run them.</p><p>app/src/androidTest/java - for any instrumentation test which should run on an Android</p><p><strong>Question</strong> : How does it work?<br><strong>Answer</strong> : it requires an emulator or a real device to run tests. At the time of execution along with the main application, A testing application is also installed in the device which controls main application automatically.</p><h3 id="UI-Automator"><a href="#UI-Automator" class="headerlink" title="UI Automator"></a>UI Automator</h3><p>It allows us to write cross application functional tests ( End to End) . Example, Sharing messages via Text intent or sending email via locally installed email clients.</p><h3 id="Monkey-Runner-CL"><a href="#Monkey-Runner-CL" class="headerlink" title="Monkey Runner CL"></a>Monkey Runner CL</h3><p> Monkey is a command line tool which sends pseudo random events to your device. You can restrict Monkey to run only for a certain package and therefore instruct Monkey to test only your application. it can be used for Stress testing for android.</p><p>Reference Url : <a href="https://developer.android.com/studio/test/monkey" target="_blank" rel="noopener">https://developer.android.com/studio/test/monkey</a>            </p><h2 id="Recommandations"><a href="#Recommandations" class="headerlink" title="Recommandations"></a>Recommandations</h2><ul><li><p>Creating test groups - @SmallTest. @MediumTest and @LargeTest annotation allows us to classify tests. Allows you to run, for example, only short running tests for development cycle. You may run your long running tests on a continuous integration server.<br>This can be easily configured this via InstrumentationTestRunner in user build.gradle    (app)</p></li><li><p>We can use a three tiered approach</p><p><strong>Pure Unit tests :</strong>   These can be written for our business logic which are completely android independent of API and can run on JVM. These can be written using Junit Framework. Roboelectric Unit tests: where code has only small dependencies on android APIs and can be easily mocked with Roborelectric.</p><p><strong>Android Instrumentation tests :</strong> where code heavily interact with device hardware, sensors and android APIs. These tests will usually take most time to run.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Instrumentation Test </tag>
            
            <tag> Unit Test </tag>
            
            <tag> Android Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tracking Deep Learning experiments using Keras,MlFlow and MongoDB</title>
      <link href="/blog//AI/Tracking-Deep-Learning-Experiments-using-Keras-MlFlow-and-MongoDb/"/>
      <url>/blog//AI/Tracking-Deep-Learning-Experiments-using-Keras-MlFlow-and-MongoDb/</url>
      
        <content type="html"><![CDATA[<img src="/blog/AI/Tracking-Deep-Learning-Experiments-using-Keras-MlFlow-and-MongoDb/banner.jpeg" class="" title="Banner"><p>It is late 2019 and <strong><em>Deep Learning</em></strong> is not a buzzword anymore. It is significantly used in the technology industry to attain feats of wonders which traditional machine learning and logic based techniques would take a longer time to achieve.</p><p>The main ingredient in Deep Learning are <strong><em>Neural Networks</em></strong>, which are computation units called neurons, connected in a specific fashion to perform the task of learning and understanding data. When these networks become extremely deep and sophisticated, they are referred to as Deep Neural Networks and thus Deep Learning is performed.</p><p>Neural Networks are so called because they are speculated to be imitating the human brain in some manner. Though it is not entirely true, but the learning mechanism is mostly similar in nature.</p><p>A human brain learns about an object or concept when it visually experiences it for a longer amount of time. Similar to that, a neural network learns about objects and what they actually represent when it is fed with a large amount of data.</p><p>For example, let us consider the <strong><em>LeNet architecture</em></strong> . It is a small two layered CNN (Convolution Neural Network). Convolution Neural Networks are a special kind of neural network where the mathematical computation being done at every layer are convolution operations.</p><p>If enough images of a certain kind are fed to the <strong><em>LeNet</em></strong> architecture, it starts to understand and classify those images better.</p><p>That was a simple introduction to what neural networks are and how they behave.</p><p>In this article we will be mostly looking into three main frameworks which can ease out the developer experience of building these neural networks and tracking there performance efficiently.</p><p>Nowadays, neural networks are heavily used for classifying objects, predicting data and other similar tasks by many companies out there. When it comes it to training neural networks and keeping track of their performance, the experience is not too subtle.</p><p>When building a neural network, a developer would be trying out multiple datasets and experimenting with different hyperparameters. It is essential to keep a track a of these parameters and how they affect the output of the neural networks.</p><p>Also debugging neural networks is an extremely cumbersome task. The output performance of different neural networks may vary due to different reasons. Some of the possible causes maybe inadequate data pre-processing, incorrect optimizer, a learning rate which is too low or too high. The number of variables which affect the performance of a neural network are quite a few. Hence it is essential that every parameter is properly tracked and maintained.</p><p>Some of the available options present out there include the infamous <strong>*Tensorboard, Bokeh *</strong>to name a few.</p><p>In this project we will be using <strong>MlFlow</strong> ,an open source platform to manage the entire deep learning development cycle. <strong>MlFlow</strong> allows developers to log and track the outputs of every experiment performed with great precision. We will be looking into <strong>MlFlow’s</strong> components with more detail in the subsequent sections.</p><p>The framework we would be using for writing our neural networks and training them is <strong>Keras</strong>.</p><p>We will be using the <strong>FashionMNIST</strong> dataset. It contains a total of 70000 gray scale images (training:test = 60000:10000) , each scaled at 28x28 associated with one from 10 classes. (Fig 1)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*vIpkolZZ3jACO529n4QaJg.jpeg" alt="Fig 1: Fashion Mnist Dataset"></p><p>The folder structure of our project looks as shown in Fig 2 below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*NaIzdpiaiWAge7khYyRpmQ.png" alt="Fig 2: Project folder structure"></p><p>The data folder contains our <strong><em>fashion mnist</em></strong> dataset files which will be used for training the model. The db folder contains the python driver code to perform operations on <strong><em>MongoDb</em></strong> collections. <strong><em>MongoDB</em></strong> is an extremely easy to use <strong><em>NoSql</em></strong> database which has been built keeping in developer satisfaction. It is easily integrable with modern day applications and has a large developer community contributing to it’s extensions regularly. The model folder contains piece of code with the neural network model definition. The <strong><em>mlruns</em></strong> folder is created automatically once <strong>*mlflow *</strong>is invoked in the main code.</p><p><em>The aim of the project is to track multiple deep learning experiments and check how the outputs are affected when parameters are changed and data is changed.</em> Since we have only one dataset, we will split it into equal parts in order to simulate a multiple dataset scenario.</p><p>Let’s start off with the <strong><em>create_dataset</em></strong> script, which is used to split the fashion mnist into equal parts and store them inside the data folder with proper serial number.</p><p>In Fig 3 shown below, we import fashion mnist from <strong>*keras.datasets *</strong>and perform the necessary normalization step</p><p><img src="https://cdn-images-1.medium.com/max/2452/1*_GWdTw2PkJDBl5HW3-Yjbw.png" alt="Fig 3: Loading Fashion Mnist Dataset from the keras library"></p><p>Next, we write the methods to split the dataset into equal parts and save them with proper incremental serial numbers inside the data folder, inside the root project directory (Fig 4)</p><p><img src="https://cdn-images-1.medium.com/max/2060/1*NVW44h1BejUe25D0SwUYog.png" alt="Fig 4: The large dataset is equally split into 12 equal parts for training"> equal parts for training*</p><p>After this we go ahead and write the necessary driver code to manage our newly created dataset using <strong><em>MongoDb</em></strong>. Some might say that using <strong><em>MongoDb</em></strong> for such a small project might be an overkill, but personally I find <em>MongoDb</em> to be an excellent tool for managing data with flexibility. Given <strong><em>NoSql</em></strong>’s schema-less nature, managing collections and documents is a breeze.</p><p>The ease with which any document can be edited in <strong><em>MongoDB</em></strong> is superb. The best part is, whenever a collection is queried , the result returned is a <strong>*json *</strong>making it extremely easy to be parsed using any programming language. Aggregation queries in mongo are also very simple and allows users to cross reference collections in a swift manner.</p><p>In order to connect our python scripts with MongoDb we will be using <strong>pymongo</strong> which can be easily installed using the <strong><em>pip install pymongo</em></strong>. To install MongoDb, follow this tutorial <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noopener">***https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</a>***</p><p>Once MongoDb is installed and tested to be running properly on your system, create a new database called fashion_mnist. Inside the database create a new collection named dataset as shown in Fig 5 below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*o3BTUrrPN6AeIogC" alt="Fig 5: Collection named as Dataset created in MongoDb"></p><p>A great GUI to interact with <strong><em>MongoDb</em></strong> is <strong><em>robo3t</em></strong>. It’s free and easy to use. It can be downloaded from the following link <a href="https://robomongo.org/download" target="_blank" rel="noopener">***https://robomongo.org/download</a>.***Since our DB is setup and datasets are created, we can progress with the task of inserting necessary information into the dataset collection</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ZRvtaMxnM8cP1tyeHtvUDA.png" alt="Fig 6: MongoClient is configured in db_ops python script"></p><p>In Fig 6 shown above, we are importing <strong><em>MongoClient</em></strong> from the <strong><em>pymongo</em></strong> library which will essentially be used to connect to our <strong><em>mongoDB</em></strong> database.</p><p>Fig 7 below describes <strong><em>mongoQueue</em></strong> class which has been written in order to interact with our dataset collection. In line 18 and 19, the collection name is initialized, which is used in all the member functions. The <strong>Enqueue*</strong> <em>method in line 6 is used to insert dataset information into the dataset collection. The <strong>*Dequeue</strong> <em>method in line 10 fetches the first dataset which has a <em>status <em>field of ‘</em></em></em>Not** <strong>*Processed</strong>’</em>.* The <strong>setAsProcessing*</strong> and <strong><em>setAsProcessed</em></strong> *methods are used to set the status field of respective dataset documents in the collection.</p><p><img src="https://cdn-images-1.medium.com/max/3824/1*fI-pJh6D3dgLZJ5CfzNUow.png" alt="Fig 7: MongoQueue class for handling operations on the database"></p><p><img src="https://cdn-images-1.medium.com/max/4096/1*YKzl3umNaRPxJsbSK8Q1lg.png" alt="Fig 8: Methods to insert data into MongoDB"><em>Fig 8: Methods to insert data into MongoDB</em></p><p>We use the <strong><em>insert_into_db</em></strong> method shown in Fig 8, line 1, to insert information about our newly created datasets into our <strong>mongoDb</strong> dataset collection. In line 23 of the <em>main</em> function, we iterate over the dataset folder and call <strong>*insert_into_db</strong> *to insert the necessary information for that dataset into the collection. Once every dataset is successfully inserted into the collection, the fields appear as shown in Fig 9 below.</p><p><img src="https://cdn-images-1.medium.com/max/2452/0*qbkKHLQgdPkW-UNp" alt="Fig 9: Status of document in Dataset collection after data insertion"></p><p>We can now define our model for training our deep learning network. Inside <strong>*model/model.py</strong> <em>we import all necessary **</em>keras*** packages to build our CNN network (shown in Fig 10a)</p><p><img src="https://cdn-images-1.medium.com/max/2312/1*XnED-4kpiekoGLMgVMRESA.png" alt="Fig 10a: Importing all necessary keras packages"></p><p>Fig 10b shows the model architecture. It is a simple two layer CNN, with two <strong>MaxPool</strong> layers and <strong>RelU</strong> activation in between. Two <strong>Dense</strong> layers are also added with 32 and 10 neurons respectively. I have also added a <strong>Dropout</strong> of 0.5 before the last Dense layer.</p><p><img src="https://cdn-images-1.medium.com/max/4096/1*lmfvVEc3LxgxqeCGCCD-MQ.png" alt="Fig 10b: CNN model definintion"></p><p>Now, in our <strong><em>train.py</em></strong> script we import all the necessary modules needed from the <strong><em>keras</em></strong> library to get on with our training. Along with all the <strong><em>keras</em></strong> libraries we import <strong>*mlflow *</strong>as well (Fig 11)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*roE7f-YhPmBl5h9l1j_IMQ.png" alt="Fig 11: Importing packages in the main script"></p><p>All the hyperparameters which will be used for training is stored in a config file named as <strong><em>train_config.json</em></strong>. This file is read (Fig 12a) and used for defining training parameters</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*A1cPbWr1ggscrwGyKNo-kw.png" alt="Fig 12a: parameters required for training are loaded"></p><p>In Fig 12b, we have defined out training function , which takes arguments <strong>*trainX</strong> (<em>our training set) <em>,*</em>trainY** (*training set labels</em>) <em>and the **</em>model** *(CNN model)</p><p><img src="https://cdn-images-1.medium.com/max/3040/1*aq-dCVGk-s4nBAg6KLOxPg.png" alt="Fig 12b: Function to start training"></p><p>From line 38 (In Fig 13), the <strong>main</strong> function starts where we define our <strong>*MongoQueue</strong> <em>object using the **</em>MongoQueue** <em>class defined inside script mentioned before, **</em>db_ops.py <strong>. *As it can be seen in line 41, *</strong>mq*** is our object.</p><p><img src="https://cdn-images-1.medium.com/max/2396/1*jbtG75-OOC9yLrlAHJ-A2Q.png" alt="Fig 13: Main function which trains and also logs data using MlFlow"></p><p>In line 42 (Fig 13) , a new CNN model is created by calling the <strong>*model</strong> <em>function which accepts the optimizer type as input. In this experiment we would be using the ‘*</em>SGD<strong>’ (</strong>Stochastic Gradient Descent**) to train the network .</p><p>Everytime we invoke <strong><em>mlflow</em></strong> in our training code for logging, it is known as an <strong><em>mlflow</em></strong> run. <strong><em>MlFlow</em></strong> provides us with an API for starting and managing <strong><em>MlFlow</em></strong> runs. For example, Fig 14a and 14b</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*gBpvWcli4WNQxv5a" alt="Fig 14a: Mlflow example (importing and logging params)"></p><p><img src="https://cdn-images-1.medium.com/max/2000/0*-QzXE_uwytc_IEmQ" alt="Fig 14b: Context managers can be used to declare and Mlflow run"></p><p>In our code we start the <strong><em>mlflow</em></strong> run using the python <strong><em>context manager</em></strong> as shown in Fig 14b.</p><p>At line 46 in Fig 13, we define our our <strong><em>mlflow</em></strong> run with the run name as ‘<strong><em>fashion mnist</em></strong>’.* <em>All data and metrics will be logged under this run name on the **</em>mlflow*** dashboard.</p><p>From line 47 we start a while loop, which continuously invokes the <strong>*dequeue</strong> <em>function from the *</em>MongoQeueue** class. What this does is fetches every row corresponding to a particular dataset from the dataset collection which has a <strong>status field = *Not Processed</strong> <em>(Fig 9). As soon as this dataset is fetched, *</em>setAsProcessing<strong>* <em>function is called in line 51 which sets the status of that dataset to *Processing *in *</em>MongoDb</strong>. This enables us to understand which dataset is currently being trained by our system. This is particularly helpful is large systems where there are multiple datasets and many training instances running in parallel.</p><p>In lines 54 and 55, the datasets are loaded from the <strong>*data</strong> <em>folder corresponding to the **</em>dataset_id** *fetched from the db.</p><p><img src="https://cdn-images-1.medium.com/max/2004/1*5lWcOwjfGzwNATxdkJmmgA.png" alt="Fig 15: Loading Test data and evaluating on it"></p><p>Lines 57 and 58 loads the test sets and the training is started at line 59 by calling the *train *function. We then use the trained model to predict our scores as shown in line 60 in Fig 15.</p><p>The training output looks as shown below (Fig 16a and Fig 16b)</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*BCmu4INlyL7gPnxX" alt="Fig 16a: Model summary when starting to train"></p><p><img src="https://cdn-images-1.medium.com/max/2628/0*eRC8Zm0avYe38JlE" alt="Fig 16b : Outputs after first epoch"></p><p>As shown in Fig 16b, the training happens for an epoch and the evaluation metrics for the test dataset gets logged.</p><p>All outputs of the evaluation done using our trained model can be logged using the <strong><em>MlFlow</em></strong> tracking api (as shown in Fig 17). The <strong><em>tracking</em></strong> <strong><em>API</em></strong> comes with functions such as <strong><em>log_param</em></strong> and <strong><em>log_metric</em></strong> which enables us to log every hyperparameter and output values into <strong><em>mlflow</em></strong>.</p><p><img src="https://cdn-images-1.medium.com/max/2676/1*9IeXuffAu2mnwh21O35NUg.png" alt="Fig 17: Using Mlflow’s tracking API to log metrics and params"></p><p>The best feature about <strong><em>mlflow</em></strong> is the <strong><em>dashboard</em></strong> it provides. It has a very intuitive UI and can be used efficiently for tracking our experiments. The <strong><em>dashboard</em></strong> can be started easily by simply hitting <strong>*mlflow</strong> <strong>ui</strong> *in your terminal as shown in Fig 18 below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*vhmPMa30-Gqnw6CQ" alt="Fig 18 : Starting the mlflow ui from the command line"></p><p>To access the dashboard, just type <a href="http://localhost:5000/" target="_blank" rel="noopener">***http://localhost:5000</a>** *in your browser and hit enter.</p><p><img src="https://cdn-images-1.medium.com/max/3200/0*rHX5D660ryqeUf7B" alt="Fig 19: Mlflow dashboard view."></p><p>Fig 19 shows how the dashboard looks like. Each <strong><em>MlFlow</em></strong> run is logged using a <strong><em>run ID</em></strong> and a <strong><em>run name</em></strong>. The Parameters and the Metrics column log display the parameters and the metrics which were logged while we were training our model</p><p><img src="https://cdn-images-1.medium.com/max/2288/0*DMhMMtoc1_ULtloJ" alt="Fig 20: Individual run information"></p><p>Further clicking on a particular run, takes us to another page where we can display all information about our run (Fig 20)</p><p><img src="https://cdn-images-1.medium.com/max/3200/0*t5qk_JlbTdNG89sy" alt="Fig 21a: Visualizing the test accuracy plot in mlflow"></p><p><strong><em>MlFlow</em></strong> provides us with this amazing feature to generate plots for our results. As you can see in Fig 21a, the test accuracy change can be visualized across different training datasets and time. We can also choose to display other metrics such as the <strong><em>eval</em></strong> loss, as shown in Fig 21b. The smoothness of the curve can also be controlled using the slider.</p><p><img src="https://cdn-images-1.medium.com/max/3200/0*mPZ1nM4I0kAY2yUU" alt="Fig 21b: Visualizing the eval loss plot in mlflow"></p><p>We can also log important files or scripts in our project to MlFlow using the <strong><em>mlflow.log_artifact</em></strong> command . Fig 22a shows how to use it in your training script and Fig 22b shows how it is displayed on the mlflow dashboard.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*JV0scppcjBZy_isq7HJOpQ.png" alt="Fig 22a: Logging files as artifact on mlflow"></p><p><img src="https://cdn-images-1.medium.com/max/2682/0*iEQvDCKtnOFCidSS" alt="Fig 22b: model file and db_ops file logged as artifact on mlflow"></p><p>MlFlow also allows users to compare two runs simultaneously and generate plots for it. Just tick the check-boxes against the runs you want to compare and press on the blue <strong><em>Compare</em></strong> button (Fig 23)</p><p><img src="https://cdn-images-1.medium.com/max/2096/0*5It-A9LbYnVJh9KM" alt="Fig 23: Mlflow dashboard which lists all the mlflow runs sequentially"></p><p>Once you click on compare, another page pops up where all metrics and parameters of two different runs can be viewed and studied in parallel (Fig 24a)</p><p><img src="https://cdn-images-1.medium.com/max/2976/0*0sNCbZBb3U61SzlQ" alt="Fig 24a: Comparing multiple mlflow runs in parallel"></p><p>The user can also choose to display metrics such as accuracy and loss in parallel charts as shown in Fig 24b.</p><p><img src="https://cdn-images-1.medium.com/max/3200/0*NQKwq3wMobxCLImI" alt="FIg 24b: Comparing multiple mlflow runs using visual plots based on metrics"></p><p>Users can add an MlFlow Project file (a text file in <strong><em>YAML</em></strong> syntax) to their MlFlow project allowing them to package their code better and run and recreate results from any machine. The MlFlow Project file for our <strong><em>fashion_mnsit</em></strong> project looks as shown below in Fig 25a</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*JkMKeWYPlReYbuVn" alt="Fig 25a: MLfow project file containing entry points and also conda path"></p><p>We can also specify a <strong><em>conda</em></strong> environment for our <strong><em>MlFlow</em></strong> project and specify a <strong><em>conda.yaml</em></strong> file (Fig 25b).</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*Bb3n9hCnxU6hblOm" alt="Fig 25b: Conda file specifying packages and dependencies in the specific environment"></p><p>Hence, with this we conclude our project. Developers face several on-demand requirements for monitoring metrics during training a neural network. These metrics can be extremely critical for predicting the output of their neural networks and are also critical in understanding how to modify a neural network for better performance. Traditionally when starting off with deep learning experiments, many developers are unaware of proper tools to help them. I hope this was piece of writing was helpful in understanding how deep learning experiments can be conducted in a proper manner during production when large numbers of datasets are needed to be managed and multiple training and evaluation instances are required to be monitored.</p><p><strong><em>MlFlow</em></strong> also has multiple other features which is beyond the scope of this tutorial and can be covered later. For any information on how to use <strong><em>MlFlow</em></strong> one can head to the <a href="https://mlflow.org/" target="_blank" rel="noopener">***https://mlflow.org/</a>***</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> Mlflow </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Tracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sharing modules across Android apps</title>
      <link href="/blog//Android/sharing-modules-across-android-apps/"/>
      <url>/blog//Android/sharing-modules-across-android-apps/</url>
      
        <content type="html"><![CDATA[<h2 id="Sharing-modules-across-Android-apps"><a href="#Sharing-modules-across-Android-apps" class="headerlink" title="Sharing modules across Android apps"></a>Sharing modules across Android apps</h2><p>While most android apps are created with a single default <code>app</code> module, in the last few years people have started<br>moving to a multi module structure for their Android apps. Having multiple smaller modules have a few distinct<br>advantages</p><ul><li>Build times are noticeably faster</li><li>Your code is decoupled with clear dependencies</li><li>Better distribution of ownership across different parts of the app</li><li>Allows modules to be reused across apps</li></ul><h4 id="Example-modules"><a href="#Example-modules" class="headerlink" title="Example modules"></a>Example modules</h4><p>A possible strategy is to have one module per feature.</p><ul><li><code>app</code>: This is the main module which will be the entry point into your app. It acts mainly as a coordinator between<br>other modules</li><li><code>core</code>: This will contain the model definitions that are core to your app and will be required across modules</li><li><code>networking</code>: This provides the networking code for the other modules</li><li><code>login</code>: Login/Signup logic goes here</li><li><code>dashboard</code>: User dashboard will be here</li></ul><img src="/blog/Android/sharing-modules-across-android-apps/modules.jpg" class="" title="Modules"><p>There are many <a href="https://medium.com/google-developer-experts/modularizing-android-applications-9e2d18f244a0" target="_blank" rel="noopener">posts</a> on the advantages and strategies for modularizing your Android apps. For this post, we will<br>focus on the strategy to reuse modules across apps.</p><h4 id="Reusing-modules-across-apps"><a href="#Reusing-modules-across-apps" class="headerlink" title="Reusing modules across apps"></a>Reusing modules across apps</h4><p>We have multiple apps in our company that share the <code>core</code> and <code>login</code> logic. So we decided to share these modules among<br>the two applications.</p><p><img src="hierarchy.png" alt="hierarchy" title="Hierarchy"></p><p>One obvious way to share Android Library modules would be to share the generated <code>.aar</code> files and add them as<br>dependencies to the different apps. While this is simpler, the main applications and the library modules will be<br>different Android Studio projects. If any change needs to be done in the library, the <code>.aar</code> will have to be regenerated<br>and manually updated. There has to be a better way.</p><p>The solution we decided to use for sharing modules is <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" target="_blank" rel="noopener">git submodules</a>. Though it had a small overhead in bringing<br>the entire team up to speed with submodules, it has worked exceptionally well for us.</p><p>In the above example, we have two git submodules, core and login.</p><p><img src="submodules.png" alt="submodules" title="Submodules"></p><p>And the submodules will be added as dependencies just as any Android module,</p><p><img src="dependencies.png" alt="dependencies" title="Dependencies"></p><h4 id="Creating-a-new-submodules"><a href="#Creating-a-new-submodules" class="headerlink" title="Creating a new submodules"></a>Creating a new submodules</h4><p>To create a new submodule, we follow the following process</p><ul><li>Create an empty repo on Github and initialize with a README</li><li>Add a new submodule to our app <code>git submodule add git@github.com:username/core.git</code></li><li>Create a new Android Library module in the new directory</li><li>Commit the changes in the library module and push</li><li>Commit the changes in the main repo and push</li></ul><p>Next time we need to use this submodule in another app, we only need to</p><ul><li>Add a new submodule to our app <code>git submodule add git@github.com:username/core.git</code></li><li>Add the newly added module to <code>settings.gradle</code> and a dependency in <code>build.gradle</code></li></ul><h4 id="Committing-changes-to-a-submodule"><a href="#Committing-changes-to-a-submodule" class="headerlink" title="Committing changes to a submodule"></a>Committing changes to a submodule</h4><p>Every time we make some changes to a submodule, we just need to make sure that we commit and push those changes<br>before committing the changes in the main repo.</p><p>Submodule:</p><ul><li>If you are on a detached head, <code>git checkout -b new-branch</code></li><li><code>git add . &amp;&amp; git commit -am &quot;commit message&quot;</code></li><li><code>git push origin new-branch</code></li></ul><p>Main repo:</p><ul><li><code>git add . &amp;&amp; git commit -am &quot;commit message&quot;</code></li><li><code>git push</code></li></ul><h4 id="Fetching-remote-changes"><a href="#Fetching-remote-changes" class="headerlink" title="Fetching remote changes"></a>Fetching remote changes</h4><p>Every time we do a git pull, we just need to remember to update the submodules as well</p><p><code>git submodule update</code></p><p>and that’s it. We have the latest version of the submodule locally!</p><p>Hope this works for you.</p><p>Happy coding!</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> git submodules </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Text detection in number plates</title>
      <link href="/blog//AI/Text-detection-in-number-plates/"/>
      <url>/blog//AI/Text-detection-in-number-plates/</url>
      
        <content type="html"><![CDATA[<h1 id="Text-detection-in-number-plates"><a href="#Text-detection-in-number-plates" class="headerlink" title="Text detection in number plates"></a>Text detection in number plates</h1><p>One of the vital modules in the optical character recognition(OCR) pipeline is text detectionand segmentation which is also called text localization. In this post, we will apply variedpreprocessing techniques to the input image and find out how to localize text in theenhanced image, so that we can feed the segments to our text recognition network.</p><h2 id="Image-Preprocessing"><a href="#Image-Preprocessing" class="headerlink" title="Image Preprocessing"></a>Image Preprocessing</h2><p>Sometimes images can be distorted, noisy and other problems that can scale back the OCRaccuracy. To make a better OCR pipeline, we need to do some image preprocessing.</p><ul><li>Grayscale the image: Generally you will get an image which is having 3channels(color images), we need to convert this image into a grayscale form whichcontains only one channel. We can also process images with three channels but itonly increases the complexity of the model and increases the processing time.OpenCV provides a built-in function that can do it for you.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">grayscale_image = cv2.cvtColor(image, cv2.COLOR_BRG2GRAY)</span><br></pre></td></tr></table></figure><p>Or you can convert the image to grayscale while reading the image.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#opencv reads image in BGR format</span><br><span class="line">graysacle_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br></pre></td></tr></table></figure><ul><li>Noise reduction: Images come with various types of noises. OpenCV provides a lot ofnoise reduction function. I am using the Non-local Means Denoising algorithm.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denoised_image = cv2.fastNlMeansDenoising(grayscale_img, None, 10, 7, 21)</span><br></pre></td></tr></table></figure><img src="/blog/AI/Text-detection-in-number-plates/Figure_2.png" class="" title="Denoising"><ul><li>Contrast adjustment: Sometimes we have low contrast images. This makes it difficultto separate text from the image background. We need high contrast text images forthe localization process. We can increase image contrast using Contrast LimitedAdaptive Histogram Equalization (CLAHE) among many other contrast enhancementmethods provided by skimage.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from  skimage import exposure</span><br><span class="line">contrast_enhanced_image = exposure.equalize_adapthist(denoised, clip_limit=0.03)</span><br></pre></td></tr></table></figure><img src="/blog/AI/Text-detection-in-number-plates/Figure_3.png" class="" title="Contrast Adjustment"><p>So now we are done with image preprocessing let us move on to the second part, textlocalization.</p><h2 id="Text-Localization"><a href="#Text-Localization" class="headerlink" title="Text Localization"></a>Text Localization</h2><p>In this part, we will see how to detect a large number of text region candidates andprogressively removes those less likely to contain text. Using the MSER feature descriptor tofind text candidates in the image. It works well for text because the consistent color and highcontrast of text lead to stable intensity profiles.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#constructor for MSER detector</span><br><span class="line">mser = cv2.MSER_create()</span><br><span class="line">regions, mser_bboxes = mser.detectRegions(contrast_enhance_image)</span><br></pre></td></tr></table></figure><p>Along with the text MSER picked up many other stable regions that are not text. Now, thegeometric properties of text can be used to filter out non-text regions using simplethresholds.</p><p>Before moving on with the filtering process, let’s write some functions to display the results ina comprehensible manner.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">#display images</span><br><span class="line">def pltShow(*images):</span><br><span class="line">    #count number of images to show</span><br><span class="line">    count = len(images)</span><br><span class="line">    #three images per columnn</span><br><span class="line">    Row = np.ceil(count / 3.)</span><br><span class="line">    for i in range(count):</span><br><span class="line">        plt.subplot(nRow, 3, i+1)</span><br><span class="line">        if len(images[i][0], cmap=’gray’)</span><br><span class="line">            plt.imshow(images[i][0], cmap=’gray’)</span><br><span class="line">        else:</span><br><span class="line">            plt.imshow(images[i][0])</span><br><span class="line">        #remove x-y axis from subplots</span><br><span class="line">        plt.xticks([])</span><br><span class="line">        plt.yticks([])</span><br><span class="line">        plt.title(images[i][1])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">#color each MSER region in image</span><br><span class="line">def colorRegion(image_like_arr, region):</span><br><span class="line">    image_like_arr[region[:, 1], region[:, 0], 0] = np.random.randint(low=100, high=256)</span><br><span class="line">    image_like_arr[region[:, 1], region[:, 0], 1] = np.random.randint(low=100, high=256)</span><br><span class="line">    image_like_arr[region[:, 1], region[:, 0], 2] = np.random.randint(low=100, high=256)</span><br><span class="line"></span><br><span class="line">    return image</span><br></pre></td></tr></table></figure><p>The geometric properties we are going to use to discriminate between text and non-textregion are:</p><ul><li>Region area</li><li>Region perimeter</li><li>Aspect ratio</li><li>Occupancy</li><li>Compactness</li></ul><p>We will apply simple thresholds over these parameters to eliminate non-text regions. Firstlet’s write method to compute these parameters.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#values for the parameters</span><br><span class="line">AREA_LIM = 2.0e-4</span><br><span class="line">PERIMETER_LIM = 1e-4</span><br><span class="line">ASPECT_RATIO_LIM = 5.0</span><br><span class="line">OCCUPATION_LIM = (0.23, 0.90)</span><br><span class="line">COMPACTNESS_LIM = (3e-3, 1e-1)</span><br><span class="line"></span><br><span class="line">def getRegionShape(self, region): </span><br><span class="line">    return (max(region[:, 1]) - min(region[:, 1]), max(region[:, 0]) - min(region[:, 0]))</span><br><span class="line">    </span><br><span class="line">#compute area</span><br><span class="line">def getRegionArea(region):</span><br><span class="line">    return len(list(region))</span><br><span class="line"></span><br><span class="line">#compute perimeter</span><br><span class="line">def getRegionPerimeter(image, region):</span><br><span class="line">    #get top-left coordinate, width and height of the box enclosing the region</span><br><span class="line">    x, y, w, h = cv2.boundingRect(region)</span><br><span class="line">    return len(np.where(image[y:y+h, x:x+w] != 0)[0]))</span><br><span class="line">    </span><br><span class="line">#compute aspect ratio</span><br><span class="line">def getAspectRatio(region):    </span><br><span class="line">    return (1.0 * max(getRegionShape(region))) / (min(getRegionShape(region)) + 1e-4)</span><br><span class="line"></span><br><span class="line">#compute area occupied by the region area in the shape</span><br><span class="line">def getOccupyRate(region):</span><br><span class="line">    return (1.0 * getRegionArea(region)) / (getRegionShape(region)[0] *  \getRegionShape(region)[1] + 1.0e-10)</span><br><span class="line">    </span><br><span class="line">#compute compactness of the regio</span><br><span class="line">ndef getCompactness(region):    </span><br><span class="line">    return (1.0 * getRegionArea(region)) / (1.0 * getRegionPerimeter(region) ** 2)</span><br></pre></td></tr></table></figure><p>Now apply these methods to filter out text regions  as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#total number of MSER regions</span><br><span class="line">n1 = len(regions)</span><br><span class="line">bboxes=[]</span><br><span class="line">for i, region in enumerate(regions):</span><br><span class="line">    self.colorRegion(res, region)</span><br><span class="line">    if self.getRegionArea(region) &gt; self.grayImg.shape[0] * self.grayImg.shape[1] * AREA_LIM:</span><br><span class="line">       #number of regions meeting the area criteria</span><br><span class="line">    n2 += 1</span><br><span class="line">    self.colorRegion(res2, region)</span><br><span class="line"></span><br><span class="line">    if self.getRegionPerimeter(region) &gt; 2 * (self.grayImg.shape[0] + \</span><br><span class="line">        self.grayImg.shape[1]) * PERIMETER_LIM:</span><br><span class="line">   #number of regions meeting the perimeter criteria</span><br><span class="line">        n3 += 1</span><br><span class="line">   self.colorRegion(res3, region)</span><br><span class="line"> </span><br><span class="line">        if self.getAspectRatio(region) &lt; ASPECT_RATIO_LIM:</span><br><span class="line">   #number of regions meeting the aspect ratio criteria </span><br><span class="line">                n4 += 1</span><br><span class="line">   self.colorRegion(res4, region)</span><br><span class="line"></span><br><span class="line">   if (self.getOccupyRate(region) &gt; OCCUPATION_LIM[0]) and \ (self.getOccupyRate(region) &lt; OCCUPATION_LIM[1]):</span><br><span class="line">   n5 += 1</span><br><span class="line">   self.colorRegion(res5, region)</span><br><span class="line"></span><br><span class="line">   if (self.getCompactness(region) &gt; \COMPACTNESS_LIM[0]) and \(self.getCompactness(region) &lt; \COMPACTNESS_LIM[1]):</span><br><span class="line">   #final number of regions left </span><br><span class="line">                        n6 += 1</span><br><span class="line">   self.colorRegion(res6, region)</span><br><span class="line">                        bboxes.append(mser_bboxes[i])</span><br></pre></td></tr></table></figure><p>After eliminating non-text regions, I draw bounding boxes on the remaining regions andvoila, we have successfully detected and segmented the characters on the number plate.<br>Note: Apply NMS to remove overlapping bounding boxes.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for bbox in bboxes:</span><br><span class="line">   cv2.rectangle(img,(bbox[0]-1,bbox[1]-1),(bbox[0]+bbox[2]+1,box[1]+bbox[3]+1),(255,0,0), 1)</span><br></pre></td></tr></table></figure><p>Enough coding. Let’s see some results.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pltShow(&quot;MSER Result Analysis&quot;, \</span><br><span class="line">      (self.img, &quot;Image&quot;), \</span><br><span class="line">      (self.cannyImg, &quot;Canny&quot;), \</span><br><span class="line">      (res, &quot;MSER,(&#123;&#125; regions)&quot;.format(n1)), \</span><br><span class="line">      (res2, &quot;Area=&#123;&#125;,(&#123;&#125; regions)&quot;.format(config.mser_areaLimit, n2)), \</span><br><span class="line">      (res3, &quot;Perimeter=&#123;&#125;,(&#123;&#125; regions)&quot;.format(config.mser_perimeterLimit, n3)), \</span><br><span class="line">      (res4, &quot;Aspect Ratio=&#123;&#125;,(&#123;&#125; regions)&quot;.format(config.mser_aspectRatioLimit, n4)), \</span><br><span class="line">      (res5, &quot;Occupation=&#123;&#125;,(&#123;&#125; regions)&quot;.format(config.mser_occupationLimit, n5)), \</span><br><span class="line">      (res6, &quot;Compactness=&#123;&#125;,(&#123;&#125; regions)&quot;.format(config.mser_compactnessLimit, n6)), \</span><br><span class="line">      (boxRes, &quot;Segmented Image&quot;) \</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><img src="/blog/AI/Text-detection-in-number-plates/Figure_1.png" class="" title="MSER Result Analysis"><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this post, we covered the various image preprocessing techniques and learned about howto perform text localization on number plates.</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
