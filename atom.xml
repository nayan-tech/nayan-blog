<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nayan Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://nayan.co/"/>
  <updated>2020-09-23T05:01:32.526Z</updated>
  <id>https://nayan.co/</id>
  
  <author>
    <name>NayanTech</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow-docker</title>
    <link href="https://nayan.co/uncategorized/tensorflow-docker/"/>
    <id>https://nayan.co/uncategorized/tensorflow-docker/</id>
    <published>2020-09-23T05:01:32.526Z</published>
    <updated>2020-09-23T05:01:32.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container"><a href="#Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container" class="headerlink" title="Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container."></a>Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container.</h1><p>I have come across many developers who face serious issues when it comes to installing <strong>tensorflow</strong> on a <strong>linux</strong> distro such as <strong>Ubuntu</strong>. There are very few instances when the installation goes smoothly the first time itself. Mostly, the developer has to face a plethora of error messages which get quite tricky to solve. Some of the error messages are shown below:</p><pre><code>[...\stream_executor\dso_loader.cc] Couldn&apos;t open CUDA library nvcuda.dll[...\stream_executor\cuda\cuda_dnn.cc] Unable to load cuDNN DSO</code></pre><p>Similar error messages can be found in this official tensorflow link → <a href="https://www.tensorflow.org/install/errors" target="_blank" rel="noopener"><strong><em>https://www.tensorflow.org/install/errors</em></strong></a></p><p>Let’s make things easier and lives simpler:</p><h2 id="Enter-Docker"><a href="#Enter-Docker" class="headerlink" title="Enter Docker:"></a>Enter Docker:</h2><p>Using <strong><em>Docker</em></strong> containers the life of a developer becomes easier by a massive amount. Many developers shy away from using docker containers thinking that it introduces extra dependencies into the system followed by maintenance issues, but that’s a misconception.</p><p><strong><em>Docker</em></strong> containers actually reduce the time spent on figuring out different library versions to be installed and how they would communicate with one another. Containers solve multiple issues which arise with incompatibility of libraries and version mismatch. A container is completely independent from it’s host and reduces the chances of ruining environments on the host machine</p><h3 id="Installing-Docker-and-NVIDIA-Docker"><a href="#Installing-Docker-and-NVIDIA-Docker" class="headerlink" title="Installing Docker and NVIDIA Docker :"></a>Installing Docker and NVIDIA Docker :</h3><p>In order to run <strong><em>tensorflow</em></strong> as a container we would obviously need the latest version of docker to be installed and configured. Along with that we would also need <strong><em>NVIDIA Docker v2</em></strong> to be installed on the host machine. <strong><em>NVIDIA Docker</em></strong> plays a beautiful role of exposing the host machine’s GPU and GPU drivers to a container. Hence the developer only has to worry about installing the correct <strong><em>NVIDIA GPU</em></strong> <strong><em>driver</em></strong> on this machine. The <strong><em>NVIDIA Docker v2</em></strong> does the task of making it available for the container.</p><p>In order to learn how to install the latest version of Docker and NVIDIA Docker v2 , head over to my earlier post which describes this is in detail. Link given below:</p><p><a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener"><strong>Deep Learning for Production: Deploying YOLO using Docker.</strong></a></p><h3 id="Installing-tensorflow-using-Docker"><a href="#Installing-tensorflow-using-Docker" class="headerlink" title="Installing tensorflow using Docker:"></a><strong>Installing tensorflow using Docker:</strong></h3><p>Once your docker and NVIDIA docker v2 installation is complete with <strong><em>nvidia-smi</em></strong> giving you the output as shown in Fig 1, when run inside a docker container, we can move ahead with pulling the correct image for tensorflow.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*dPZfCX1ia00A3BmTP-QQhA.jpeg" alt="Fig 1: Output of nvidia-smi inside docker container"></p><p>Simply doing a <strong><em>docker pull tensorflow/tensorflow</em></strong> would download the latest version of tensorflow image. This can be run using the following command</p><pre><code>docker run -it -rm --runtime=nvidia --name=tensorflow_container ***tensorflow_image_name***</code></pre><p>Executing the command given above will run the tensorflow container in an interactive shell along with the availability of the <strong><em>NVIDIA gpus</em></strong> inside the container.</p><p>Now there are certain modifications which can be performed to get the tensorflow <strong><em>version</em></strong> required along with other libraries. Let’s say you want the latest version of tensorflow along with <strong><em>gpu</em></strong> support and <strong><em>python 3</em></strong> pre-installed. The image for this customization can be easily pulled using the following command:</p><pre><code>docker pull tensorflow/tensorflow:latest-gpu-py3</code></pre><p>You can find many other such images in the following link →<a href="https://hub.docker.com/r/tensorflow/tensorflow/tags" target="_blank" rel="noopener"><strong><em>https://hub.docker.com/r/tensorflow/tensorflow/tags</em></strong></a></p><p>Just do a docker pull on the one which suits your requirement.</p><p>If you want other libraries along with tensorflow, you can put them in a <strong><em>dockerfile</em></strong> and perform build command.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*bRwR0nlR4-XbX-00xpY5-Q.png" alt="Fig 2: Custom dockerfile with tensorflow"></p><p>Fig 2 above shows a custom <strong><em>dockerfile</em></strong> with <strong><em>tensorflow v1</em></strong> image being used along with installation of other libraries such as <strong><em>OpenCV,Moviepy,Keras</em></strong> and <strong><em>Apache Kafka</em></strong> for python</p><p>Once inside the container invoked using docker run, you can setup code to use tensorflow easily as you would done on the host machine without the container.</p><p>I would encourage all AI/ML practitioners to increase the use of docker containers to increase their research and development efficiency by reducing the time spent in managing multiple libraries and dueling with incompatibility errors.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container&quot;&gt;&lt;a href=&quot;#Installing-Tensorflow-2-0-on-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How to Prune deep CNN based architectures?</title>
    <link href="https://nayan.co/AI/pruning-1/"/>
    <id>https://nayan.co/AI/pruning-1/</id>
    <published>2020-09-05T11:19:52.000Z</published>
    <updated>2020-09-23T05:01:32.518Z</updated>
    
    <content type="html"><![CDATA[<p>​<br>With more and more research and development of state of the art neural network models, the neural network models are becoming deeper and deeper although these models are much more accurate but they also come with a significant cost that is a high inference time and also require more and more computational resources. This significant amount of computation resources consumed by such networks becomes a bottleneck when we require a real-time inference or when we want to deploy our <a href="https://nayan.co/blog/categories/AI/">Artificial Intelligence</a> based applications onto edge devices which have limited computational resources. At Nayan we generally use this to make heavy Neural Networks fast.<br>​<br>There are many different methods for Efficient Inference:<br>​</p><ul><li><strong>Pruning</strong><br>​</li><li>Quantization<br>​</li><li>Weight Sharing<br>​</li><li>Winograd transformation<br>​</li><li>Binary / Ternary Net<br>​</li></ul><p>In this blog we will be covering Neural Network Pruning which is one of the methods to produce models of smaller size, the ones which are more power efficient as well as memory efficient and in turn helps in making inference much faster with a minimal cost to the model accuracy.</p><blockquote><p><strong>Pruning deep neural networks means reducing the size of the deep learning networks by removing some parameters/ neurons.</strong><br>​</p></blockquote><h2 id="Biological-Inspiration-for-Pruning"><a href="#Biological-Inspiration-for-Pruning" class="headerlink" title="Biological Inspiration for Pruning"></a>Biological Inspiration for Pruning</h2><p>​<br>Pruning in neural networks has been taken as an idea from <a href="https://en.wikipedia.org/wiki/Synaptic_pruning" target="_blank" rel="noopener">**Synaptic Pruning</a> <strong>in the human brain where <a href="https://en.wikipedia.org/wiki/Axon" target="_blank" rel="noopener">axon</a> and <a href="https://en.wikipedia.org/wiki/Dendrite" target="_blank" rel="noopener">dendrite</a> completely decay and die off resulting in synapse elimination that occurs between early childhood and the onset of puberty in many <a href="https://en.wikipedia.org/wiki/Mammal" target="_blank" rel="noopener">mammals</a>. Pruning starts near the time of birth and continues into the mid-20s.<br>​<br><img src="https://cdn-images-1.medium.com/max/2000/1*vtyUeef84qEk-OTWc-zoVA.png" alt="Fig: Synapses and neurons before and after pruning ([Learning both Weights and Connections for Efficient Neural Networks](https://arxiv.org/abs/1506.02626))"><em>Fig: Synapses and neurons before and after pruning (<a href="https://arxiv.org/abs/1506.02626" target="_blank" rel="noopener">Learning both Weights and Connections for Efficient Neural Networks</a>)</em><br>​<br>Networks generally look like the one on the left: every neuron in the layer below has a connection to the layer above, but this means that we have to multiply a lot of floats together. Ideally, we’d only connect each neuron to a few others and save on doing some of the multiplications.<br>​<br>In pruning we majorly rank the neurons in the network based on how much they contribute and thus remove the low-ranking neurons making the network smaller and faster. But we prune the network in an iterative manner in-order to avoid the pruning of necessary neurons. Just like the figure below.<br>​<br><img src="https://cdn-images-1.medium.com/max/2000/0*7r1YI5al1H30dHD7" alt="Fig 2: Neural Network Pruning as a backward filter ([Pruning Convolutional Neural Networks for Resource Efficient Inference](https://arxiv.org/abs/1611.06440))"><em>Fig 2: Neural Network Pruning as a backward filter (<a href="https://arxiv.org/abs/1611.06440" target="_blank" rel="noopener">Pruning Convolutional Neural Networks for Resource Efficient Inference</a>)</em><br>​<br>**3 major</strong> steps involved in Pruning are<br>​</p><ul><li>Determine which neurons are more important and which are not (Ranking Neurons)<br>​</li><li>Remove a portion of the least important neurons<br>​</li><li>Fine-tune the network<br>​<br>We can rank the neurons according to the L1/ L2 norm of the neuron weights. The accuracy of the model might drop after pruning, but the network is fine-tuned/ trained iteratively to recover the loss. Because if we prune way too much at the once then there are chances of that the model might get damaged and then it won’t be able to recover. And thus we apply ‘Iterative Pruning’.<br>​<h2 id="Types-of-Pruning"><a href="#Types-of-Pruning" class="headerlink" title="Types of Pruning"></a>Types of Pruning</h2>​</li><li><strong>Weight Pruning</strong><blockquote><ul><li>Setting individual weights in the weight matrix to zero. This corresponds to deleting connections.</li><li>Inorder to achieve sparsity of k% we rank the individual weights in weight matrix W according to their magnitude, and then set to zero the smallest k%.<br>​</li></ul></blockquote></li><li><strong>Unit/ Neuron Pruning</strong><blockquote><ul><li>Setting entire columns(entire convolutional filters) to zero, in effect deleting the corresponding output neuron.</li><li>So to achieve sparsity of k% we rank the columns of a weight matrix according to their L2-norm and delete the smallest k%.<h1 id="The-future-of-machine-learning-is-on-the-edge-And-thus-Optimizing-Machine-Learning-models-is-especially-important-when-deploying-to-low-power-devices-like-smartphones"><a href="#The-future-of-machine-learning-is-on-the-edge-And-thus-Optimizing-Machine-Learning-models-is-especially-important-when-deploying-to-low-power-devices-like-smartphones" class="headerlink" title="The future of machine learning is on the edge. And thus Optimizing Machine Learning models is especially important when deploying to low-power devices like smartphones."></a>The future of machine learning is on the edge. And thus Optimizing Machine Learning models is especially important when deploying to low-power devices like smartphones.</h1>​</li></ul></blockquote><h2 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next?"></a>What’s Next?</h2>​<br>Next up will be a short code for demonstrating how we can prune neural networks.</li></ul><p>Find some more exciting AI blogs <a href="https://nayan.co/blog/categories/AI/">here</a></p><p>The author of this blog currently works <a href="https://nayan.co">NAYAN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​&lt;br&gt;With more and more research and development of state of the art neural network models, the neural network models are becoming deeper
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="https://nayan.co/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="https://nayan.co/tags/Deep-Learning/"/>
    
      <category term="AI" scheme="https://nayan.co/tags/AI/"/>
    
      <category term="NAYAN" scheme="https://nayan.co/tags/NAYAN/"/>
    
      <category term="CNN" scheme="https://nayan.co/tags/CNN/"/>
    
      <category term="Pruning" scheme="https://nayan.co/tags/Pruning/"/>
    
      <category term="Neural Network" scheme="https://nayan.co/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Mocking Enumerables in Rspec</title>
    <link href="https://nayan.co/Rails/mocking-enumerables-rspec/"/>
    <id>https://nayan.co/Rails/mocking-enumerables-rspec/</id>
    <published>2020-09-01T11:56:17.000Z</published>
    <updated>2020-09-23T05:01:32.482Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Rails/mocking-enumerables-rspec/mock-rails.jpg" class="" title="Mocking in Rails" alt="Mocking in Rails"><p>Rails puts some really powerful mocking libraries at our disposal. As long as your models are backed by ActiveRecord, <a href="https://api.rubyonrails.org/v3.2/classes/ActiveRecord/Fixtures.html" target="_blank" rel="noopener">ActiveRecord Fixtures</a> and <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">Factory Bot</a> are two very good libraries for mocking. More often than not, these cover the use cases for most applications. But when your models are not backed by ActiveRecord, there’s an excellent test-double framework for rspec, called <a href="https://github.com/rspec/rspec-mocks" target="_blank" rel="noopener">RSpec Mocks</a> that you can use.</p><h4 id="Basic-Mocking-with-RSpec-Mocks"><a href="#Basic-Mocking-with-RSpec-Mocks" class="headerlink" title="Basic Mocking with RSpec Mocks"></a>Basic Mocking with RSpec Mocks</h4><p>Basic mocking using RSpec Mocks is straight forward. Initialize the mock object as below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@mock_post = double(&apos;post&apos;)</span><br></pre></td></tr></table></figure><p>and then</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow(@mock_post).to receive(:title) &#123; &apos;sample title&apos; &#125;</span><br></pre></td></tr></table></figure><h3 id="Mocking-a-chain-of-methods"><a href="#Mocking-a-chain-of-methods" class="headerlink" title="Mocking a chain of methods"></a>Mocking a chain of methods</h3><p>For mocking a chain of methods, there are two options.</p><p>Lets say that the <code>Post</code> object has a method <code>author</code>, that returns another object of class <code>Author</code>. The <code>Author</code> class has multiple methods, including <code>name</code> and <code>image</code></p><ul><li><p>If your code only ever calls the <code>name</code> method for the post’s author, you can easily setup this mock object as</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow(@mock_post).to receive_message_chain(:author, :name) &#123; &apos;Sample Author&apos; &#125;</span><br></pre></td></tr></table></figure></li><li><p>If you need a more complex mocking, you can have 2 mock objects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@mock_author = double(&apos;author&apos;)</span><br><span class="line">allow(@mock_author).to receive(:name) &#123; &apos;Sample Author&apos; &#125;</span><br><span class="line">allow(@mock_author).to receive(:image) &#123; &apos;https://sample.image&apos; &#125;</span><br><span class="line"></span><br><span class="line">allow(@mock_post).to receive(:author) &#123; @mock_author &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Mocking-Enumerables"><a href="#Mocking-Enumerables" class="headerlink" title="Mocking Enumerables"></a>Mocking Enumerables</h3><p>In my specific project, I had a model that responded to <code>each</code>, and also had other methods that needed mocking, <code>total</code>, <code>skip</code>, <code>limit</code> etc. My initial instinct was that I could just do something like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">posts = double(&apos;post&apos;)</span><br><span class="line">allow(posts).to receive(:each) &#123; posts_list &#125;</span><br></pre></td></tr></table></figure><p>But unfortunately that doesn’t work, because each expects a block and yields each of the list item to the block. Fortunately, RSpec Mocks has a method <a href="https://github.com/rspec/rspec-mocks/blob/main/lib/rspec/mocks/message_expectation.rb#L169" target="_blank" rel="noopener"><code>and_yields</code></a> that lets us set up just what we need.</p><p>Continuing with the above example, lets say we need to have 10 mock posts. We can set it up as,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">posts_list = []</span><br><span class="line">10.times do |index|</span><br><span class="line">  post = double(&apos;post&apos;, title: &quot;post_#&#123;index&#125;&quot;)</span><br><span class="line">  posts_list &lt;&lt; post</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">posts = double(&apos;post&apos;, total: posts_list.size, skip: 0, limit: posts_list.size)</span><br><span class="line">iterator = allow(posts).to receive(:each)</span><br><span class="line">posts_list.each do |post|</span><br><span class="line">  iterator.and_yield(post)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>At this point, the <code>posts</code> mock object responds to the <code>each</code> iterator and returns the 10 mock post objects. It also responds to the <code>total</code>, <code>skip</code> and <code>limit</code> methods correctly.</p><p>Hope this helps.</p><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Rails/mocking-enumerables-rspec/mock-rails.jpg&quot; class=&quot;&quot; title=&quot;Mocking in Rails&quot; alt=&quot;Mocking in Rails&quot;&gt;

&lt;p&gt;Rails puts som
      
    
    </summary>
    
    
      <category term="Rails" scheme="https://nayan.co/categories/Rails/"/>
    
    
      <category term="Ruby" scheme="https://nayan.co/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://nayan.co/tags/Rails/"/>
    
      <category term="rspec" scheme="https://nayan.co/tags/rspec/"/>
    
      <category term="Mocking" scheme="https://nayan.co/tags/Mocking/"/>
    
  </entry>
  
  <entry>
    <title>How to add Lottie Animation in an Android application</title>
    <link href="https://nayan.co/Android/How-to-add-Lottie-Animation-in-an-Android-app/"/>
    <id>https://nayan.co/Android/How-to-add-Lottie-Animation-in-an-Android-app/</id>
    <published>2020-08-26T18:40:48.000Z</published>
    <updated>2020-09-23T05:01:32.398Z</updated>
    
    <content type="html"><![CDATA[<p>Lottie is an <code>Android</code>, IOS and React Native library that renders After Effects animations in real time, allowing apps to use animations <code>(Dynamic Feature)</code> as easily as they use static images.They are especially useful when the UI <code>(User Interaction)</code> changes state, such as when new content loads or new actions become available.</p><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_1.gif" alt="Lottie Animation"></p><h2 id="Lottie-the-future-of-product-animation"><a href="#Lottie-the-future-of-product-animation" class="headerlink" title="Lottie, the future of product animation"></a>Lottie, the future of product animation</h2><ul><li>Multi-platform (A single instance that works on all your devices)</li><li>Easy Integration (As simple as embedding an image or video)</li><li>Lightweight (Lighter and leaner than video or animated GIF)</li><li>Interactivity (Add events and dynamic properties to your animations)</li><li>Responsive (Scalable vector animations that adapt to any size)</li></ul><h2 id="Let’s-begin"><a href="#Let’s-begin" class="headerlink" title="Let’s begin"></a>Let’s begin</h2><ol><li>Create a new project</li></ol><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_2.jpg" alt="Create New Project In Android Studio"></p><ol start="2"><li>Add the required Lottie animation dependency in the app level build.gradle file:</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lottie Animation</span></span><br><span class="line">implementation ‘com.airbnb.android:lottie:<span class="number">3.4</span>.<span class="number">0</span>’</span><br></pre></td></tr></table></figure><ol start="3"><li>Add <code>animation.json</code> files in assets folder. You can create your own animations using Adobe After Effects, or feel free to use the ones uploaded by other users on: <a href="https://lottiefiles.com/" target="_blank" rel="noopener">Lottie Files</a></li></ol><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_3.jpg" alt="app/assets"></p><ol start="4"><li>Adding animation to <code>activity_main.xml</code> file:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"140dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/bg_header"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"lottie_logo_animation.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/firstAnimationView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"animation.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/secondAnimationView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"animation_1.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toggle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_fileName</span>=<span class="string">"toggle_switch.json"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_loop</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:lottie_speed</span>=<span class="string">"1.75"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>Write the following code in <code>MainActivity.kt</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isSwitchOn = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        toggle.setOnClickListener &#123;</span><br><span class="line">            changeToggleState()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">changeToggleState</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSwitchOn) &#123;</span><br><span class="line">            toggle.setMinAndMaxProgress(<span class="number">0.5f</span>, <span class="number">1f</span>)</span><br><span class="line">            toggle.playAnimation()</span><br><span class="line">            firstAnimationView.visibility = View.VISIBLE</span><br><span class="line">            secondAnimationView.visibility = View.GONE</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            toggle.setMinAndMaxProgress(<span class="number">0f</span>, <span class="number">0.5f</span>)</span><br><span class="line">            toggle.playAnimation()</span><br><span class="line">            secondAnimationView.visibility = View.VISIBLE</span><br><span class="line">            firstAnimationView.visibility = View.GONE</span><br><span class="line">        &#125;</span><br><span class="line">        isSwitchOn = !isSwitchOn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>And we are done!</li></ol><p><img src="/blog/Android/How-to-add-Lottie-Animation-in-an-Android-app/image_4.gif" alt="Lottie Animation"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://airbnb.design/introducing-lottie/" target="_blank" rel="noopener">Lottie</a></li><li><a href="https://airbnb.io/lottie/#/android" target="_blank" rel="noopener">Lottie Docs</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Android/App-Heartbeat/">App-Heartbeat</a></li><li><a href="https://nayan.co/blog/Android/Applying-Proguard-in-an-android-application/">How to apply Proguard in an android application</a></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co/">website</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lottie is an &lt;code&gt;Android&lt;/code&gt;, IOS and React Native library that renders After Effects animations in real time, allowing apps to use 
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="user interaction" scheme="https://nayan.co/tags/user-interaction/"/>
    
      <category term="Diwakar Singh" scheme="https://nayan.co/tags/Diwakar-Singh/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="lottie animation" scheme="https://nayan.co/tags/lottie-animation/"/>
    
      <category term="dynamic feature" scheme="https://nayan.co/tags/dynamic-feature/"/>
    
      <category term="nayan" scheme="https://nayan.co/tags/nayan/"/>
    
  </entry>
  
  <entry>
    <title>Creating obfuscated code in python to make them unreadable</title>
    <link href="https://nayan.co/Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/"/>
    <id>https://nayan.co/Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/</id>
    <published>2020-08-23T10:00:00.000Z</published>
    <updated>2020-09-23T05:01:32.386Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/obfuscation.png" class=""><p>This post is totally focused on how to obfuscate your python code. The term <strong>obfuscate</strong> means that “<em>creating your code that is difficult for humans to understand</em>”. In this post, I am going to obfuscate my python code. This code obfuscation is generally used for data protection so that no third party can read my code.</p><p>In python, you can obfuscate your code using a command line tool known as <strong>pyarmor</strong>. It is a tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts. We can simply download pyarmor using the following command.</p><pre><code>pip install pyarmor</code></pre><p>Lets start obfuscating our code. For now lets start with a simple python script to obfuscate. I had created a basic script which just prints a message on running it. Lets start obfuscating it by using below command</p><pre><code>pyarmor obfuscate /path/to/script</code></pre><p>Then you see, there will be a <strong>dist</strong> named folder will be created. Now, go inside that folder and check that, there will be a file with same name as of your script. If you run it normally like</p><pre><code>python /path/to/script</code></pre><p>then, it give the same result as before obfuscation. If you open this file you’ll see something like below<br><img src="https://cdn-images-1.medium.com/max/2000/1*EhTDQqh7kEpoukY_zPr7Iw.png" alt="Fig.1 showing how a obfuscated code looks like"></p><p>There is also a folder called <strong>pytransform</strong> in the folder along with your script. This folder contains some information about the obfuscation code like its license and its key.</p><p>Now, we will obfuscate scripts which are using folder imports (like package). Lets create a same scenario like that and will obfuscate them.<br>I am going to make a calculator type files and the package just contains those files and in my main file I am simply importing it and doing operation. Follow the below steps for obfuscating them.</p><pre><code>mkdir build cd buildpyarmor init --src /path/to/package --entry __init__.py package_namepyarmor init --src /path/to/maincodeFolder --entry codename.py code_folder</code></pre><p>Here, I have simply initialize the folders before obfuscating them, so just replacing the paths and your code name with the above names. Now,</p><pre><code>pyarmor build --output path/to/obfuscateFolder --no-runtime package_namepyarmor build --output path/to/obfuscateFolder --no-runtime code_folderpyarmor build --output path/to/obfuscateFolder --only-runtime code_folder</code></pre><p>Here, “path/to/obfuscatefolder” is the path where you want to keep your obfuscated folder. I use only-runtime for the main code. By mentioning the only-runtime, pyarmor generates a <strong>pytransform</strong> folder for that code and for no-runtime it just obfuscate them.</p><p>Now, we are ready to run our code. Just go to your “path/to/obfuscateFolder” and run the main file. You can easily able to run that and your output should be same just like before obfuscating the code.</p><p><strong>Note</strong> –: If you make any change in your main code then you need to obfuscate your code again.</p><p>I had put the whole code in my github. You can check from <a href="https://github.com/hghimanshu/Blog/tree/master/obfuscation" target="_blank" rel="noopener">here</a></p><p><strong>Some good reads you may like :)</strong></p><ol><li><a href="https://nayan.co/blog//AI/Creating-deep-learning-models-in-Docker/">Creating a very basic deep-learning model in Docker</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Scripting/Creating-obfuscated-code-in-python-to-make-them-unreadable/obfuscation.png&quot; class=&quot;&quot;&gt;


&lt;p&gt;This post is totally fo
      
    
    </summary>
    
    
      <category term="Scripting" scheme="https://nayan.co/categories/Scripting/"/>
    
    
      <category term="python" scheme="https://nayan.co/tags/python/"/>
    
      <category term="code-obfuscation" scheme="https://nayan.co/tags/code-obfuscation/"/>
    
      <category term="pytransform" scheme="https://nayan.co/tags/pytransform/"/>
    
      <category term="Data Protection" scheme="https://nayan.co/tags/Data-Protection/"/>
    
  </entry>
  
  <entry>
    <title>Generating Pdf the way you want, in Android using itextpdf</title>
    <link href="https://nayan.co/Android/generating-pdf-in-android-using-itextpdf/"/>
    <id>https://nayan.co/Android/generating-pdf-in-android-using-itextpdf/</id>
    <published>2020-08-23T05:45:58.000Z</published>
    <updated>2020-09-23T05:01:32.482Z</updated>
    
    <content type="html"><![CDATA[<p>We all must have got requirement to generate PDFs in our Android Application. Well, here is a quick guide on how you can start generating the PDFs your own way without any limits on Andoid device itself.</p><p><img src="/blog/Android/generating-pdf-in-android-using-itextpdf/itext-logo.png" alt="iTextPDF"></p><h2 id="NOTE-Get-read-write-permissions-on-Android-before-invoke-of-PDF-generation-code"><a href="#NOTE-Get-read-write-permissions-on-Android-before-invoke-of-PDF-generation-code" class="headerlink" title="NOTE: Get read/write permissions on Android before invoke of PDF generation code"></a>NOTE: Get read/write permissions on Android before invoke of PDF generation code</h2><h2 id="Lets-start-generating-PDF-step-by-step"><a href="#Lets-start-generating-PDF-step-by-step" class="headerlink" title="Lets start generating PDF step by step:-"></a>Lets start generating PDF step by step:-</h2><p>1: Add <strong>com.itextpdf:itext7-core:7.1.11</strong> library to your app level gradle file</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.itextpdf:itext7-core:7.1.11'</span></span><br></pre></td></tr></table></figure><p>2:  First Create an instance of PDF document</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(<span class="string">"Your File Location"</span>))</span><br></pre></td></tr></table></figure><p>3: Now supply this instance to create <code>com.itextpdf.layout.Document</code> instance</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br></pre></td></tr></table></figure><p>4: Draw some text and style that in your own way</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> text = Paragraph(<span class="string">"My Text"</span>)</span><br><span class="line">document.add(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> boldText = Paragraph(<span class="string">"My Styled Text"</span>)</span><br><span class="line">boltText.setBold()</span><br><span class="line">document.add(boldText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sizedText = Paragraph(<span class="string">"My Sized Text"</span>)</span><br><span class="line">sizedText.setFontSize(<span class="number">20.0f</span>)</span><br><span class="line">document.add(sizedText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> coloredText = Paragraph(<span class="string">"My Sized Text"</span>)</span><br><span class="line">coloredText.setFontColor(ColorConstants.RED)</span><br><span class="line">document.add(coloredText)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> alignedText = Paragraph(<span class="string">"My Sized Text"</span>)</span><br><span class="line">alignedText.setTextAlignment(TextAlignment.CENTER)</span><br><span class="line">document.add(alignedText)</span><br><span class="line"></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><p>5: Adding a space/gap before and after drawing a text</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> textWithoutSpace1 = Paragraph(<span class="string">"My Text"</span>)</span><br><span class="line">textWithoutSpace1.setMargins(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>)</span><br><span class="line">document.add(textWithoutSpace1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> textWithSpace = Paragraph(<span class="string">"My Spaced Text"</span>)</span><br><span class="line">textWithSpace.setMargins(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>)</span><br><span class="line">document.add(textWithSpace)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> textWithoutSpace2 = Paragraph(<span class="string">"My Text"</span>)</span><br><span class="line">textWithoutSpace2.setMargins(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>, <span class="number">10f</span>)</span><br><span class="line">document.add(textWithoutSpace2)</span><br><span class="line"></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><p>6: Generate Output file</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This will create a file at your fileLocation specified while creating PdfDocument instance</span></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><h2 id="Drawing-tables"><a href="#Drawing-tables" class="headerlink" title="Drawing tables:-"></a>Drawing tables:-</h2><p>1: Create table instance</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(<span class="string">"Your File Location"</span>))</span><br><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will create a table instance with weighted column width</span></span><br><span class="line"><span class="keyword">val</span> table = Table(UnitValue.createPercentArray(floatArrayOf(<span class="number">8f</span>, <span class="number">23f</span>, <span class="number">15f</span>, <span class="number">15f</span>, <span class="number">12f</span>, <span class="number">12f</span>, <span class="number">15f</span>))).useAllAvailableWidth()</span><br></pre></td></tr></table></figure><p>1: Draw Table using an Array/List/ArrayList/MutableList</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(<span class="string">"Your File Location"</span>))</span><br><span class="line"><span class="keyword">val</span> document = Document(pdfDocument)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> table = Table(UnitValue.createPercentArray(floatArrayOf(<span class="number">8f</span>, <span class="number">23f</span>, <span class="number">15f</span>, <span class="number">15f</span>, <span class="number">12f</span>, <span class="number">12f</span>, <span class="number">15f</span>))).useAllAvailableWidth()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Add Header Cells</span></span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Date"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Job Name"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Job Size"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Job Type"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Quantity"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Rate"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">table.addHeaderCell(Cell().add(Paragraph(<span class="string">"Amount"</span>).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (entry <span class="keyword">in</span> entries) &#123;</span><br><span class="line">  table.addCell(Cell().add(Paragraph(shortDateFormat.format(entry.createdOn)).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(entry.getJobName())</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.jobSize).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.getJobType().replace(<span class="string">"Pouch"</span>, <span class="string">""</span>)).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.quantity).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.rate).setTextAlignment(TextAlignment.CENTER)))</span><br><span class="line">  table.addCell(Cell().add(Paragraph(entry.amount).setTextAlignment(TextAlignment.RIGHT)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.add(table)</span><br><span class="line"></span><br><span class="line">document.close()</span><br></pre></td></tr></table></figure><h2 id="Change-Page-Size-for-pdfDocument"><a href="#Change-Page-Size-for-pdfDocument" class="headerlink" title="Change Page Size for pdfDocument"></a>Change Page Size for pdfDocument</h2><p>Set your desired page size to <code>pdfDocument</code>‘s <code>defaultPageSize</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pdfDocument = PdfDocument(PdfWriter(fileLocation))</span><br><span class="line">pdfDocument.defaultPageSize = PageSize.A4</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://kb.itextpdf.com/home/it7kb/examples" target="_blank" rel="noopener">iTextPDF Examples</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We all must have got requirement to generate PDFs in our Android Application. Well, here is a quick guide on how you can start generating
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
      <category term="frontend" scheme="https://nayan.co/tags/frontend/"/>
    
      <category term="itext" scheme="https://nayan.co/tags/itext/"/>
    
      <category term="iTextPDF" scheme="https://nayan.co/tags/iTextPDF/"/>
    
      <category term="pdf" scheme="https://nayan.co/tags/pdf/"/>
    
      <category term="generate pdf" scheme="https://nayan.co/tags/generate-pdf/"/>
    
  </entry>
  
  <entry>
    <title>Setup CI/CD on React app using GitHub Actions</title>
    <link href="https://nayan.co/Web/react-cicd/"/>
    <id>https://nayan.co/Web/react-cicd/</id>
    <published>2020-08-20T15:08:25.000Z</published>
    <updated>2020-09-23T05:01:32.518Z</updated>
    
    <content type="html"><![CDATA[<p>In this tutorial, I’m going to show you how to create a simple workflow that I use on my personal projects with React.</p><p>This workflow created on GitHub Actions will be responsible for automatically test the source code, generate a test coverage report and upload it on Codecov, build and deploy the project on GitHub Pages. All these jobs are activated by a push or pull request event on master branch.</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>First, on your React App GitHub repository, navigate to the main page of the repository, click Actions.</p><p>Then, you’ll see suggestions of CI templates that are the best fit for your project. You can use workflow templates as a starting place to build your custom workflow.<br>In this case, click Set up this workflow, under the name of the template Node.js.   </p><p><img src="/blog/Web/react-cicd/image1.jpeg" alt="Basic workflow"></p><p>Finally, you’ll see a default YAML file like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">name: Node.js CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [10.x, 12.x, 14.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v2</span><br><span class="line">    - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">    - run: npm ci</span><br><span class="line">    - run: npm run build --if-present</span><br><span class="line">    - run: npm test</span><br></pre></td></tr></table></figure><h2 id="Test-coverage-report-generation"><a href="#Test-coverage-report-generation" class="headerlink" title="Test coverage report generation"></a>Test coverage report generation</h2><p>Lets update workflow abit to add test coverage step in our workflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">name: CI/CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout repository</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    - name: Set up Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: Install dependencies</span><br><span class="line">      run: npm install</span><br><span class="line"></span><br><span class="line">    - name: Run the tests</span><br><span class="line">      run: npm test</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: npm run build</span><br></pre></td></tr></table></figure><h3 id="Setup-codecov-test-coverage"><a href="#Setup-codecov-test-coverage" class="headerlink" title="Setup codecov test coverage"></a>Setup codecov test coverage</h3><p>First, go to the <a href="https://codecov.io/" target="_blank" rel="noopener">Codecov website</a> and create an account, you can use your GitHub account to sign up.</p><p>Next, access your account on the website, click Repositories, after, click Add new repository and choose the repository you want to use. (we will setup secret in abit)</p><h2 id="Deployment-on-GitHub-Pages"><a href="#Deployment-on-GitHub-Pages" class="headerlink" title="Deployment on GitHub Pages"></a>Deployment on GitHub Pages</h2><p>Install <code>gh-pages</code> and add <code>deploy</code> to scripts in <code>package.json</code>.<br>Run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save gh-pages</span><br></pre></td></tr></table></figure><p>Add the following scripts in your package.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;predeploy&quot;: &quot;npm run build&quot;,</span><br><span class="line">&quot;deploy&quot;: &quot;gh-pages -d build&quot;,</span><br></pre></td></tr></table></figure><p>Now we are going to create a new access token, in order to deploy our application through the workflow.</p><p>Go to the Personal access tokens area in the Developer settings of your GitHub profile and click Generate new token.</p><p>Copy the generated token.</p><p>On GitHub, navigate to the main page of the repository, under your repository name, click Settings. In the left sidebar, click Secrets. And finally, Click Add a new secret.</p><p>Type a name for your secret in the Name input box, like <code>ACTIONS_DEPLOY_ACCESS_TOKEN</code>.</p><p>Enter the value for your secret (which should be the personal access token we just created).</p><p>Click Add secret.</p><p>Your last step on your workflow should be some like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- name: Deploy</span><br><span class="line">  run: |</span><br><span class="line">    git config --global user.name $user_name</span><br><span class="line">    git config --global user.email $user_email</span><br><span class="line">    git remote set-url origin https://$&#123;github_token&#125;@github.com/$&#123;repository&#125;</span><br><span class="line">    npm run deploy</span><br><span class="line">  env:</span><br><span class="line">    user_name: &apos;github-actions[bot]&apos;</span><br><span class="line">    user_email: &apos;github-actions[bot]@users.noreply.github.com&apos;</span><br><span class="line">    github_token: $&#123;&#123; secrets.ACTIONS_DEPLOY_ACCESS_TOKEN &#125;&#125;</span><br><span class="line">    repository: $&#123;&#123; github.repository &#125;&#125;</span><br></pre></td></tr></table></figure><p>The name and email information need not necessarily be your real information. And you must replace ACTIONS_DEPLOY_ACCESS_TOKEN with the name of the secret you just created.</p><p>After adding the deploy command on your workflow, click Start commit, and click Commit new file.</p><p>Your final workflow file should be like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">name: CI/CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ master ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ master ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout repository</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">    - name: Set up Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: Install dependencies</span><br><span class="line">      run: npm install</span><br><span class="line"></span><br><span class="line">    - name: Run the tests and generate coverage report</span><br><span class="line">      run: npm test -- --coverage</span><br><span class="line"></span><br><span class="line">    - name: Upload coverage to Codecov</span><br><span class="line">      uses: codecov/codecov-action@v1</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: npm run build</span><br><span class="line"></span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        git config --global user.name $user_name</span><br><span class="line">        git config --global user.email $user_email</span><br><span class="line">        git remote set-url origin https://$&#123;github_token&#125;@github.com/$&#123;repository&#125;</span><br><span class="line">        npm run deploy</span><br><span class="line">      env:</span><br><span class="line">        user_name: &apos;github-actions[bot]&apos;</span><br><span class="line">        user_email: &apos;github-actions[bot]@users.noreply.github.com&apos;</span><br><span class="line">        github_token: $&#123;&#123; secrets.ACTIONS_DEPLOY_ACCESS_TOKEN &#125;&#125;</span><br><span class="line">        repository: $&#123;&#123; github.repository &#125;&#125;</span><br></pre></td></tr></table></figure><p>Now, in every push or pull request event on master branch, the CI/CD workflow will be activated. And you will be able to see if all steps have passed or not.</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub actions</a></li><li><a href="https://docs.github.com/en/actions/language-and-framework-guides/github-actions-for-javascript-and-typescript" target="_blank" rel="noopener">Actions docs for JS</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Web/angular-youtube/">Angular Youtube integration</a></li><li><a href="https://nayan.co/blog/Web/angular-maps/">Angular maps and clusters</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this tutorial, I’m going to show you how to create a simple workflow that I use on my personal projects with React.&lt;/p&gt;
&lt;p&gt;This workfl
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/categories/Web/"/>
    
    
      <category term="web" scheme="https://nayan.co/tags/web/"/>
    
      <category term="react" scheme="https://nayan.co/tags/react/"/>
    
      <category term="javascript" scheme="https://nayan.co/tags/javascript/"/>
    
      <category term="CICD" scheme="https://nayan.co/tags/CICD/"/>
    
      <category term="Github-actions" scheme="https://nayan.co/tags/Github-actions/"/>
    
      <category term="Code coverage" scheme="https://nayan.co/tags/Code-coverage/"/>
    
  </entry>
  
  <entry>
    <title>Similarity Analysis and Clustering Technique</title>
    <link href="https://nayan.co/AI/similarity/"/>
    <id>https://nayan.co/AI/similarity/</id>
    <published>2020-08-17T18:45:42.000Z</published>
    <updated>2020-09-23T05:01:32.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SIMILARITY-ANALYSIS-AND-CLUSTERING-TECHNIQUE-USING-ANNOY-AND-DBSCAN"><a href="#SIMILARITY-ANALYSIS-AND-CLUSTERING-TECHNIQUE-USING-ANNOY-AND-DBSCAN" class="headerlink" title="SIMILARITY ANALYSIS AND CLUSTERING TECHNIQUE USING ANNOY AND DBSCAN"></a>SIMILARITY ANALYSIS AND CLUSTERING TECHNIQUE USING ANNOY AND DBSCAN</h1><p><img src="/blog/AI/similarity/COVER1.jpg" alt="cover"></p><p>Have you been working with loads of image data points? <br>Are you facing an issue cleaning and verifying the data?<br>Are you repeatedly overlooking minor mistakes made at an early stage in the dataset? <br>Do you feel there is a bias towards some data points because they are higher in number?</p><p>So would it not be great if you could focus your attention on only unique images from a huge dataset?<br>In this blog I am going to share a <a href="https://nayan.co/blog/">Deep learning</a> based approach that can help you get rid of identical images.</p><p>Data collected from the real world is dynamic and unpredictable. We might be fetching thousands of identical images and just a few unique data points in terms of region of interest, lighting conditions and other factors based on your area of focus, and that is not very favourable for a <a href="https://nayan.co/blog/">Machine learning</a> model.<br>Also saving identical images or data points increases the cost of the product in ways we might not be keeping track of like time and money spent in storage, maintenance, data management, data cleaning, and data annotation.</p><p>To solve this problem I implemented a similarity check model, and clustering using tensorflow 2.0.<br>Used a VGG16 model with pretrained weights of imagenet dataset, followed by feature extraction of data points using transfer learning.</p><h2 id="SIMILARITY"><a href="#SIMILARITY" class="headerlink" title="SIMILARITY"></a>SIMILARITY</h2><p>In order to get the similarity percentage between any 2 images or to find the K nearest neighbours of it, I used Spotify’s ANNOY library.</p><h3 id="ANNOY-Approximate-Nearest-Neighbours-Oh-Yeah"><a href="#ANNOY-Approximate-Nearest-Neighbours-Oh-Yeah" class="headerlink" title="ANNOY - Approximate Nearest Neighbours Oh Yeah !!"></a><em>ANNOY - Approximate Nearest Neighbours Oh Yeah !!</em></h3><p><img src="annoy.png" alt="annoy"></p><p>Annoy uses the concept of binary trees and forests to get to approximate nearest neighbours.<br>Each tree is constructed by picking two points at random and splitting the space into two by their hyperplane, and we keep splitting in the subspaces recursively until the points associated with a node is small enough to have k points in every section.<br>The forest is traversed in order to obtain a set of candidate points from which the closest to the query point are returned (with priority queue).<br>Once we get the candidate points closest to the query point we have the flexibility to further filter our datapoints based on the metric of choice (i.e. cosine, euclidean).</p><p>Using annoy is quite simple and extremely cool. Since it is an Approximate Nearest Neighbour algorithm the results are approximate but can be improved by tweaking the two parameters : number_of_trees and search_k, a higher value of both corresponds to better results.</p><p><img src="ann.png" alt="ann"></p><h2 id="CLUSTERING"><a href="#CLUSTERING" class="headerlink" title="CLUSTERING"></a>CLUSTERING</h2><p>Annoy makes visualisation of nearest neighbours very easy. However, to find a cluster of all similar images without limiting to a single K value DBSCAN is a great choice.</p><p><img src="cluster.png" alt="cluster"></p><h3 id="DBSCAN-Density-Based-Spatial-Clustering-of-Applications-with-Noise"><a href="#DBSCAN-Density-Based-Spatial-Clustering-of-Applications-with-Noise" class="headerlink" title="DBSCAN - Density Based Spatial Clustering of Applications with Noise"></a><em>DBSCAN - Density Based Spatial Clustering of Applications with Noise</em></h3><p><img src="dbscan.png" alt="dbscan"></p><p>It is a popular clustering method provided by sklearn library and used in <a href="https://nayan.co/blog/">Machine learning</a> and <a href="https://nayan.co/blog/">Computer Vision</a>.<br>It divides the dataset into n dimensions. For each point in the dataset it creates an n dimensional shape around it and then counts the number of datapoints that fall within that shape. Each of these shapes is called a cluster. DBSCAN iteratively expands the cluster/shape by checking each datapoint within the shape and also the ones in the vicinity.</p><p>By specifying the similarity threshold (eps), the similarity metric, and the minimum number of samples for a shape to be marked as a cluster you can customize your results ( specifying min_samples to a value higher than 1 helps you get rid of the noise ).</p><p>Once DBSCAN is defined you have to fit the feature vector of the datapoints for DBSCAN to give you the most awaited cluster details. You can get information like number of clusters, number of datapoints in every cluster, and the details of the datapoints belonging to the clusters.</p><p><img src="db.png" alt="db"></p><p>Once these vital details are obtained we are free to play with our datapoints and clusters.<br>I simply maintained a list of labels, and path corresponding to every datapoint.</p><p><em>To group similar image:</em></p><p>Iterating over the list, whenever a new label was encountered I made a new folder corresponding to it and added the image to that very folder, also following images of the same label to it.</p><p><em>To delete similar images:</em></p><p>Iterating over the same list only the first image for every unique label was kept and the rest were deleted.</p><h3 id="Benefit"><a href="#Benefit" class="headerlink" title="Benefit:"></a>Benefit:</h3><p>After applying these techniques to my dataset, a set of 500 images reduced to 28 which means the cost spent on annotation was reduced to approximately 6% of existing.</p><h2 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h2><p>We went through some very basic algorithms, libraries and methods to be able to manage data and use similarity models.</p><p>You can read more about ANNOY <a href="https://github.com/Houzz/annoy2" target="_blank" rel="noopener" title="ANNOY">here</a> and about DBSCAN <a href="https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html" target="_blank" rel="noopener" title="DBSCAN">here</a>.</p><p>Find some more exciting AI blogs <a href="https://nayan.co/blog/categories/AI/" title="AI blogs">here</a></p><p><em>Try it out !!!</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SIMILARITY-ANALYSIS-AND-CLUSTERING-TECHNIQUE-USING-ANNOY-AND-DBSCAN&quot;&gt;&lt;a href=&quot;#SIMILARITY-ANALYSIS-AND-CLUSTERING-TECHNIQUE-USING-AN
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Computer Vision" scheme="https://nayan.co/tags/Computer-Vision/"/>
    
      <category term="Deep learning" scheme="https://nayan.co/tags/Deep-learning/"/>
    
      <category term="Machine learning" scheme="https://nayan.co/tags/Machine-learning/"/>
    
      <category term="Similarity" scheme="https://nayan.co/tags/Similarity/"/>
    
      <category term="Clustering" scheme="https://nayan.co/tags/Clustering/"/>
    
  </entry>
  
  <entry>
    <title>How to setup Jenkins CI/CD pipeline with apache tomcat for java web applications</title>
    <link href="https://nayan.co/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/"/>
    <id>https://nayan.co/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/</id>
    <published>2020-08-15T10:00:00.000Z</published>
    <updated>2020-09-23T05:01:32.410Z</updated>
    
    <content type="html"><![CDATA[<p>Whenever there are new updates to push either on frontend or on backend, one thing we all can agree upon is that it can be an utter chaos if there is no standard deployment process established. As developers, we always have a number of tests that need to be crossed off our checklist prior to deployment of updates and having a proper deployment pipeline take away almost all of the pain.</p><p>Today, I want to give you a demo of how you can use <strong>Jenkins (A server automation tool) written in JAVA to automate code deployment</strong> to multiple pipelines such as Development, Staging or even production <strong>straight for an version control system like Git</strong>.</p><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/jenkins_feature.jpg" alt="Jenkins Automation Server"></p><p>I will be using <strong>a maven based Rest API project written with Jersey (Rest API Framework)</strong>.</p><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ol><li>Should have a tomcat server running on your machine.</li><li>Should have a maven based project (I am using Jersey in our case) </li><li>Should JAVA 8 or above install on your machine</li><li>maven dependency setup</li></ol><h2 id="Set-up-Jenkins"><a href="#Set-up-Jenkins" class="headerlink" title="Set up Jenkins."></a>Set up Jenkins.</h2><p>To work Download Jenkins from below this <a href="https://www.jenkins.io/download/" target="_blank" rel="noopener">link</a>. It is a web archive (war) file which we will be using to run Jenkins on our apache tomcat server.</p><p><strong>Once downloaded move Jenkins.war file to webapps directory of apache tomcat and restart tomcat server</strong></p><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/getting_started_with_jenkins.png" alt="Getting started : Jenkins "></p><p>Try to hit <strong>http:localhost:8080/Jenkins</strong> . you should be able to see the Getting started screen. In an order to login to your Jenkins server, checkout initialAdminPassword </p><p><code>TOMCAT_HOME/.jenkins/secrets/initialAdminPassword (here tomcat home is tomcat installation directory)</code></p><p>Now create a new user in tomcat-user.xml for Jenkins deployment </p><p><code>&lt;user username=&quot;jenkins&quot; password=“Password roles=&quot;manager-script&quot; /&gt;</code></p><p>Before setting up new job we need to install below mentioned jenkins plugins </p><ol><li>Install “deploy to container” plugin (for tomcat deployment)</li><li>Install “Git” plugin (For git support) </li><li>Install “Github” Plugin (For configuring webhooks of your git repo)</li></ol><h2 id="Setup-job"><a href="#Setup-job" class="headerlink" title="Setup job"></a>Setup job</h2><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/create_new_job.png" alt="Jenkins job"></p><p>Create a new job with a freestyle project. In an order to fully automate war deployment we need to consider below mentioned steps</p><ol><li>Pulling code from remote repository.</li></ol><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/git_repository.png" alt="Setting up git repository"></p><p>Here I am setting up this job to pull from a demo repository from my github account. I am using <strong>Master branch to fetch for every time a new build is triggered</strong>. You can use other branches like <strong>*Dev or staging</strong> for setting up different deployment pipelines.</p><ol start="2"><li>Compiling and building the war file using maven.</li></ol><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/build_step.png" alt="build setup"></p><p>In build section, select <strong>Execute Shell</strong> from drop down and write  </p><p><code>mvn clean install</code></p><ol start="3"><li>Deploying war to tomcat using the “Jenkins” user we just created.</li></ol><p><img src="/blog/JAVA/How-to-setup-jenkins-CI-CD-pipeline-with-apache-tomcat/war_deployment.png" alt="Post build, war deployment"></p><p>When maven is done building us a war from source code which jenkins has pulled from git repository, we need to deploy this newly cleared war file to webapps directory in apache tomcat.</p><p>This can be done by configuring post build section and provide credentials for above created <strong>Jenkins</strong> user in tomcat-user.xml file.  </p><ol start="4"><li>Setting up a web hook to trigger automatic build whenever a pull request is approved or changes are pushed to branch.</li></ol><p>You need to create a web-hook for your github repository. Go to the setting tabs, select web-hooks and create a new webhook. But before that you need to expose your Jenkins server to the external world, you can do that using ngrok (for temporary basis) or you can setup a public ip for your machine.</p><p><code>http://beb52b5f60fd.ngrok.io.ngork.io:8080/jenkins/github-webhook</code></p><p>Once done, whenever there is any push in your git repository Jenkins which gets a notification using this web hook and automatic build will be triggered.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you can see in just 15 mins we created a new job that will pull code from a specific branch of git repository, create a war build from the latest code and deploy it to tomcat. Imagine setting up different pipelines, one for development and other one for Testing / Stating environment which are configured with different code branches. It will not only help deploy updates to different environments but also make it easy to work on multiple features in parallel.  </p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li>Read more about <a href="https://www.jenkins.io/doc/" target="_blank" rel="noopener">Jenkins</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><p>Read here to know more about <a href="http://blog.nayan.co/Android/Android-Testing-Strategy/" target="_blank" rel="noopener">Android Testing Strategy</a></p></li><li><p>Here is an great article to <a href="http://blog.nayan.co/Android/Dynamic-feature-deployment-in-android/" target="_blank" rel="noopener">setup dynamic feature delivery for android application</a></p></li></ol><p>p.s. Nayan is a platform that offers high precision services for traffic monitoring and road safety. Check out our <a href="https://nayan.co">website</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Whenever there are new updates to push either on frontend or on backend, one thing we all can agree upon is that it can be an utter chaos
      
    
    </summary>
    
    
      <category term="JAVA" scheme="https://nayan.co/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://nayan.co/tags/JAVA/"/>
    
      <category term="Puneet" scheme="https://nayan.co/tags/Puneet/"/>
    
      <category term="Backend" scheme="https://nayan.co/tags/Backend/"/>
    
      <category term="DevOps" scheme="https://nayan.co/tags/DevOps/"/>
    
      <category term="NAYAN" scheme="https://nayan.co/tags/NAYAN/"/>
    
      <category term="CI/CD" scheme="https://nayan.co/tags/CI-CD/"/>
    
      <category term="Jersey" scheme="https://nayan.co/tags/Jersey/"/>
    
      <category term="MAVEN" scheme="https://nayan.co/tags/MAVEN/"/>
    
      <category term="NAYANINDIA" scheme="https://nayan.co/tags/NAYANINDIA/"/>
    
  </entry>
  
  <entry>
    <title>Quick guide for dynamic feature delivery using android application bundle</title>
    <link href="https://nayan.co/Android/Dynamic-feature-deployment-in-android/"/>
    <id>https://nayan.co/Android/Dynamic-feature-deployment-in-android/</id>
    <published>2020-08-12T10:00:00.000Z</published>
    <updated>2020-09-23T05:01:32.390Z</updated>
    
    <content type="html"><![CDATA[<p>With Google Play’s Dynamic Delivery, your app can download dynamic feature modules on demand to devices running Android 5.0 (API level 21) and higher. This helps reducing initial apk size that user need to down first time.</p><p>It has been observed that not all user uses all features of an mobile application. Hence this make sense that only the bare minimum functional feature to be present in initial apk which can be described as core funcitionality of your application.</p><p><strong>Note : For every 6 MB increase to an apk size, it has been observed that install rate deduces by 1 %.</strong></p><p>Considering this, we should use dynamic feature delivery aproach to reduce initial apk size, and if need those features can be downloaded on demand.</p><p><img src="/blog/Android/Dynamic-feature-deployment-in-android/dynamic_feature_module_base_image.png" alt="Dynamic Feature Module"></p><p>Initially, the Google Play Store pushes only the code and resources needed for base module to the device, which is <strong>app</strong> module. For the rest of the modules, Your app simply needs to call APIs in the Play Core Library to download and install those modules as required, on demand for your Android Apps.</p><h2 id="Why-you-should-be-considering-this"><a href="#Why-you-should-be-considering-this" class="headerlink" title="Why you should be considering this?"></a>Why you should be considering this?</h2><p>The benefit of split APKs is the ability to break up a monolithic APK—that is, an APK that includes code and resources for all features and device configurations your app supports—into smaller, discrete packages that are installed on a user’s device as required.</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>In an order to implement dyanmic feature delivery, you might need to update your application structure to extract out code of an existing feature. </p><p>If you are setting up a new project then, you can start right away.</p><p>Add below mentioned dependency in <strong>app/build.gradle</strong> file</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/build.gradle</span></span><br><span class="line">implementation <span class="string">'com.google.android.play:core:1.8.0'</span></span><br></pre></td></tr></table></figure><p>Create a new <strong>dynamic feature module</strong> from menu. Let’s name it <strong>New_Feature</strong>.</p><p>This <strong>“New Feature”</strong> just like your <strong>“app module”</strong> containing activities, resources and other library in it’s <strong>build.gradle</strong> file. The only different is, it uses “dynamic feature as plugin” and has <strong>“app”</strong> as module dependency. Meaning it inherits everything from <strong>app module</strong>.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// New_Feature/build.gradle</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.dynamic-feature'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">':app'</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Before you try to open up any activity or try to call any utility function or code from <strong>New_Feature</strong>, you need download by executing below mentioned code from calling calling activity.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installNew_FeatureModule</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Get a reference to Split APK Install Manager</span></span><br><span class="line">    splitInstallManager = SplitInstallManagerFactory.create(App.getInstance());</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// Code to download New_Feature on demand</span></span><br><span class="line">    SplitInstallRequest request = SplitInstallRequest.newBuilder()</span><br><span class="line">            .addModule(<span class="string">"New_Feature"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    splitInstallManager.startInstall(request)</span><br><span class="line">            .addOnSuccessListener(integer -&gt; &#123;</span><br><span class="line">                  Toast.makeText(DashboardActivity.<span class="keyword">this</span>,</span><br><span class="line">                            <span class="string">"New Feature installed"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">             &#125;)</span><br><span class="line">            .addOnFailureListener(e -&gt; &#123;</span><br><span class="line">                    Toast.makeText(DashboardActivity.<span class="keyword">this</span>,</span><br><span class="line">                            <span class="string">"unable to download New feature"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To launch any activity from <strong>New_Feature</strong>, need to pass full class name prefixed with package name like</p><p><strong>com.example.New_Feature.TestActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Launching Test activity of New Feature module from App module</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">launchTestActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">       i.setClassName(BuildConfig.APPLICATION_ID, <span class="string">"com.example.New_Feature.TestActivity"</span>);</span><br><span class="line">       startActivity(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you can see, implementing dynamic feature for a new project is quiet easy and simple. You should try it out for your next project. Also If you want to try out for one of your existing projects, you can but there is an effort involved in decoupling of your features.</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><p>Read more about <a href="https://developer.android.com/guide/playcore/dynamic-delivery" target="_blank" rel="noopener">Dynamic Delivery</a></p></li><li><p>Learn how to <a href="https://developer.android.com/guide/app-bundle/dynamic-delivery#create_dynamic_feature" target="_blank" rel="noopener">restructure</a> your project for dynamic delivery </p></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><p>Read here to know more about <a href="http://blog.nayan.co/Android/Android-Testing-Strategy/" target="_blank" rel="noopener">Android Testing Strategy</a></p></li><li><p>Checkout To integrate <a href="http://blog.nayan.co/Android/sharing-modules-across-android-apps/" target="_blank" rel="noopener">Paytm Gateway Integration</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With Google Play’s Dynamic Delivery, your app can download dynamic feature modules on demand to devices running Android 5.0 (API level 21
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="JAVA" scheme="https://nayan.co/tags/JAVA/"/>
    
      <category term="Android Architecture" scheme="https://nayan.co/tags/Android-Architecture/"/>
    
      <category term="App Bundle" scheme="https://nayan.co/tags/App-Bundle/"/>
    
      <category term="Dynamic Feature" scheme="https://nayan.co/tags/Dynamic-Feature/"/>
    
      <category term="Puneet" scheme="https://nayan.co/tags/Puneet/"/>
    
  </entry>
  
  <entry>
    <title>How to recognize Emotions using deep learning?</title>
    <link href="https://nayan.co/AI/emotion-recognition-sagar/"/>
    <id>https://nayan.co/AI/emotion-recognition-sagar/</id>
    <published>2020-08-06T14:16:00.000Z</published>
    <updated>2020-09-23T05:01:32.482Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://neurohive.io/wp-content/uploads/2018/12/labeled-images.57bd-e1547550772626.jpg" alt="Emotions"></p><p>Emotion Recognition is used for categorizing the emotions into one of the 6 emotions through the images of face. Intially viola jones or other face detection algorithm is used for detecting the faces. Preprocessing is also used for standardizing the images into same sizes.</p><p>Facial Feature extraction is used in a number of applications including emotion detection. In the following approach various popular feature descriptors, including Gabor features, HOG, DWT were computed. We have fused features using Multiview Distance Metric Learning (MDML) which<br> utilizes complementary features of the images to extract every known detail while eliminating the redundant   features.   Moreover   MDML  maps   the   features   extracted   from   the   dataset   to   higher discriminative space. The features belonging to the same class are brought closer and those that are from different classes are forced away by the MDML thereby increasing the accuracy of the classifier employed. CK+ Dataset has been used to conduct the experiments. Experimental results<br>represent the efficacy of the method is 93.5% displaying the potential of the recommended manner.</p><p>The human facial expressions contain clues to the emotional state of a person. Computation of emotion   of  a  human  through   facial  expression  has  been   a  central  topic  of  Human   Computer Interaction (HCI) research and a concern for researchers. The machines can utilize an emotion detection tool to understand the human emotions better and respond accordingly. Facial Expressions have been analyzed and put to use by various researchers such as in [6] the pain level can be recognized by detecting the facial expression. It can be used in case of patients who are mute or are not able to speak because of a disorder. [4] judges the concentration level of a viewer watching an advertisement. It has been employed for detecting various mental disorders such as depression and anxiety in [6].</p><p>As Paul Ekman showed in [1], the emotions are universally expressed in the same way regardless of the culture, nationality etc. Subtlety, variance of facial expression and complex nature of emotion further complicate the process. Six emotions have been defined by [1] in his paper. They are happy, Anger, Sad, Surprise, disgust and fear. Emotion detection is accomplished in three basic steps.</p><p>Firstly, the images are preprocessed and a high quality facial image is extracted from the original image from the dataset.</p><p>Secondly, feature descriptors are applied to the image for feature extraction. After the dimension reduction by a dimension reduction algorithm such as PCA, LDA, etc a classifier is used for classifying the image into one of emotion.</p><p>Since the Extended Cohn Kanade Dataset used is free from illumination variance, occlusion and head pose are some of the major concerns in many other datasets results shown are superior than most of the previous methods.</p><p>The  proposed  approach  is  novel  in detecting  and computing  the  emotions  through  Multiview Distance Metric Learning (MDML) introduced in [8]. The similar looking data from different classes are often misclassified. MDML helps to reduce this misclassification and fuses the results of various feature descriptors and extracts complementary features from them.</p><p>Moreover MDML maps the features extracted from the dataset to higher discriminative space. The features having affinity to the same emotion are brought closer while those having affinity to different emotion classes are moved as far as possible. The classifier is trained using this data.</p><ul><li>A. Emotion recognition </li></ul><p>The primary step in emotion detection is the localization of the face. CK+ dataset has been recorded in a controlled having illumination invariance and free from any occlusions. Hence, the facial image is always present in the image and priorly the face’s global position is known. Since wide variations are present in the scale and yaw, pitch, roll of the face, accurately localizing the face in different images is a very challenging task. The various obstructions and hindrances such as glasses and facial hair further complicates the task [1].</p><p>Viola-Jones [2] found an efficient answer for localizing the face. This method is based on AdaBoost learning and Haar-like features. Earlier it was developed for finding and detecting objects in an image [3]. It granted fast object detection for the task of real time usage. Keeping in mind the accuracy of the method, it is used for face localization.</p><ul><li>B. Feature Descriptor</li></ul><p>Feature extraction indicates deriving pertinent data from the preprocessed, gray scaled images from dataset, that will be employed for the intent of emotion detection. It is a defying task due to the above mentioned reasons. A comprehensive method is to derive descriptors from images is to use Log-Gabor filters as done in [2] by nominating the random bandwidth for making the Log-Gabor filter. Another attainable answer is to use model based method for the facial expression recognition   [5]. The  authors  in   [5]  constructed   a  light  source  and   subject  independent   global representation of expressions by discovering of the set of 322 image sequences in CK+ database. [7] utilizes LBP features and finds the emotion.</p><ul><li>C. Multiview Distance Metric Learning</li></ul><p>Motivated   by  the   discriminative   mapping   and   better   results   of   MDML  we  are   using   MDML proposed by [8] which attracts the features of the same class together and pushes away that belong to the different class. The data is then mapped to higher discriminative space and complementary features are extracted from the dataset. This ensures all the details of the image are taken into account. MDML pulls the similar data together and pushes away the different data away. In [8] the<br>authors used MDML for Pain intensity classification.</p><ul><li>D. Facial Expression Classification</li></ul><p>Finally, after being mapped to higher discriminative space features are enforced into the classifier for identification of the six emotions. The most sought after classifiers include template matching, rule based classifier, neural networks and support vector machines (SVM). In SVM, a hyperplane is constructed with ample distance among the different emotion classes during the training phase.</p><p>While during test phase, the trained SVM model classifies the test image to one of the emotion classes. In [7] the authors utilize SVM with linear kernel for expression classification. There are six basic emotion classes which are Anger, Disgust, Happy, Sad, Surprise and Fear for analysis of proposed algorithm.</p><p>The author of this blog is working currently with <a href="https://www.nayan.co" target="_blank" rel="noopener" >Nayan</a></p><ul><li><p>Bibliography</p></li><li><p>[1] Ekman, P., &amp; Friesen, W. V. (1971). Constants across cultures in the face and emotion. Journal of personality and social psychology, 17(2), 124.</p></li><li><p>[2]   L.   S.   Chen.   Joint   processing   of   audio-visual   information   for   the   recognition   of   emotional expressions in human-computer interaction. PhD thesis, University of Illinois at Urbana<br>Champaign, Dept. of Electrical Engineering, 2000.</p></li><li><p>[3] Viola, Paul, and Michael Jones. “Rapid object detection using a boosted cascade of simple features.” Computer Vision and Pattern Recognition, 2001. CVPR 2001. Proceedings of the 2001 IEEE Computer Society Conference on. Vol. 1. IEEE, 2001.</p></li><li><p>[4] S. Lajevardi and M. Lech, “Facial expression recognition from imagesequences using optimized feature selection,” Image and Vision Computing New Zealand, 2008. IVCNZ 2008. 23rd International Conference.pp. 1–6, 2008. J. T. Cacioppo and L.G. Tassinary. Inferring psychological significance from physiological signals. American Psychologist, 45:16–28, January 1990.</p></li><li><p>[5] Kaltwang, S., Rudovic, O., &amp; Pantic, M. (2012). Continuous pain intensity estimation from facial expressions. Advances in visual computing, 368-377</p></li><li><p>[6] Rathee, N., Vaish, A., &amp; Gupta, S. (2016, April).  Adaptive  system to learn and  recognize emotional   state   of   mind.   In   Computing,   Communication   and   Automation   (ICCCA),   2016 International Conference on (pp. 32-36). IEEE.</p></li><li><p>[7]   Rathee,   N.,   &amp;   Ganotra,   D.   (2016).   Multiview   Distance   Metric   Learning   on   facial   feature descriptors for automatic pain intensity detection. Computer Vision and Image Understanding, 147, 77-86.</p></li><li><p>[8] Dalal, N., &amp; Triggs, B. (2005, June). Histograms of oriented gradients for human detection. In Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on (Vol. 1, pp. 886-893). IEEE.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://neurohive.io/wp-content/uploads/2018/12/labeled-images.57bd-e1547550772626.jpg&quot; alt=&quot;Emotions&quot;&gt;&lt;/p&gt;
&lt;p&gt;Emotion Recognit
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="AI" scheme="https://nayan.co/tags/AI/"/>
    
      <category term="Emotion Recognition" scheme="https://nayan.co/tags/Emotion-Recognition/"/>
    
      <category term="HCI" scheme="https://nayan.co/tags/HCI/"/>
    
  </entry>
  
  <entry>
    <title>How to host any port to entire internet on any machine?</title>
    <link href="https://nayan.co/AI/jupyter-hosting/"/>
    <id>https://nayan.co/AI/jupyter-hosting/</id>
    <published>2020-07-31T08:00:00.000Z</published>
    <updated>2020-09-23T05:01:32.482Z</updated>
    
    <content type="html"><![CDATA[<br><p><img src="/blog/AI/jupyter-hosting/nmap_guide.png" alt="Banner"></p><p>In this short blog post, I will explain a great trick to expose various services like Jupyter-notebook, tensorboard, etc. to the entire internet. We generally use it at <a href="http://nayan.co.in" target="_blank" rel="noopener">Nayan</a></p><p>Before following the steps I want you to understand some fundamentals behind the hosting of different services.</p><h3 id="Some-Basics"><a href="#Some-Basics" class="headerlink" title="Some Basics:"></a><strong>Some Basics:</strong></h3><p>Whenever we host some services on a local server having URLs like (<a href="https://localhost:8888" target="_blank" rel="noopener">https://localhost:8888</a> or <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a>) they are behind a NAT or firewall of our computer(Most of the hackers work to breach these).</p><p><img src="/blog/AI/jupyter-hosting/banner.jpg" alt="Firewall"></p><p>To jump over the firewall, we will use <a href="http://ngrok.com" target="_blank" rel="noopener">ngrok</a>.</p><h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok:"></a>Ngrok:</h3><p>Ngrok allows you to expose a web server running on your local machine to the internet. Just tell ngrok what port your web server is listening on.<br>something like this:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*yyRGRBHIsXRHw_8LfL8CAA.png" alt="Ngrok flowchart"></p><h3 id="Steps-to-host-Jupyter-Notebook-on-AWS-EC2"><a href="#Steps-to-host-Jupyter-Notebook-on-AWS-EC2" class="headerlink" title="Steps to host Jupyter-Notebook on AWS EC2:"></a><strong>Steps to host Jupyter-Notebook on AWS EC2:</strong></h3><ol><li><p>First, we need to install tmux for running processes(jupyter in our case) in background and jupyter notebook.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r</span><br></pre></td></tr></table></figure></li></ol><p>2) Download ngrok using</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget [https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip](https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip)</span><br></pre></td></tr></table></figure><p>3) Unzip to install ngrok</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip ngrok.zip</span><br></pre></td></tr></table></figure><p>4) Create an account on <a href="http://ngrok.com" target="_blank" rel="noopener">ngrok</a> and get authtoken.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*C36pyfvzwZnTXSieoHNVEw.png" alt="Authtoken"></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok authtoken &lt;your_auth_token&gt;</span><br></pre></td></tr></table></figure></code></pre><ol start="5"><li><p>Now on tmux we will run jupyter-notebook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-notebook --ip=0.0.0.0 --allow-root ```</span><br></pre></td></tr></table></figure></li><li><p>Host the noted port using ngrok. For my case it is 8890</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok http 8890</span><br></pre></td></tr></table></figure></li></ol><p>Also, you can make a config file and can host multiple ports using the same account as mentioned <a href="https://ngrok.com/docs#config" target="_blank" rel="noopener">here</a>.</p><ol start="7"><li>Now note the URL you got on ngrok screen.</li></ol><p><img src="https://cdn-images-1.medium.com/max/2000/1*QLItoFPpvwq7VNYMVjEqYw.png" alt="Ngrok link"></p><ol start="8"><li>Cheers and now hit the URL as many times as you can to access your favorite jupyter notebook.</li></ol><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h3><p>In this cool blogpost, we understood to host jupyter notebook on the local machine. We can host other services like tensorboard or anything you want.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/blog/AI/jupyter-hosting/nmap_guide.png&quot; alt=&quot;Banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this short blog post, I will explain a great trick to ex
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="AI" scheme="https://nayan.co/tags/AI/"/>
    
      <category term="Deep learning" scheme="https://nayan.co/tags/Deep-learning/"/>
    
      <category term="jupyter" scheme="https://nayan.co/tags/jupyter/"/>
    
      <category term="ngrok" scheme="https://nayan.co/tags/ngrok/"/>
    
      <category term="Kunal Goyal" scheme="https://nayan.co/tags/Kunal-Goyal/"/>
    
  </entry>
  
  <entry>
    <title>How to apply Proguard in an android application (Code obfuscation, shrinking, optimization)</title>
    <link href="https://nayan.co/Android/Applying-Proguard-in-an-android-application/"/>
    <id>https://nayan.co/Android/Applying-Proguard-in-an-android-application/</id>
    <published>2020-07-27T18:40:48.000Z</published>
    <updated>2020-09-23T05:01:32.386Z</updated>
    
    <content type="html"><![CDATA[<p>To make an application is not good enough, but it also needs to make secure and optimize. It’s the basic needs of an application.</p><p>To make your app as small as possible, you should enable shrinking in your release build to remove unused code and resources. When enabling shrinking, you also benefit from obfuscation, which shortens the names of your app’s classes and members, and optimization, which applies more aggressive strategies to further reduce the size of your app.</p><p>ProGuard is a tool used to do the following in an Android application:</p><h2 id="Minify-the-code"><a href="#Minify-the-code" class="headerlink" title="Minify the code"></a>Minify the code</h2><p>Detects and safely removes unused classes, fields, methods, and attributes from your app and its library dependencies</p><h2 id="Obfuscate-the-code"><a href="#Obfuscate-the-code" class="headerlink" title="Obfuscate the code"></a>Obfuscate the code</h2><p>Shortens the name of classes and members, which results in reduced DEX file sizes.</p><h2 id="Optimize-the-code"><a href="#Optimize-the-code" class="headerlink" title="Optimize the code"></a>Optimize the code</h2><p>Inspects and rewrites your code to further reduce the size of your app’s DEX files.</p><p><img src="/blog/Android/Applying-Proguard-in-an-android-application/flow_diagram.jpg" alt="Flow diagram for applying proguard"></p><p>To enable shrinking, obfuscation, and optimization, include the following in your project-level build.gradle file.</p><p>In that data class, we will handle some sessions related tasks (check session is active or not, update session etc.). A session will have two values start time and end time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources true</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(</span><br><span class="line">              &apos;proguard-android-optimize.txt&apos;),</span><br><span class="line">              &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While enabling proguard in your application there are some rules , that should be considered. Do not forget to add the Proguard rules in proguard-rules.pro file for any library that you have included in your project.</p><p>Like this for classes, also can apply for members and fields</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class &lt;className with pakage&gt;.** &#123; *; &#125;</span><br></pre></td></tr></table></figure><p>For Warning : You need to take a look on stacktrace to find which classes gives those warnings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-dontwarn &lt;classes_name&gt;</span><br><span class="line">-dontwarn java.nio.file.*</span><br></pre></td></tr></table></figure><h2 id="Some-stats-related-to-APK-size"><a href="#Some-stats-related-to-APK-size" class="headerlink" title="Some stats related to APK size"></a>Some stats related to APK size</h2><p><img src="/blog/Android/Applying-Proguard-in-an-android-application/stats.png" alt="Some stats before and after applying proguard"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noopener">https://developer.android.com/studio/build/shrink-code</a></p><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Android/App-Heartbeat/">App-Heartbeat</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To make an application is not good enough, but it also needs to make secure and optimize. It’s the basic needs of an application.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="Diwakar Singh" scheme="https://nayan.co/tags/Diwakar-Singh/"/>
    
      <category term="proguard" scheme="https://nayan.co/tags/proguard/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="shrinking" scheme="https://nayan.co/tags/shrinking/"/>
    
      <category term="obfuscation" scheme="https://nayan.co/tags/obfuscation/"/>
    
      <category term="optimization" scheme="https://nayan.co/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Deploying a Rails application to a Docker container</title>
    <link href="https://nayan.co/Rails/rails-docker/"/>
    <id>https://nayan.co/Rails/rails-docker/</id>
    <published>2020-07-25T08:00:00.000Z</published>
    <updated>2020-09-23T05:01:32.518Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Rails/rails-docker/rails-docker.jpg" class="" title="Rails and Docker" alt="Rails and Docker"><p>Docker has gained immense popularity over the past few years as a tool for depploying your applications to production. It allows you to package you application and all of its dependencies in an image, ready to be deployed anywhere.</p><p>Deploying a Rails app to Docker can be a bit tricky, so here’s a handy step by step guide.</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ul><li>Install Docker</li><li>Create Dockerfile</li><li>Create docker-compose.yml</li><li>Build the image</li><li>Deploy</li></ul><h4 id="Installing-Docker"><a href="#Installing-Docker" class="headerlink" title="Installing Docker"></a>Installing Docker</h4><p>If you are on Mac or Windows, its best to install <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop</a> which installs all the necessary tools for you.</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>It all starts with the Dockerfile. This is where you define how your image needs to be built.</p><p>TLDR;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM ruby:2.5.3</span><br><span class="line"></span><br><span class="line">RUN apt-get update -qq &amp;&amp; apt-get install -y nodejs postgresql-client</span><br><span class="line"></span><br><span class="line">RUN mkdir /src</span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line">ENV BUNDLER_VERSION=2.1.4</span><br><span class="line">RUN gem install bundler -v 2.1.4</span><br><span class="line"></span><br><span class="line">COPY Gemfile Gemfile.lock ./</span><br><span class="line">RUN bundle config build.nokogiri --use-system-libraries</span><br><span class="line">RUN bundle install</span><br><span class="line"></span><br><span class="line">COPY . ./</span><br><span class="line"></span><br><span class="line">#COPY entrypoint.sh /usr/bin/</span><br><span class="line">RUN chmod +x entrypoint.sh</span><br><span class="line">ENTRYPOINT [&quot;./entrypoint.sh&quot;]</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>You start by choosing the base image with your project Ruby version, and install the required libraries on the next line.</p><p>Then you create the source directory for your code and set it as your working directory.</p><p>Next, set the bundler version to the one from your Gemfile and install it.</p><p>Copy the Gemfile and Gemfile.lock, and install all dependencies.</p><p>Once the dependencies are installed, we copy the entire current directory to the image.</p><p>Finally, we define an entrypoint for the image. This is a script that will be run when the image is first started. And then we expose the port on which our app will run.</p><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>With the Dockerfile, we can build our application image. But it depends on other services as well, such as a database or maybe Redis. This is where Docker Compose comes into the picture.</p><p>We’ll create another file docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=password</span><br><span class="line">    volumes:</span><br><span class="line">      - ./tmp/db:/var/lib/postgresql/data</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    command: bash -c &quot;rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b &apos;0.0.0.0&apos;&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/src</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br></pre></td></tr></table></figure><p>We have two service, one for the database and one for the application. By defining the web service to be dependent on the db service, we tell Compose to start db before the web service.</p><h4 id="Entrypoint"><a href="#Entrypoint" class="headerlink" title="Entrypoint"></a>Entrypoint</h4><p>Finally, we define the entrypoint file that describes the tasks to be run when starting a new image.</p><p>entrypoint.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># Remove a potentially pre-existing server.pid for Rails.</span><br><span class="line">rm -f /src/tmp/pids/server.pid</span><br><span class="line"></span><br><span class="line"># Database migration</span><br><span class="line">RUN bundle exec rails db:migrate</span><br><span class="line"></span><br><span class="line"># Then exec the container&apos;s main process (what&apos;s set as CMD in the Dockerfile).</span><br><span class="line">bundle exec rails s -b 0.0.0.0</span><br></pre></td></tr></table></figure><p><em>One thing to note is that you should not have both the CMD and entrypoint in Dockerfile. Took me a few many hours to figure this out.</em></p><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><p>To build the container, run the following command,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose build</span><br></pre></td></tr></table></figure><h4 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h4><p>The app can be run locally by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run web rails new . --force --no-deps --database=postgresql</span><br></pre></td></tr></table></figure><p>You can upload the image to a registry service such as GCR. First tag the image, then push it to GCR,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;image-name&gt;:latest gcr.io/&lt;organization&gt;/&lt;image-name&gt;:latest</span><br><span class="line">docker push gcr.io/&lt;organization&gt;/&lt;image-name&gt;:latest</span><br></pre></td></tr></table></figure><p>And you are done. You can now deploy this image to GKE or any other Kubernetes engine.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Rails/rails-docker/rails-docker.jpg&quot; class=&quot;&quot; title=&quot;Rails and Docker&quot; alt=&quot;Rails and Docker&quot;&gt;

&lt;p&gt;Docker has gained immense
      
    
    </summary>
    
    
      <category term="Rails" scheme="https://nayan.co/categories/Rails/"/>
    
    
      <category term="Ruby" scheme="https://nayan.co/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://nayan.co/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>How to check whether your product causes potential patent infringement</title>
    <link href="https://nayan.co/IP-Patents/potential-patent-infringement/"/>
    <id>https://nayan.co/IP-Patents/potential-patent-infringement/</id>
    <published>2020-07-24T18:16:09.000Z</published>
    <updated>2020-09-23T05:01:32.514Z</updated>
    
    <content type="html"><![CDATA[<br><p><img src="/blog/IP-Patents/potential-patent-infringement/banner.jpg" alt="Nayan IP"></p><!-- source/\_posts/potential-patent-infringement/banner.jpg --><p>Let’s imagine that as an entrepreneur or a product manager, you are going to launch a product (or service) commercially but you do not know what is patent infringement and how to avoid it (<a href="https://www.patentgrasp.com/2020/07/originally-published-on-www.html" target="_blank" rel="noopener">this article </a> explains what are patents and how they work). For anyone facing this situation, it is important to understand the meaning of patent infringement, know if you are infringing on a patent and use necessary remedies to avoid infringement, in early stages of your product launch. You may want to take such preventive measures because if patent infringement is proven after your product hits the market, you may need to pay a share of your revenues (called ‘royalty’) to the patent owner who alleges infringement. This is especially important for start-ups since in many cases, the company’s business model is largely based on these products and if they were to get stuck in patent infringement, it can be damaging for the entire business.</p><p>It, therefore, makes sense to take such risks into account before the product hits the market. To find whether your product infringes on a patent, let us first understand what is patent infringement. As we now already know, an important purpose of getting a patent is to protect an invention by excluding others from making it, using it, selling it, importing it or offering it for sale without the patent owner’s consent. Any such exploitation of the patented invention without the consent of the patent owner is called patent infringement. As an example, let’s assume that you have a technical solution or a product that you are going to commercialise. In this event, someone else with a patent on that product (or your technical solution) could approach you to solicit royalty (licensing fee) from you, since you are exploiting their patent without their consent.</p><p>Well, such a situation cannot always be completely eliminated but its probability can be minimized to a great extent if, before launching your product, you can conduct (or get a patent professional to conduct) a thorough patent search (known as a Freedom-to-operate search in IP world). The objective of doing so is to find patents which have claims that directly map to the features of your product. This precautionary effort can make you aware at early stages of your product launch, regarding any patent risks that you may face later on and allows you sufficient time to take necessary precautions.</p><p>Now we know that FTO search is used to find any third-party patents on which your product may infringe. An important aspect to remember here is that patent infringement occurs when a product feature directly maps to the ‘claims’ of a granted patent. For example, the very popular feature of “slide to unlock” on smartphones directly maps to this <a href="https://patents.google.com/patent/US8046721B2/en" target="_blank" rel="noopener">patent</a> (refer claim 1 in the linked patent) and thus, this feature is considered infringing on this patent.</p><p>Now that you know what is patent infringement and how it can affect you in the above situation, it logically follows that you would want to review every patent that is a potential risk and take precautionary measures accordingly. The simplest starting approach you can take as a beginner is to use this <a href="https://www.patentgrasp.com/2020/07/how-to-search-on-google-patents-google.html" target="_blank" rel="noopener">article</a> in conjunction with the points covered below to search for patents by using relevant keywords (or patent classes).</p><ol><li><p><strong>Patent is a territorial right</strong> - Any patent in any jurisdiction is an enforceable right that can be exercised only within the confines of that jurisdiction. For example, a product launched in U.S. (or any other country) cannot be considered infringing on a patent granted in Australia (or any country). This means if a patent owner has a patent granted in Australia, they can only enforce their patent within Australia and not outside. In fact, this is exactly why patent owners file patents in different jurisdictions separately and there is no such thing as global patent. Therefore, while searching you need to only stick to the patents that are granted in jurisdictions of your interest. This saves time and effort during your search.</p></li><li><p><strong>Independent claims must map entirely</strong> - An essential criteria of patent infringement is that at least one independent claim (any one) must map to the product features. If any of the dependent claims map to the product features without the independent claims getting mapped, it is not considered patent infringement. Another aspect to consider is that each feature of the independent claim must map to the product, for infringement to occur. If you refer to the ‘slide to unlock’ patent above, you will notice that the independent claim 1 of the patent maps entirely to the actual slide to unlock feature you use on your smartphone to unlock the phone. Moving on, if as a product owner, you can ascertain that any feature of the independent claim does not map, it is not considered patent infringement (but this can be subjective).</p></li><li><p><strong>Granted patent</strong> - Since only ‘granted’ patents can be enforced as per patent law in any country, any legal action can be taken by a third-party against you (as an infringing product owner) only if their patent is granted. Therefore, you should pay attention to the legal status of a patent before concluding that your product infringes on a patent. If a patent application is yet to be granted and its claims map to your product, it is likely that the scope of its claims would change during patent prosecution (and diverting from your product scope. However, you can watchlist such patents to track any change in their scope until (and if!) they get granted. This may affect your product strategy. If the patent is abandoned or expired (even after grant), you need not be concerned and can discard that particular patent from your consideration.</p></li><li><p><strong>Exhaustive search</strong>- A great aspect of patents is that they are published documents. This means that you will find most of the patents in public domain at one or another search tool. To make the search exhaustive though, you should try multiple search tools including Google Patents, Freepatentsonline, USPTO search tool, Espacenet, Patentscope and so on. If the budget permits, you can even try out a paid search tool as well for better patent coverage where high stakes are involved. However, no search completely eliminates the risk because the search tools have coverage limitations with respect to the jurisdictions and the number of patents covered. Additionally, most patent offices globally, publish patent applications after a few months from filing. Therefore, it is likely that at the time you are searching, a target patent has not been published and thus, could not be found but it does not mean that there is no infringement. However, doing an exhaustive search and repeating it periodically can minimize the risk of infringement to a great extent.</p></li></ol><p>All the above points translate to shortlisting at least one <strong>granted patent</strong>, which has <strong>at least one independent claim</strong> that <strong>completely maps</strong> to the product in consideration, in a jurisdiction of interest (where the product is going to get launched).</p><p>During your review of the patents that show up during search, you can shortlist patents using the above criteria and find the most relevant ones based on their claim features. These are the patents that pose patent infringement risk to your product. Remember that merely adding new features to the product or believing that you already have additional features in the product may not help you escape infringement as long as the infringing features are already present in the product.</p><p>Once you have done the above exercise, study the patents closely to find out any features in the independent claims that <strong>do not map</strong>. If that is not possible and you are stuck with a granted (enforceable) patent that does map to your product, you can try to <strong>modify your product features</strong> such that the product does not infringe on the shortlisted patent(s). Alternatively, you can approach the patent owner to strike a deal to license the patented invention. There are many more remedies available but I would avoid digressing from the scope of this article.</p><p>Like analysis of all market risks before launching a product, patent infringement risk also should be given high importance and all necessary due diligence should be done to minimise it.</p><p>If you are new to patents or are trying to learn this field in greater detail, do subscribe to this blog to get notified on similar articles on patent fundamentals.</p><h2 id="IP-focus-at-Nayan-Technologies"><a href="#IP-focus-at-Nayan-Technologies" class="headerlink" title="IP focus at Nayan Technologies"></a>IP focus at <a href="https://nayan.co">Nayan</a> Technologies</h2><p>Nayan Technologies is a new-age start-up focussed on Artificial Intelligence-based Intelligent Mobility. At Nayan, we strongly believe in creating and expanding our Intellectual Property assets. Nayan Technologies has more than 40 patent applications filed across the world in jurisdictions such as USA, Europe, PCT, Middle-East (GCC), Canada, India, Singapore, Indonesia and Australia with 4 patent grants already received across USA, Australia and India. These patents protect various facets of the Intelligent Mobility framework that Nayan Technology works on. To avoid external patent risks, Nayan applies a two-pronged strategy – first, to create, expand and diversify its own patent portfolio and second, to be aware of third-party patents from which patent risk is anticipated and take appropriate strategies accordingly. While innovation one of the core strengths at Nayan, we also believe in ensuring that Nayan’s innovation does not wilfully infringe on third-party patents, by following the above mentioned practices.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/blog/IP-Patents/potential-patent-infringement/banner.jpg&quot; alt=&quot;Nayan IP&quot;&gt;&lt;/p&gt;
&lt;!-- source/\_posts/potential-patent-infri
      
    
    </summary>
    
    
      <category term="IP-Patents" scheme="https://nayan.co/categories/IP-Patents/"/>
    
    
      <category term="Patents" scheme="https://nayan.co/tags/Patents/"/>
    
      <category term="Infringement" scheme="https://nayan.co/tags/Infringement/"/>
    
      <category term="Nayan IP" scheme="https://nayan.co/tags/Nayan-IP/"/>
    
      <category term="Nayan data protection" scheme="https://nayan.co/tags/Nayan-data-protection/"/>
    
  </entry>
  
  <entry>
    <title>How to implement Android RecyclerView Drag and Drop feature seamlessly</title>
    <link href="https://nayan.co/Android/android-recycler-view-drag-and-drop/"/>
    <id>https://nayan.co/Android/android-recycler-view-drag-and-drop/</id>
    <published>2020-07-07T12:41:05.000Z</published>
    <updated>2020-09-23T05:01:32.470Z</updated>
    
    <content type="html"><![CDATA[<p>We some times want to implement Drag and Drop feature OR Swip to dismiss feature on our recycler view. For implementing that we usually go for a library that already have this implemented, and at this point of time most of those libraries are using old APIs and complex logic to handle the things. But now we have simple and better ItemTouchHelper in the Android Support Library itself, so now we don’t need those good old libraries. Lets start implementing.</p><p><img src="/blog/Android/android-recycler-view-drag-and-drop/drag-and-drop.png" alt="Drag n Drop"></p><h2 id="1-Lets-create-an-ItemTouchHelper-Callback"><a href="#1-Lets-create-an-ItemTouchHelper-Callback" class="headerlink" title="1. Lets create an ItemTouchHelper.Callback"></a>1. Lets create an <code>ItemTouchHelper.Callback</code></h2><p>We’ll create an <code>ItemTouchHelper.Callback</code> to handle the events.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMovementFlags</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="comment">// Specify the directions of movement</span></span><br><span class="line">            <span class="keyword">return</span> makeMovementFlags(<span class="literal">null</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMove</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            target: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// Notify your adapter that an item is moved from x position to y position</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isLongPressDragEnabled</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// true: if you want to start dragging on long press</span></span><br><span class="line">            <span class="comment">// false: if you want to handle it yourself</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSwiped</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>, direction: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSelectedChanged</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>?, actionState: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState)</span><br><span class="line">            <span class="comment">// Hanlde action state changes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearView</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.clearView(recyclerView, viewHolder)</span><br><span class="line">            <span class="comment">// Called by the ItemTouchHelper when the user interaction with an element is over and it also completed its animation</span></span><br><span class="line">            <span class="comment">// This is a good place to send update to your backend about changes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-Set-directions"><a href="#2-Set-directions" class="headerlink" title="2. Set directions"></a>2. Set directions</h2><p>Add your movement flags for the directions you want to handle.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMovementFlags</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="comment">// Specify the directions of movement</span></span><br><span class="line">            <span class="keyword">val</span> dragFlags = ItemTouchHelper.UP or ItemTouchHelper.DOWN</span><br><span class="line">            <span class="keyword">return</span> makeMovementFlags(dragFlags, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-Update-Adapter"><a href="#3-Update-Adapter" class="headerlink" title="3. Update Adapter"></a>3. Update Adapter</h2><p>Tell your adapter about the positions updates of the items.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMove</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            target: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// Notify your adapter that an item is moved from x position to y position</span></span><br><span class="line">            yourAdapter.notifyItemMoved(viewHolder.adapterPosition, target.adapterPosition)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-Create-ItemTouchHelper"><a href="#4-Create-ItemTouchHelper" class="headerlink" title="4. Create ItemTouchHelper"></a>4. Create <code>ItemTouchHelper</code></h2><p>From <code>itemTouchHelperCallback</code> we’ll create an <code>ItemTouchHelper</code> object to attach RecyclerView to it.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> itemTouchHelper = ItemTouchHelper(itemTouchHelperCallback)</span><br></pre></td></tr></table></figure><h2 id="5-Attach-to-RecyclerView"><a href="#5-Attach-to-RecyclerView" class="headerlink" title="5. Attach to RecyclerView"></a>5. Attach to RecyclerView</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemTouchHelper.attachToRecyclerView(yourRecyclerView)</span><br></pre></td></tr></table></figure><p>By this time now you have Drag and Drop feature enabled in your RecyclerView you can just build the project and run the app.</p><p><img src="/blog/Android/android-recycler-view-drag-and-drop/drag_n_drop.gif" alt="Drag n Drop and Swipe feature"></p><h2 id="6-Handle-final-state"><a href="#6-Handle-final-state" class="headerlink" title="6. Handle final state"></a>6. Handle final state</h2><p>Now when you want to send and update to you backend about the new order of the items, then just override the <code>clearView</code> method of <code>itemTouchHelperCallback</code> and you are good to go.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearView</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.clearView(recyclerView, viewHolder)</span><br><span class="line">            <span class="comment">// Called by the ItemTouchHelper when the user interaction with an element is over and it also completed its animation</span></span><br><span class="line">            <span class="comment">// This is a good place to send update to your backend about changes</span></span><br><span class="line">            <span class="comment">// Your API call</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Make-it-working-with-SwipeRefreshLayout"><a href="#Make-it-working-with-SwipeRefreshLayout" class="headerlink" title="Make it working with SwipeRefreshLayout"></a>Make it working with <code>SwipeRefreshLayout</code></h2><p>Now comes a strange problem when you try to implement this feature in swipe refresh layout. The problem is, when you try to drag the item from bottom to top direction, then it will work, but when you try to drag from top to bottom, then it fails, as <code>SwipeRefreshLayout</code> intercepts the callback of dragging from top to bottom.</p><p>We just have to disable the <code>SwipeRefreshLayout</code>‘s swipe to refresh feature for the drag time and enable it back when the user has dropped the item to its final position.</p><p>So, lets override <code>onSelectedChanged</code> to handle this.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSelectedChanged</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>?, actionState: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState)</span><br><span class="line">            <span class="comment">// Hanlde action state changes</span></span><br><span class="line">            <span class="keyword">val</span> swiping = actionState == ItemTouchHelper.ACTION_STATE_DRAG</span><br><span class="line">            pullToRefresh.isEnabled = !swiping</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>That’s all you have to do for implementing Drag and Drop feature for your RecyclerView</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://medium.com/@gopalawasthi383/android-recyclerview-drag-and-drop-a3f227cdb641" target="_blank" rel="noopener">Android RecyclerView drag and drop</a></li><li><a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="noopener">Drag and Swipe with RecyclerView</a></li><li><a href="https://stackoverflow.com/a/32075806/5752113" target="_blank" rel="noopener">ItemTouchHelper and SwipeRefreshLayout (RecyclerView)</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Android/Android-Testing-Strategy/">Android Testing Strategy</a></li><li><a href="https://nayan.co/blog/Android/drawing-custom-paths-in-android/">How to draw custom paths/lines in Android usign PathEffect</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We some times want to implement Drag and Drop feature OR Swip to dismiss feature on our recycler view. For implementing that we usually g
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="ItemTouchHelper" scheme="https://nayan.co/tags/ItemTouchHelper/"/>
    
      <category term="Callback" scheme="https://nayan.co/tags/Callback/"/>
    
      <category term="RecyclerView" scheme="https://nayan.co/tags/RecyclerView/"/>
    
      <category term="Drag and Drop" scheme="https://nayan.co/tags/Drag-and-Drop/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
  </entry>
  
  <entry>
    <title>Youtube Data API in Angular app for realtime chanels video data</title>
    <link href="https://nayan.co/Web/angular-youtube/"/>
    <id>https://nayan.co/Web/angular-youtube/</id>
    <published>2020-06-21T16:36:18.000Z</published>
    <updated>2020-09-23T05:01:32.478Z</updated>
    
    <content type="html"><![CDATA[<br><p><img src="/blog/Web/angular-youtube/blog_banner.png" alt="Youtube data API in Angular app"></p><p>Facing issues getting data of your Youtube channel on your website? This blog is a guide demonstrating on how to integrate Youtube data API in your angular web application with few easy steps.</p><h2 id="YouTube-Data-API-v3"><a href="#YouTube-Data-API-v3" class="headerlink" title="YouTube Data API v3"></a>YouTube Data API v3</h2><p>The first step is to get the api key. By visiting <a href="https://developers.google.com/youtube/v3/getting-started" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/getting-started</a> you’ll find the procedures you need to get your authorization credentials.<br>In a nutshell, you need:</p><ol><li>Go to the Google Developers Console.</li><li>Select a project.</li><li>In the left sidebar, select APIs and authorization. In the list of APIs, make sure the status is ON for the YouTube Data API v3.</li></ol><p>After the project is created the next step is to register the HttpClientModule module in the main module (app.module.ts).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; HttpClientModule &#125; from &apos;@angular/common/http&apos;;</span><br></pre></td></tr></table></figure><p>And declare in imports:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">BrowserModule,</span><br><span class="line">AppRoutingModule,</span><br><span class="line">HttpClientModule,</span><br><span class="line">NgxSpinnerModule</span><br></pre></td></tr></table></figure><p>I’ll use the NGX-Spinner library to display a spinner while loading the videos.</p><p>Install the library with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ngx-spinner --save</span><br></pre></td></tr></table></figure><p>And declare the module in the imports, as per the code above.<br>We can now create a service to make calls to the Youtube API.</p><p>In the terminal, write:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng g service youtube</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; HttpClient &#125; from &apos;@angular/common/http&apos;;</span><br><span class="line">import &#123; map &#125; from &apos;rxjs/operators&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class YoutubeService &#123;</span><br><span class="line"></span><br><span class="line">  apiKey : string = &apos;YOUR-APIKEY-YOUTUBE&apos;;</span><br><span class="line"></span><br><span class="line">  constructor(public http: HttpClient) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    getVideosForChanel(channel, maxResults): Observable&lt;Object&gt; &#123;</span><br><span class="line">    let url = &apos;https://www.googleapis.com/youtube/v3/search?key=&apos; + this.apiKey + &apos;&amp;channelId=&apos; + channel + &apos;&amp;order=date&amp;part=snippet &amp;type=video,id&amp;maxResults=&apos; + maxResults</span><br><span class="line">    return this.http.get(url)</span><br><span class="line">      .pipe(map((res) =&gt; &#123;</span><br><span class="line">        return res;</span><br><span class="line">      &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We create an apiKey variable that stores the value of the API obtained in the first step.</p><p>Then we inject the HttpClient class into the constructor. It provides methods for performing HTTP requests.</p><p>Let’s implement a method that returns a list of videos. We name it getVideosForChanel(). We pass two arguments, the first is the channel ID. The second limit the number of videos.</p><p>We concatenate this information in the API URL, passing other parameters as the order (‘&amp; order = date), part = snippet that contains other properties that identify the title, the description, among others, and the type of resource (type = video).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let url = ‘https://www.googleapis.com/youtube/v3/search?key=&apos; + this.apiKey + ‘&amp;channelId=’ + channel + ‘&amp;order=date&amp;part=snippet &amp;type=video,id&amp;maxResults=’ + maxResults</span><br></pre></td></tr></table></figure><p>In the component class (app.component.ts), we declare an array for the result of the videos:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export class AppComponent &#123;</span><br><span class="line">videos: any[];</span><br></pre></td></tr></table></figure><p>In the constructor method, we inject the service created for requesting videos (YoutubeService) and a class to display a spinner (NgxSpinnerService).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor(private spinner: NgxSpinnerService, private youTubeService: YoutubeService) &#123; &#125;</span><br></pre></td></tr></table></figure><p>Then, in the ngOnInit( ) method, we invoke the method by passing the Channel ID, in this example the channel is my child’s :), and a maximum number of .getVideosForChanel results.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line">this.spinner.show()</span><br><span class="line">setTimeout(()=&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.spinner.hide()</span><br><span class="line">&#125;,3000)</span><br><span class="line">this.videos = [];</span><br><span class="line">this.youTubeService</span><br><span class="line">.getVideosForChanel(&apos;UC_LtA_EtCr7Jp5ofOsYt18g&apos;, 15)</span><br><span class="line">.pipe(takeUntil(this.unsubscribe$))</span><br><span class="line">.subscribe(lista =&gt; &#123;</span><br><span class="line">for (let element of lista[&quot;items&quot;]) &#123;</span><br><span class="line">this.videos.push(element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the result, .subscribe (list =&gt; {, retrieve the items property and add each object in the created array.</p><p>At the beginning of the function, we included a timeout of 3 seconds to close the spinner in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.spinner.hide()</span><br><span class="line">&#125;,3000)</span><br></pre></td></tr></table></figure><p>Let’s finalize, coding the component template (app.component.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngFor=&quot;let video of videos&quot; class=&quot;col-xl-3 col-md-6 mb-4&quot;&gt;</span><br><span class="line">&lt;div class=&quot;card border-0 shadow vh-50&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.youtube.com/watch?v=&#123;&#123;video.id.videoId&#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img [src]=&quot;video.snippet.thumbnails.medium.url&quot; class=&quot;card-img-top&quot; alt=&quot;...&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;card-body text-center&quot;&gt;</span><br><span class="line">&lt;h5 class=&quot;card-title mb-0&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.youtube.com/watch?v=&#123;&#123;video.id.videoId&#125;&#125;&quot;&gt;&#123;&#123;video.snippet.title&#125;&#125;</span><br><span class="line">&lt;/a&gt;&lt;/h5&gt;</span><br><span class="line">&lt;div class=&quot;card-text text-black-50&quot;&gt;&#123;&#123;video.snippet.description.slice(0, 100)&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;p class=&quot;card-text&quot;&gt;&#123;&#123;video.snippet.description&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>We loop the array using the * ngFor directive. We have defined a link to view the video through videoID at href = “<a href="https://www.youtube.com/watch?v=" target="_blank" rel="noopener">https://www.youtube.com/watch?v=</a>“.</p><p>Resources:</p><ol><li><a href="https://developers.google.com/youtube/v3" target="_blank" rel="noopener">https://developers.google.com/youtube/v3</a></li><li><a href="https://developers.google.com/youtube/v3/docs/videos/list" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/docs/videos/list</a></li></ol><p>Previous blog: <a href="https://nayan.co/blog/Web/angular-maps/">https://nayan.co/blog/Web/angular-maps/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/blog/Web/angular-youtube/blog_banner.png&quot; alt=&quot;Youtube data API in Angular app&quot;&gt;&lt;/p&gt;
&lt;p&gt;Facing issues getting data of yo
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/categories/Web/"/>
    
    
      <category term="angular" scheme="https://nayan.co/tags/angular/"/>
    
      <category term="youtube" scheme="https://nayan.co/tags/youtube/"/>
    
      <category term="Youtube data API" scheme="https://nayan.co/tags/Youtube-data-API/"/>
    
      <category term="Nayan" scheme="https://nayan.co/tags/Nayan/"/>
    
      <category term="Cloud Data" scheme="https://nayan.co/tags/Cloud-Data/"/>
    
  </entry>
  
  <entry>
    <title>How to draw custom paths/lines in Android usign PathEffect</title>
    <link href="https://nayan.co/Android/drawing-custom-paths-in-android/"/>
    <id>https://nayan.co/Android/drawing-custom-paths-in-android/</id>
    <published>2020-06-08T12:41:05.000Z</published>
    <updated>2020-09-23T05:01:32.482Z</updated>
    
    <content type="html"><![CDATA[<p>We can draw simple lines and shapes by using <code>path.lineTo</code>, <code>path.moveTo</code> etc. But sometimes we have requirements to draw a line in pattern, for example: simple dashed, two lines where 1 is continuous and other one is dashed etc.</p><p><img src="/blog/Android/drawing-custom-paths-in-android/lines.png" alt="Lines Drawn By PathEffects"></p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>First we’ll have to create a small path that we want to repeat in the final path</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These are some sample methods to generate a single block of path</span></span><br><span class="line"><span class="comment">// which will be repeated in the final path that we'll draw on canvas</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw a small line with width 10px and length 30px</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeDefaultLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">        <span class="keyword">val</span> p = Path()</span><br><span class="line">        p.moveTo(-<span class="number">15f</span>, <span class="number">5f</span>)</span><br><span class="line">        p.lineTo(<span class="number">15f</span>, <span class="number">5f</span>)</span><br><span class="line">        p.lineTo(<span class="number">15f</span>, -<span class="number">5f</span>)</span><br><span class="line">        p.lineTo(-<span class="number">15f</span>, -<span class="number">5f</span>)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw two small lines with width 4px and length 30px</span></span><br><span class="line"><span class="comment">// They'll have 4px space between them</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeDoubleLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Path()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw two small lines</span></span><br><span class="line"><span class="comment">// One with width 4px and length 15px</span></span><br><span class="line"><span class="comment">// Other with width 4px and length 30px</span></span><br><span class="line"><span class="comment">// They'll have 4px space between them</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeBrokenSolidLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Path()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">0f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">0f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve create our building blocks of the final path. Now we’ll be setting PathEffect to the paint that will draw these blocks.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First setup your paint object</span></span><br><span class="line"><span class="keyword">val</span> paint = Paint()</span><br><span class="line">paint.style = Paint.Style.STROKE</span><br><span class="line">paint.strokeWidth = <span class="number">10f</span></span><br><span class="line">paint.color = Color.YELLOW</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare your pathDashPathEffect</span></span><br><span class="line"><span class="keyword">var</span> pathDashPathEffect: PathDashPathEffect? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define your pathDashPathEffect</span></span><br><span class="line">pathDashPathEffect = PathDashPathEffect(makeDoubleLanePath(),           <span class="comment">//Your building block</span></span><br><span class="line">                                        <span class="number">45f</span>,                            <span class="comment">//At how much distance the next block should be drawn from the current block's starting point</span></span><br><span class="line">                                        <span class="number">0f</span>,                             <span class="comment">//Phase value</span></span><br><span class="line">                                        PathDashPathEffect.Style.MORPH) <span class="comment">//EffectStyle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your defined pathDashPathEffect to your paint object</span></span><br><span class="line">pathDashPathEffect?.let &#123; effect -&gt;</span><br><span class="line">    paint.pathEffect = effect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have our paint object with pathEffect with us. Now we’ll be drawing a path that we actaully want to draw using this paint object.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineX1 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineX2 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineY1 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineY2 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">val</span> path = Path()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    path.reset()</span><br><span class="line">    path.moveTo(lineX1, lineY1)</span><br><span class="line">    path.lineTo(lineX2, lineY2)</span><br><span class="line"></span><br><span class="line">    canvas?.drawPath(path,  <span class="comment">//This final path that we are drawing now</span></span><br><span class="line">                     paint) <span class="comment">//The one that we created earlier</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://stackoverflow.com/questions/10907386/custom-path-line-style-when-drawing-on-canvas" target="_blank" rel="noopener">Custom path line style when drawing on canvas</a></li><li><a href="https://stackoverflow.com/questions/20068803/what-does-path-mean-in-pathdashpatheffect-constructor" target="_blank" rel="noopener">what does path mean in PathDashPathEffect constructor</a></li><li><a href="http://android-coding.blogspot.com/2014/05/pathdashpatheffect-example.html" target="_blank" rel="noopener">PathDashPathEffect example</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Android/Android-Testing-Strategy/">Android Testing Strategy</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We can draw simple lines and shapes by using &lt;code&gt;path.lineTo&lt;/code&gt;, &lt;code&gt;path.moveTo&lt;/code&gt; etc. But sometimes we have requirements t
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
      <category term="canvas" scheme="https://nayan.co/tags/canvas/"/>
    
      <category term="paint" scheme="https://nayan.co/tags/paint/"/>
    
      <category term="path" scheme="https://nayan.co/tags/path/"/>
    
      <category term="PathDashPathEffect" scheme="https://nayan.co/tags/PathDashPathEffect/"/>
    
      <category term="DashPathEffect" scheme="https://nayan.co/tags/DashPathEffect/"/>
    
      <category term="CornerPathEffect" scheme="https://nayan.co/tags/CornerPathEffect/"/>
    
      <category term="ComposePathEffect" scheme="https://nayan.co/tags/ComposePathEffect/"/>
    
      <category term="draw custom path" scheme="https://nayan.co/tags/draw-custom-path/"/>
    
  </entry>
  
  <entry>
    <title>Detecting Whether a Parking Zone Is Vacant Or Occupied</title>
    <link href="https://nayan.co/AI/Vehicle-Parking-Occupancy-Detection/"/>
    <id>https://nayan.co/AI/Vehicle-Parking-Occupancy-Detection/</id>
    <published>2020-06-01T17:22:29.000Z</published>
    <updated>2020-09-23T05:01:32.442Z</updated>
    
    <content type="html"><![CDATA[<p>Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.<br>However , there has been a major boost in the field of <a href="https://nayan.co/#/home">Deep Learning</a> and <a href="https://nayan.co/#/home">Computer Vision</a> in the past few years which enables us to create a robust and a real-time solution.</p><img src="/blog/AI/Vehicle-Parking-Occupancy-Detection/20140103__bartpark31-1.jpg" class="" title="Depicting the Problem"><h3 id="Plan-Of-Attack"><a href="#Plan-Of-Attack" class="headerlink" title="Plan Of Attack"></a>Plan Of Attack</h3><p> A pipeline for the same has been created which consists of  the following 5 steps :</p><ol><li><strong>Finding suitable Images</strong> </li><li><strong>Parking zones detection</strong></li><li><strong>Vehicle detection</strong></li><li><strong>Plotting the vehicles as point objects on 2d-map</strong></li><li><strong>Detecting whether a parking lot is vacant or occupied</strong> </li></ol><p>Each of the 5 steps have been described in detail in the following sections :</p><h3 id="1-Finding-Suitable-Images"><a href="#1-Finding-Suitable-Images" class="headerlink" title="1) Finding Suitable Images"></a>1) Finding Suitable Images</h3><p>The first step to solve any problem in <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> is to collect data.<br>In our approach , we just required 2 images throughout the entire process.</p><p>The 2 images required are:</p><pre><code>* Image of actual camera view of the parking zones * Image of the top-view / 2d-map of the same area</code></pre><p>We obtained these 2 images in the following manner :</p><pre><code>* There are a lot of open CCTV IP cameras available freely on the internet. By using one of the websites , we were    able to get our first image which is a camera view of parking zones.</code></pre><p><img src="2.png" alt="Fig 2: Camera View of Parking Zones"></p><pre><code>* The same website also provided us the longitude and latitude of the area which was then entered in Google Maps   in order to get it’s top-view.</code></pre><p><img src="3.png" alt="Fig 3: Longitude and Latitude search on Google Maps"></p><p><img src="4.png" alt="Fig 4:  Top-view of parking zones"></p><p>We now have both the images and we are ready to proceed to the next step.</p><h3 id="2-Parking-Zones-Detection"><a href="#2-Parking-Zones-Detection" class="headerlink" title="2) Parking Zones Detection"></a>2) Parking Zones Detection</h3><p>This is one of the most important tasks in the entire pipeline as almost all the remaining tasks are dependent on this. Getting these inaccurate could impact our entire pipeline leading us to an incorrect outcome.</p><p>Before jumping onto this , I had done some research and found that the following 3 methods are most commonly used to tackle this kind of problem :</p><pre><code>* Canny edge detection and hough line transform combined with image processing could detect the lines in the parking     zones. * Manually drawing out the contours on the parking zones. * Directly perform vehicle detection and locate the stationary cars assuming that they are on the parking zones.</code></pre><p>Third method is based on assumptions and also not suitable for many scenarios , due to which we discarded it as an option.</p><p>We used the first method wherein we detected the lines using canny edge detection and hough line transform combined with image processing.</p><p><img src="5.jpg" alt="Fig 5:  Drawing the contours over the parking zones"></p><h3 id="3-Vehicle-Detection"><a href="#3-Vehicle-Detection" class="headerlink" title="3) Vehicle Detection"></a>3) Vehicle Detection</h3><p>In order to achieve this , we had used the state-of-the-art YOLOv3 <strong><em>Deep Learning</em></strong> object detection model.</p><p><img src="6.jpg" alt="Fig 6:  Vehicles detected by YoloV3"></p><p>This is a crucial step as once we get the bounding boxes accurately, only  then would we be able to detect whether a parking zone is vacant or occupied.</p><h3 id="4-Representing-the-vehicles-as-point-objects-on-2d-map"><a href="#4-Representing-the-vehicles-as-point-objects-on-2d-map" class="headerlink" title="4) Representing the vehicles as point objects on 2d-map"></a>4) Representing the vehicles as point objects on 2d-map</h3><p>For this step , we would be using a very classical <strong><em>Computer Vision</em></strong> concept.<br>This step can be broken to the following sub-steps :</p><pre><code>*Using Google API , we came to know the dimensions of the parking areas in both the images.  *This helped us in restricting the images to particular areas which further aided us in automatically detecting key     points in both images. *Distortion also plays a significant role in getting accurate key-points. So had there been some information about the     planted camera , we could have undistorted the images and got more accurate key-points </code></pre><p><img src="7.jpg" alt="Fig 7:   Key-Points marked on the camera view image"></p><p><img src="8.jpg" alt="Fig 8:   Key-Points marked on the top-view image"></p><p>Using the key-points in the above 2 images , we calculate their homography.</p><ol><li><p>We can represent vehicles as point objects by the following steps  :</p><ol><li><code>First step is to determine the 2d-point matrix by multiplying homography and the center coordinates of the bounding boxes</code><br><img src="9.jpg" alt="where center-x and center-y are the center coordinates of the bounding boxes"></li><li><code>The final step in finding the 2d coordinates is to divide the 2d-point matrix obtained by third element.</code></li></ol></li></ol><p><img src="10.png" alt="&#39;2d-point is calculated&#39;"></p><p>Therefore the 2d coordinates for all the vehicles are derived in similar fashion and are plotted on the 2d-map<br>        image.</p><p><img src="11.jpg" alt="Fig 11:   Vehicles depicted as 2d-points "></p><p>Getting these points plotted at accurate locations implies that results and calculations we got from both step 3<br>        and step 4 are perfect.</p><h3 id="5-Detecting-whether-a-parking-lot-is-vacant-or-occupied"><a href="#5-Detecting-whether-a-parking-lot-is-vacant-or-occupied" class="headerlink" title="5) Detecting whether a parking lot is vacant or occupied"></a>5) Detecting whether a parking lot is vacant or occupied</h3><p>Point Polygon test is used here to find whether the point is inside or outside the parking zone.</p><ol><li><p>Point polygon test checks whether a point is inside the polygon or not.</p></li><li><p>It returns a negative value if the point is outside the polygon , 0 if the point is on the polygon and a<br> positive value if the point is inside the polygon.</p></li></ol><p><img src="12.jpg" alt="Fig 12:   Final Result  "></p><p>Hence as it can be seen from the image above, with the help of <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> , we have successfully solved this problem by following a very simple and systematic approach.</p><p>For more such exciting Deep Learning blog posts,<a href="https://nayan.co/blog/">click here</a>.</p><p>Also, <a href="https://nayan.co/#/home">click here</a> to know how we are leveraging AI for traffic monitoring and road safety.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.&lt;br&gt;Howe
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Deep Learning" scheme="https://nayan.co/tags/Deep-Learning/"/>
    
      <category term="Computer Vision" scheme="https://nayan.co/tags/Computer-Vision/"/>
    
      <category term="Parking Detection" scheme="https://nayan.co/tags/Parking-Detection/"/>
    
      <category term="Vehicle Occupancy Detection" scheme="https://nayan.co/tags/Vehicle-Occupancy-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Creating a very basic deep-learning model in Docker</title>
    <link href="https://nayan.co/AI/Creating-deep-learning-models-in-Docker/"/>
    <id>https://nayan.co/AI/Creating-deep-learning-models-in-Docker/</id>
    <published>2020-05-16T11:09:31.000Z</published>
    <updated>2020-09-23T05:01:32.386Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/AI/Creating-deep-learning-models-in-Docker/docker_python.png" class=""><p>Recently me and my team shifted our approach to build our models in the docker containers rather than creating and running a python file on the system. For me, it was a completely new experience in learning docker. If you are also quite new to docker then with this post you will be able to create your own basic deep-learning model in docker.</p><p><strong>What is Docker?</strong></p><p>Docker provides an image-based deployment model. This makes it easy to share an application, with all of their dependencies across multiple environments. Docker also automates deploying the application inside this container environment.</p><p><strong>Docker Images and Containers</strong></p><p>Docker Container is a standard unit which can be created on the fly to deploy a particular application or environment.</p><p>A Docker image is a file, comprised of multiple layers, that is used to execute code in a Docker container. An image is essentially built from the instructions for a complete and executable version of an application, which relies on the host OS kernel. Multiple instances of a Docker container can be run on a single docker image.</p><p><strong>Why Docker?</strong></p><p>Since we get an idea about docker, lets discuss some of its important use-cases:</p><ul><li><p>Modularity : This means that with the use of docker if any of the part of the application needs to get update or repair, we can do that without shutting the whole application down.</p></li><li><p>Rollback : Every image has layers. Don’t like the current iteration of an image? Roll it back to the previous version</p></li></ul><p><strong>Installing Docker</strong></p><p>Before getting started, we firstly need to install docker on our machine.</p><p>Firstly update the packages and installing the required packages</p><pre><code>$ sudo apt update$ sudo apt install apt-transport-https ca-certificates curl software-properties-common</code></pre><p>Then add the GPG key for the official Docker repository to your system:</p><pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre><p>Add the Docker repository to APT sources:</p><pre><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</code></pre><p>Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:</p><pre><code>$ apt-cache policy docker-ce</code></pre><p>Now, finally install docker</p><pre><code>$ sudo apt install docker-ce</code></pre><p>Check, the docker is running by</p><pre><code>$ sudo systemctl status docker</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/1*Nb6ln3J-75kf0QixxzcRtA.png" alt="Fig. 1: You’ll see the output some similar to this"></p><p><strong>Creating a project with Docker</strong></p><p>Now, we are ready to create our first docker project. I had choose a simple CIFAR-10 dataset for the post. You can clone my <a href="https://github.com/hghimanshu/Blog" target="_blank" rel="noopener">git repository</a>. Go the <strong>CIFARDocker</strong> folder. The folder structure is as below:-</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*yPvku4PluJOzUkoD_h54VQ.png" alt="Fig. 2: Folder structure for the CIFARDocker Folder"></p><p>We here need to know mostly about two files <strong>Dockerfile</strong> and <strong>run_cifar.sh.</strong> Firstly going with <strong>Dockerfile.</strong></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*0oa84Cjo7rfV7mRcVJTABw.png" alt="Fig. 3: Image for Dockerfile"></p><p>Firstly, we pull our base image from the public repositories. A Dockerfile must start with a <strong>FROM</strong> instruction. It initializes a new build stage and sets a base image for other instructions. The <strong>ENV</strong> instruction sets the environment variable. So, here we sets some enivronment for python. Then, we use <strong>RUN *<em>instruction. This instruction is used to execute any commands just like we do on our machine. Here, I install some packages like ffmpeg, wget etc. The *</em>ADD</strong> instruction is used to copy new files or directories local machine and adds them to the filesystem of the image at the path.</p><p>Format for <strong>ADD</strong> instruction is as below:</p><pre><code>ADD &lt;src&gt; &lt;dst&gt;</code></pre><p>Here, we provide the file path as per our local machine as <src> and our file path in our image in <dst>. Here, in our dockerfile, I copied a requirements.txt file and adds to the base path of the image. Then I install all the packages inside the requirements.txt file using the <strong>RUN</strong> instruction.</p><p>Now, finally we define our <strong>WORKDIR</strong> instruction. This is the path to our working directory. So, specify the WORKDIR path as per your image path.<br>Now, we will build our docker image. To build the image, type the below command</p><pre><code>$ docker build -t &apos;docker_containerized_cifar&apos; .</code></pre><p>Here, the <strong>docker_containerized_cifar</strong> is the name of our docker image. You can specify your custom image name for your dockerfile.</p><p>Now we will make a container for this docker image. Open <strong>run_cifar.sh</strong> file.</p><p>Its basic format is as like:-</p><pre><code>docker run -it -d --name=docker_container_name -v &lt;src&gt;:&lt;dst&gt;       --network=docker_image_name</code></pre><p>Here,</p><ul><li><p>-it: Instructs Docker to create an interactive bash shell in the container.</p></li><li><p>–name: Gives the name of your container</p></li><li><p>–v: Specify, the local machine folder <src> to be mounted on the <dst> path (image path)</p></li><li><p>–network: Docker image name associated with the container. In our case, the name will be <strong>docker_containerized_cifar.</strong></p></li></ul><p>Now, starting the container using the below command.</p><pre><code>$ bash run_cifar.sh</code></pre><p>Now, run our code in the docker container itself. For, this type the below command.</p><pre><code>$ docker exec -it docker_container_name bash</code></pre><p>Here, <strong>docker_container_name</strong> is the name of my docker container.</p><p>When you hit the above command, a shell gets open and BOOM you are in your docker container.</p><p>Now, run the code for cifar using the command</p><pre><code>$ python cifar.py</code></pre><p>That’s simple, now, your code is running on the docker container. If you want to stop/start the container again. Then type the below command.</p><pre><code>$ docker start container_name ##for starting a container$ docker stop container_name ##for stopping a container</code></pre><p><strong>Conclusion</strong></p><p>Well, that’s enough in this post. Hope you liked it. I hope you get an idea about <strong>docker</strong> and also about how can we these deep-learning models with the docker.</p><p><strong>Some good reads you may like :)</strong></p><ol><li><a href="https://nayan.co/blog/uncategorized/Flask-PyMongo-Integration/">Flask + Mongo Integration</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/AI/Creating-deep-learning-models-in-Docker/docker_python.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;Recently me and my team shifted our approach to 
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="docker" scheme="https://nayan.co/tags/docker/"/>
    
      <category term="deep-learning" scheme="https://nayan.co/tags/deep-learning/"/>
    
      <category term="AI" scheme="https://nayan.co/tags/AI/"/>
    
  </entry>
  
</feed>
