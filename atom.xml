<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nayan Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://nayan.co/blog/"/>
  <updated>2020-06-08T11:31:08.926Z</updated>
  <id>https://nayan.co/blog/</id>
  
  <author>
    <name>NayanTech</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow-docker</title>
    <link href="https://nayan.co/blog/uncategorized/tensorflow-docker/"/>
    <id>https://nayan.co/blog/uncategorized/tensorflow-docker/</id>
    <published>2020-06-08T11:31:08.926Z</published>
    <updated>2020-06-08T11:31:08.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container"><a href="#Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container" class="headerlink" title="Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container."></a>Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container.</h1><p>I have come across many developers who face serious issues when it comes to installing <strong>tensorflow</strong> on a <strong>linux</strong> distro such as <strong>Ubuntu</strong>. There are very few instances when the installation goes smoothly the first time itself. Mostly, the developer has to face a plethora of error messages which get quite tricky to solve. Some of the error messages are shown below:</p><pre><code>[...\stream_executor\dso_loader.cc] Couldn&apos;t open CUDA library nvcuda.dll[...\stream_executor\cuda\cuda_dnn.cc] Unable to load cuDNN DSO</code></pre><p>Similar error messages can be found in this official tensorflow link → <a href="https://www.tensorflow.org/install/errors" target="_blank" rel="noopener"><strong><em>https://www.tensorflow.org/install/errors</em></strong></a></p><p>Let’s make things easier and lives simpler:</p><h2 id="Enter-Docker"><a href="#Enter-Docker" class="headerlink" title="Enter Docker:"></a>Enter Docker:</h2><p>Using <strong><em>Docker</em></strong> containers the life of a developer becomes easier by a massive amount. Many developers shy away from using docker containers thinking that it introduces extra dependencies into the system followed by maintenance issues, but that’s a misconception.</p><p><strong><em>Docker</em></strong> containers actually reduce the time spent on figuring out different library versions to be installed and how they would communicate with one another. Containers solve multiple issues which arise with incompatibility of libraries and version mismatch. A container is completely independent from it’s host and reduces the chances of ruining environments on the host machine</p><h3 id="Installing-Docker-and-NVIDIA-Docker"><a href="#Installing-Docker-and-NVIDIA-Docker" class="headerlink" title="Installing Docker and NVIDIA Docker :"></a>Installing Docker and NVIDIA Docker :</h3><p>In order to run <strong><em>tensorflow</em></strong> as a container we would obviously need the latest version of docker to be installed and configured. Along with that we would also need <strong><em>NVIDIA Docker v2</em></strong> to be installed on the host machine. <strong><em>NVIDIA Docker</em></strong> plays a beautiful role of exposing the host machine’s GPU and GPU drivers to a container. Hence the developer only has to worry about installing the correct <strong><em>NVIDIA GPU</em></strong> <strong><em>driver</em></strong> on this machine. The <strong><em>NVIDIA Docker v2</em></strong> does the task of making it available for the container.</p><p>In order to learn how to install the latest version of Docker and NVIDIA Docker v2 , head over to my earlier post which describes this is in detail. Link given below:</p><p><a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener"><strong>Deep Learning for Production: Deploying YOLO using Docker.</strong></a></p><h3 id="Installing-tensorflow-using-Docker"><a href="#Installing-tensorflow-using-Docker" class="headerlink" title="Installing tensorflow using Docker:"></a><strong>Installing tensorflow using Docker:</strong></h3><p>Once your docker and NVIDIA docker v2 installation is complete with <strong><em>nvidia-smi</em></strong> giving you the output as shown in Fig 1, when run inside a docker container, we can move ahead with pulling the correct image for tensorflow.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*dPZfCX1ia00A3BmTP-QQhA.jpeg" alt="Fig 1: Output of nvidia-smi inside docker container"></p><p>Simply doing a <strong><em>docker pull tensorflow/tensorflow</em></strong> would download the latest version of tensorflow image. This can be run using the following command</p><pre><code>docker run -it -rm --runtime=nvidia --name=tensorflow_container ***tensorflow_image_name***</code></pre><p>Executing the command given above will run the tensorflow container in an interactive shell along with the availability of the <strong><em>NVIDIA gpus</em></strong> inside the container.</p><p>Now there are certain modifications which can be performed to get the tensorflow <strong><em>version</em></strong> required along with other libraries. Let’s say you want the latest version of tensorflow along with <strong><em>gpu</em></strong> support and <strong><em>python 3</em></strong> pre-installed. The image for this customization can be easily pulled using the following command:</p><pre><code>docker pull tensorflow/tensorflow:latest-gpu-py3</code></pre><p>You can find many other such images in the following link →<a href="https://hub.docker.com/r/tensorflow/tensorflow/tags" target="_blank" rel="noopener"><strong><em>https://hub.docker.com/r/tensorflow/tensorflow/tags</em></strong></a></p><p>Just do a docker pull on the one which suits your requirement.</p><p>If you want other libraries along with tensorflow, you can put them in a <strong><em>dockerfile</em></strong> and perform build command.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*bRwR0nlR4-XbX-00xpY5-Q.png" alt="Fig 2: Custom dockerfile with tensorflow"></p><p>Fig 2 above shows a custom <strong><em>dockerfile</em></strong> with <strong><em>tensorflow v1</em></strong> image being used along with installation of other libraries such as <strong><em>OpenCV,Moviepy,Keras</em></strong> and <strong><em>Apache Kafka</em></strong> for python</p><p>Once inside the container invoked using docker run, you can setup code to use tensorflow easily as you would done on the host machine without the container.</p><p>I would encourage all AI/ML practitioners to increase the use of docker containers to increase their research and development efficiency by reducing the time spent in managing multiple libraries and dueling with incompatibility errors.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container&quot;&gt;&lt;a href=&quot;#Installing-Tensorflow-2-0-on-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Detecting Whether a Parking Zone Is Vacant Or Occupied</title>
    <link href="https://nayan.co/blog/AI/Vehicle-Parking-Occupancy-Detection/"/>
    <id>https://nayan.co/blog/AI/Vehicle-Parking-Occupancy-Detection/</id>
    <published>2020-06-01T17:22:29.000Z</published>
    <updated>2020-06-08T11:31:08.878Z</updated>
    
    <content type="html"><![CDATA[<p>Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.<br>However , there has been a major boost in the field of <a href="https://nayan.co/#/home">Deep Learning</a> and <a href="https://nayan.co/#/home">Computer Vision</a> in the past few years which enables us to create a robust and a real-time solution.</p><img src="/blog/AI/Vehicle-Parking-Occupancy-Detection/20140103__bartpark31-1.jpg" class="" title="Depicting the Problem"><h3 id="Plan-Of-Attack"><a href="#Plan-Of-Attack" class="headerlink" title="Plan Of Attack"></a>Plan Of Attack</h3><p> A pipeline for the same has been created which consists of  the following 5 steps :</p><ol><li><strong>Finding suitable Images</strong> </li><li><strong>Parking zones detection</strong></li><li><strong>Vehicle detection</strong></li><li><strong>Plotting the vehicles as point objects on 2d-map</strong></li><li><strong>Detecting whether a parking lot is vacant or occupied</strong> </li></ol><p>Each of the 5 steps have been described in detail in the following sections :</p><h3 id="1-Finding-Suitable-Images"><a href="#1-Finding-Suitable-Images" class="headerlink" title="1) Finding Suitable Images"></a>1) Finding Suitable Images</h3><p>The first step to solve any problem in <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> is to collect data.<br>In our approach , we just required 2 images throughout the entire process.</p><p>The 2 images required are:</p><pre><code>* Image of actual camera view of the parking zones * Image of the top-view / 2d-map of the same area</code></pre><p>We obtained these 2 images in the following manner :</p><pre><code>* There are a lot of open CCTV IP cameras available freely on the internet. By using one of the websites , we were    able to get our first image which is a camera view of parking zones.</code></pre><p><img src="2.png" alt="Fig 2: Camera View of Parking Zones"></p><pre><code>* The same website also provided us the longitude and latitude of the area which was then entered in Google Maps   in order to get it’s top-view.</code></pre><p><img src="3.png" alt="Fig 3: Longitude and Latitude search on Google Maps"></p><p><img src="4.png" alt="Fig 4:  Top-view of parking zones"></p><p>We now have both the images and we are ready to proceed to the next step.</p><h3 id="2-Parking-Zones-Detection"><a href="#2-Parking-Zones-Detection" class="headerlink" title="2) Parking Zones Detection"></a>2) Parking Zones Detection</h3><p>This is one of the most important tasks in the entire pipeline as almost all the remaining tasks are dependent on this. Getting these inaccurate could impact our entire pipeline leading us to an incorrect outcome.</p><p>Before jumping onto this , I had done some research and found that the following 3 methods are most commonly used to tackle this kind of problem :</p><pre><code>* Canny edge detection and hough line transform combined with image processing could detect the lines in the parking     zones. * Manually drawing out the contours on the parking zones. * Directly perform vehicle detection and locate the stationary cars assuming that they are on the parking zones.</code></pre><p>Third method is based on assumptions and also not suitable for many scenarios , due to which we discarded it as an option.</p><p>We used the first method wherein we detected the lines using canny edge detection and hough line transform combined with image processing.</p><p><img src="5.jpg" alt="Fig 5:  Drawing the contours over the parking zones"></p><h3 id="3-Vehicle-Detection"><a href="#3-Vehicle-Detection" class="headerlink" title="3) Vehicle Detection"></a>3) Vehicle Detection</h3><p>In order to achieve this , we had used the state-of-the-art YOLOv3 <strong><em>Deep Learning</em></strong> object detection model.</p><p><img src="6.jpg" alt="Fig 6:  Vehicles detected by YoloV3"></p><p>This is a crucial step as once we get the bounding boxes accurately, only  then would we be able to detect whether a parking zone is vacant or occupied.</p><h3 id="4-Representing-the-vehicles-as-point-objects-on-2d-map"><a href="#4-Representing-the-vehicles-as-point-objects-on-2d-map" class="headerlink" title="4) Representing the vehicles as point objects on 2d-map"></a>4) Representing the vehicles as point objects on 2d-map</h3><p>For this step , we would be using a very classical <strong><em>Computer Vision</em></strong> concept.<br>This step can be broken to the following sub-steps :</p><pre><code>*Using Google API , we came to know the dimensions of the parking areas in both the images.  *This helped us in restricting the images to particular areas which further aided us in automatically detecting key     points in both images. *Distortion also plays a significant role in getting accurate key-points. So had there been some information about the     planted camera , we could have undistorted the images and got more accurate key-points </code></pre><p><img src="7.jpg" alt="Fig 7:   Key-Points marked on the camera view image"></p><p><img src="8.jpg" alt="Fig 8:   Key-Points marked on the top-view image"></p><p>Using the key-points in the above 2 images , we calculate their homography.</p><ol><li><p>We can represent vehicles as point objects by the following steps  :</p><ol><li><code>First step is to determine the 2d-point matrix by multiplying homography and the center coordinates of the bounding boxes</code><br><img src="9.jpg" alt="where center-x and center-y are the center coordinates of the bounding boxes"></li><li><code>The final step in finding the 2d coordinates is to divide the 2d-point matrix obtained by third element.</code></li></ol></li></ol><p><img src="10.png" alt="&#39;2d-point is calculated&#39;"></p><p>Therefore the 2d coordinates for all the vehicles are derived in similar fashion and are plotted on the 2d-map<br>        image.</p><p><img src="11.jpg" alt="Fig 11:   Vehicles depicted as 2d-points "></p><p>Getting these points plotted at accurate locations implies that results and calculations we got from both step 3<br>        and step 4 are perfect.</p><h3 id="5-Detecting-whether-a-parking-lot-is-vacant-or-occupied"><a href="#5-Detecting-whether-a-parking-lot-is-vacant-or-occupied" class="headerlink" title="5) Detecting whether a parking lot is vacant or occupied"></a>5) Detecting whether a parking lot is vacant or occupied</h3><p>Point Polygon test is used here to find whether the point is inside or outside the parking zone.</p><ol><li><p>Point polygon test checks whether a point is inside the polygon or not.</p></li><li><p>It returns a negative value if the point is outside the polygon , 0 if the point is on the polygon and a<br> positive value if the point is inside the polygon.</p></li></ol><p><img src="12.jpg" alt="Fig 12:   Final Result  "></p><p>Hence as it can be seen from the image above, with the help of <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> , we have successfully solved this problem by following a very simple and systematic approach.</p><p>For more such exciting Deep Learning blog posts,<a href="https://nayan.co/blog/">click here</a>.</p><p>Also, <a href="https://nayan.co/#/home">click here</a> to know how we are leveraging AI for traffic monitoring and road safety.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.&lt;br&gt;Howe
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="Deep Learning" scheme="https://nayan.co/blog/tags/Deep-Learning/"/>
    
      <category term="Computer Vision" scheme="https://nayan.co/blog/tags/Computer-Vision/"/>
    
      <category term="Parking Detection" scheme="https://nayan.co/blog/tags/Parking-Detection/"/>
    
      <category term="Vehicle Occupancy Detection" scheme="https://nayan.co/blog/tags/Vehicle-Occupancy-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Meta-Learning:Learning-to-learn-fast and its approaches</title>
    <link href="https://nayan.co/blog/AI/Meta-Learning-Learning-to-learn-fast/"/>
    <id>https://nayan.co/blog/AI/Meta-Learning-Learning-to-learn-fast/</id>
    <published>2020-05-06T10:36:34.000Z</published>
    <updated>2020-06-08T11:31:08.858Z</updated>
    
    <content type="html"><![CDATA[<!-- # Meta-Learning(Learning to learn fast) and its approaches --><blockquote><p>In this blog, I will explain meta-learning what is also known as learning to learn in machine learning.</p></blockquote><!-- ![Meta Learning](meta-learning.png "Meta Learning") --><img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/meta-learning.png" class="" title="Meta Learning"><h2 id="What-is-Meta-Learning"><a href="#What-is-Meta-Learning" class="headerlink" title="What is Meta-Learning?"></a>What is Meta-Learning?</h2><p>Current AI agents excel at mastering a particular skill like object classification, predicting a disaster, <a href="https://nayan.co/blog/2020/01/09/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/">image segmentation</a> etc. However, now AI is extensively used in day-to-day life. Almost every organization now uses AI in their products. So there is a need for a single AI agent that can solve a variety of problems. <strong><em>A good machine learning model often requires training with a large number of samples. Humans, in contrast, learn new concepts and skills much faster and more efficiently.</em></strong> Kids who have seen cats and birds only a few times can quickly tell them apart. Similar to humans, machine learning models need to be versatile and adapt to a new problem with the least number of samples. This essentially <strong>meta-learning</strong> aims to solve.</p><p>Versatility is achieved by an intelligent amalgamation of meta-learning along with related techniques such as <strong>reinforcement learning</strong> (finding suitable actions to maximize a reward), <strong>transfer learning</strong>    (re-purposing a trained model for a specific task on a second related task), and <strong>active learning</strong> (learning algorithm chooses the data it wants to learn from). Such different learning techniques provide an AI agent with the brains to do multiple tasks without the need to learn every new task from scratch. Thereby making it capable of adapting intelligently to a wide variety of new, unseen situations.</p><blockquote><p><strong>Using Meta-Learning, AI agents learn how to learn new tasks by reusing prior experience, rather than examining each new task in isolation.</strong></p></blockquote><h2 id="Approaches-for-Meta-Learning"><a href="#Approaches-for-Meta-Learning" class="headerlink" title="Approaches for Meta-Learning"></a><strong>Approaches for Meta-Learning</strong></h2><p>There are two popular approaches to <a href="https://nayan.co/#/home">meta-learning</a>.</p><h3 id="The-Simple-View"><a href="#The-Simple-View" class="headerlink" title="The Simple View"></a><strong>The Simple View</strong></h3><p>A good meta-learning model should be trained over a variety of learning tasks and optimized for the best performance on the distribution of tasks, including potentially unseen tasks. Each task is associated with a dataset D, containing both feature vectors and true labels. The optimal model parameters are:</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_1.png" class=""> --><p><img src="formula_1.png" alt="" title="Formula 1"><br>here one dataset is considered as one sample data point.</p><h3 id="Few-shot-classification"><a href="#Few-shot-classification" class="headerlink" title="Few-shot classification"></a><strong>Few-shot classification</strong></h3><p><em>Few-shot classification</em> is an instantiation of meta-learning in the field of supervised learning. The dataset <strong><em>D</em></strong> is often split into two parts, support set <strong><em>S</em></strong> for learning and a prediction set <strong><em>B</em></strong> for training or testing, <strong><em>D=</em>(<em>S, B</em>)</strong>. Often we consider a <em>K-shot N-class classification</em> task: the support set contains K labeled examples for each of N classes.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/image.png" class="" title="An example of a 4-shot 2-class image classification"> --><p><img src="image.png" alt="An example of a 4-shot 2-class image classification" title="An example of a 4-shot 2-class image classification"></p><p>A dataset <strong><em>D</em></strong> contains pairs of feature vectors and labels, and each label belongs to a known label set <strong><em>L</em></strong>. Let’s say, our classifier <strong><em>f</em></strong> outputs a probability of a data point belonging to the class <strong><em>y</em></strong> given the feature vector <strong><em>x, Pθ(y|x)</em></strong>. The optimal parameters should maximize the probability of true labels across multiple training batches <strong><em>B⊂D</em></strong>:</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_2.png" class=""> --><p><img src="formula_2.png" alt="" title="Formula 2"></p><p>In a few-shot classification, the goal is to reduce the prediction error on data samples with unknown labels given small support set for “fast learning” (think of how “fine-tuning” works). To make the training process mimics what happens during inference, we would like to “fake” datasets with a subset of labels to avoid exposing all the labels to the model and modify the optimization procedure accordingly to encourage fast learning:</p><ol><li><p>Sample a subset of labels.</p></li><li><p>Sample a support set and a training batch. Both of them only contain data points with labels belonging to the sampled label set.</p></li><li><p>The support set is part of the model input.</p></li><li><p>The final optimization uses the mini-batch to compute the loss and update the model parameters through backpropagation, in the same way as how we use it in the supervised learning</p></li></ol><p>We may consider each pair of sampled datasets as one data point. The model is trained such that it can generalize to other datasets. Symbols in red are added for <a href="https://nayan.co/#/home">meta-learning</a> in addition to the supervised learning objective.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_3.png" class=""> --><p><img src="formula_3.png" alt="" title="Formula 3"></p><h2 id="The-Learner-and-Meta-Learner"><a href="#The-Learner-and-Meta-Learner" class="headerlink" title="The Learner and Meta Learner"></a><strong>The Learner and Meta Learner</strong></h2><p>Another popular view of meta-learning decomposes the model update into two stages:</p><ul><li><p><strong><em>A classifier is the learner model, trained for operating a given task;</em></strong></p></li><li><p><strong><em>In the meantime, an optimizer learns how to update the learner model’s parameters via the support set.</em></strong></p></li></ul><p>Let’s consider what happens in normal supervised training. In the figure below, <strong>M</strong> is the neural network with initial weights (blue ■) and <strong>L</strong> calculates the loss function, and <strong>O</strong> is the optimizer with parameters (pink ★). For each data sample, the model predicts, finds loss, and optimizes the model weights. This happens in the cycle.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/training_process.png" class="" title="Training step in supervised learning"> --><p><img src="training_process.png" alt="Training step in supervised learning" title="Training step in supervised learning"></p><p>In meta-learning, the model <strong>M</strong> is called <strong>the learner</strong> and the optimizer <strong>O</strong> is called <strong>the meta-learner</strong>. The meta-learner’s parameters are learned by back-propagating a meta-loss gradient along the training process itself, back to the initial weights of the model and/or to the parameters of the optimizer</p><p>We now have two, nested, training processes: the <strong><em>meta-training process</em></strong> of the optimizer/meta-learner in which the <em>(meta-)forward pass</em> includes several training steps of the model (with forward, backward, and optimization steps).</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/meta_training.gif" class="" title="Meta Training process"> --><p><img src="meta_training.gif" alt="Meta Training process" title="Meta Training process"></p><p>A single step of the <strong>meta-training process</strong> includes two steps of the <strong>training process</strong> of the model (vertically in the meta-forward and meta-backward boxes). The training process of the model is exactly the same training process as in supervised learning. The input of the meta-forward pass is a list of examples/labels (or a list of batches) that are used successively during the model training pass. <strong><em>Meta-loss</em></strong> is calculated to reduce the training error. It means, the lower the loss, the better the training was. A <strong><em>meta-optimizer</em></strong> is used to update the weights of the optimizer.</p><p>Thanks for reading it…</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><p><a href="https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html#a-simple-view" target="_blank" rel="noopener">https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html#a-simple-view</a></p></li><li><p><a href="https://medium.com/huggingface/from-zero-to-research-an-introduction-to-meta-learning-8e16e677f78a" target="_blank" rel="noopener">from-zero-to-research-an-introduction-to-meta-learning</a></p></li><li><p><a href="http://localhost:4000/blog/2020/05/06/Meta-Learning-Learning-to-learn-fast/meta-learning.png" target="_blank" rel="noopener">http://localhost:4000/blog/2020/05/06/Meta-Learning-Learning-to-learn-fast/meta-learning.png</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- # Meta-Learning(Learning to learn fast) and its approaches --&gt;

&lt;blockquote&gt;
&lt;p&gt;In this blog, I will explain meta-learning what is also
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="https://nayan.co/blog/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="https://nayan.co/blog/tags/Deep-Learning/"/>
    
      <category term="Meta Learning" scheme="https://nayan.co/blog/tags/Meta-Learning/"/>
    
      <category term="Supervised Learning" scheme="https://nayan.co/blog/tags/Supervised-Learning/"/>
    
      <category term="nayan" scheme="https://nayan.co/blog/tags/nayan/"/>
    
      <category term="nayanindia" scheme="https://nayan.co/blog/tags/nayanindia/"/>
    
  </entry>
  
  <entry>
    <title>Python and Kafka: message passing and more</title>
    <link href="https://nayan.co/blog/AI/Pyton-and-Kafka-Message-Passing-and-More/"/>
    <id>https://nayan.co/blog/AI/Pyton-and-Kafka-Message-Passing-and-More/</id>
    <published>2020-05-03T14:50:04.000Z</published>
    <updated>2020-06-08T11:31:08.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-and-Kafka-message-passing-and-more"><a href="#Python-and-Kafka-message-passing-and-more" class="headerlink" title="Python and Kafka: message passing and more"></a>Python and Kafka: message passing and more</h2><p>At many stages during a developer’s career, he/she has to build systems capable of communicating with another. For example, there may be two <strong><em>python</em></strong> programs and the second program’s operations might depend on the output of the first program. There can be multiple programs in that linear sequence, with every consecutive program depending on the output of the previous. The linear sequence may even branch out to two child programs depending on the output of the previous. An example <strong><em>dependency graph</em></strong> is shown below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*w7Bht4t-dwqjDDtYlBdFqQ.jpeg" alt="Fig 1: Dependency graph for python programs"></p><p>As shown in Fig 1, program 2 depends on the output of program 1. Similarly, program 3 depends on the output of program 2. Program 3, in turn, branched out into two children programs accepting output from 3. If the objective of the developer is to make program 4 and program 5 run in parallel then he/she will have to make asynchronous calls to these programs in a multi-threaded fashion. Since python is not inherently thread safe, making scalable multi-threaded systems becomes a bit difficult. This is where <strong><em>Apache Kafka</em></strong> can be used.</p><p>Let me give you brief introduction of <strong><em>Apache Kafka</em></strong> before moving into it’s implementation and integration with Python.</p><p>A software platform developed by <strong>LinkedIn, Kafka *<em>is an open-source stream processing pipeline which was later donated to the *</em>Apache Software foundation.</strong></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*8GbrXbHdH5uPGMb5epWhrg.png" alt="[Apache logo](https://kafka.apache.org/images/logo.png) at [https://kafka.apache.org/](https://kafka.apache.org/)"></p><p>As mentioned on the official <strong>Apache</strong> site, <strong>Kafka</strong> can be used for creating <strong>data pipelines</strong> that are horizontally scalable, extremely fast and fault-tolerant.</p><p>The use-case involving python programs given above is not an exact streaming pipeline but <strong><em>Kafka</em></strong> can be used to solve the problem of sending messages to programs for execution and can be also be used to horizontally scale the information between programs.</p><p>Let’s move forward to see how this can be done.</p><h2 id="1-Installing-Kafka-on-Ubuntu-and-Confluent-Kafka-for-python"><a href="#1-Installing-Kafka-on-Ubuntu-and-Confluent-Kafka-for-python" class="headerlink" title="1. Installing Kafka on Ubuntu and Confluent-Kafka for python:"></a><strong>1. Installing Kafka on Ubuntu and Confluent-Kafka for python:</strong></h2><p>In order to install Kafka, just follow <a href="https://www.digitalocean.com/community/tutorials/how-to-install-apache-kafka-on-ubuntu-18-04" target="_blank" rel="noopener">**this</a>** installation tutorial for Ubuntu 18 given on <a href="https://www.digitalocean.com/" target="_blank" rel="noopener">**DigitalOcean</a>**.</p><p><a href="https://www.confluent.io/" target="_blank" rel="noopener">***Confluent-Kafka</a>*** is a fully managed enterprise platform for Kafka services.</p><p>Confluent also ships a <strong><em>Python Client</em></strong> for Kafka, which can be used to integrate Kafka directly with python. This client can be used to create topics, delete them and also send and receive messages.</p><h2 id="2-Using-Kafka-with-python"><a href="#2-Using-Kafka-with-python" class="headerlink" title="2. Using Kafka with python:"></a>2. Using Kafka with python:</h2><p>Let’s begin my making a project folder.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*4nvSxxZ2jc6yPlYFwxg4wQ.jpeg" alt="Fig 2: Project folder"></p><p>We will be carrying out the experiments using Docker since it’s a wonderful piece of technology and makes a developer’s life extremely easy.</p><p>A good practice would be to have two project folders, but for this experiment would be using just one. To execute the python programs we will be going inside the containers and running and them manually.</p><blockquote><p> If you want a pretty tutorial on using Docker with python checkout these blogs -&gt; <a href="https://medium.com/@abose550/installing-tensorflow-2-0-on-ubuntu-18-04-using-docker-run-all-experiments-from-a-container-4be9c2a8004d" target="_blank" rel="noopener">**Docker and Tensorflow</a> and also <a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener">Docker and YOLO</a>**</p></blockquote><p>Let’s go ahead and check each of these files now.</p><p><strong>Config.yml : <em>*Contains the topic list and from which the two programs are going to read. Also contains the broker information. A kafka topic retains a certain message for a certain amount of topic. Kafka topics can be also be broken down into partitions. Users can then send specific messages in these partitions. To understand more about Kafka topics and partitions check this link out -&gt; [</em></strong>Kafka topics and partitions](<a href="http://cloudurable.com/blog/kafka-architecture-topics/index.html" target="_blank" rel="noopener">http://cloudurable.com/blog/kafka-architecture-topics/index.html</a>) . ***A Kafka consumer reads messages from a particular topic and the Kafka produces/sends messages to topics.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*IFfYGEzlKdLQtfqEEBVShQ.jpeg" alt="Fig 3: Configuration file for topics"></p><p><strong>KafaConsumer.py and KafkaProducer.py : **These two files contains the classes for the *</strong>Kafka Consumer<strong>* and *</strong>Kafka Producer.<strong>* For complete information please refer to the [*</strong>github repo](<a href="https://github.com/AbhishekBose/kafka_python" target="_blank" rel="noopener">https://github.com/AbhishekBose/kafka_python</a>)<strong><em>. Link given below. These two files contains classes which have been created using the *</em>Consumer</strong> and <strong>Producer</strong> classes from the <strong><em>confluent_kafka</em></strong> library.main(operation,x,y)</p><p><strong>Dockerfile: *<em>Contains the configuration for the docker container which we will be spawning. This will take a *</em>python:3.8 image</strong> and install all required libraries using the <strong>requirements.txt</strong> file. The project folder is added to container using the *<em>ADD *</em>command as shown in Fig 4 below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Fk5rGui4NbxAvvnBLYbmJg.jpeg" alt="Fig 4: Dockerfile"></p><p>*<em>Requirements.txt *</em>: Contains a list of all the python libraries for this project</p><p><strong>python_1.py : *<em>This file does the task of sending a message to a topic which will be read by the second python code. The *</em>config file</strong> is read using the *<em>PyYaml library. *</em>The function , defined as *<em>main(operation,x,y) *</em>initializes the producer object named prod and sends a message to it. The message is in a json format which can be read the second program. In this example the second function would be performing two operations namely addition and subtraction. The operations and the operators are taken as command line arguments.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*CO_s7768bEv5xALKw5y-rw.jpeg" alt="Fig 5: Shows the program which will be producing messages to a particular topic"></p><p><strong>python_2.py: *<em>This code essentially will contain the consumer. The consumer will read from the topic in which *</em>python_1.py **will be producing the message. The two functions are defined as *</strong>add(x,y) <strong>*and *</strong>subtract(x,y). <strong><em>These functions will be receiving the two operators to perform the operation on, shown in Fig 6.1. The main function defined in Fig 6.2 is while loop which continuously reads from the consumer topic. This function checks the *</em>operation</strong> which was sent by the previous code by reading the message in a json format and calls the respective function. If the operator in the message is <strong><em>sum</em></strong> then the <strong>add</strong> function is called otherwise the <strong>subtract</strong> function is called.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*cDn_HI9hxoFFFMRA273Z8A.jpeg" alt="Fig 6.1: Shows the two function which will be called."></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*aMkG3vQqVpUT02uK9d8sqQ.jpeg" alt="Fig 6.2: Shows the main function which will be reading from the consumer topic."></p><h2 id="3-Building-the-image-and-running-the-container"><a href="#3-Building-the-image-and-running-the-container" class="headerlink" title="3. Building the image and running the container:"></a><strong>3. Building the image and running the container:</strong></h2><p>In order to build the image type the command:</p><pre><code>docker build -t &apos;image_name&apos; .</code></pre><p>Once the image is built, spawn a container by typing the following command:</p><pre><code>docker run -it -d --name=container_name --network=host image_name</code></pre><h2 id="4-Executing-the-programs"><a href="#4-Executing-the-programs" class="headerlink" title="4. Executing the programs:"></a><strong>4. Executing the programs:</strong></h2><p>Go inside the container by typing the following command:</p><pre><code>docker exec -it container_name  bash</code></pre><p>This will get you inside. The above container opens up the bash shell inside the container.</p><p>Run the following commands in two separate shells to witness the output</p><p>Run the consumer first</p><pre><code>cd srcpython python2.py 0</code></pre><p>The 0 here is the <strong>client id</strong> which gives a name to your consumer. You can have <strong><em>multiple consumers</em></strong> reading from the consumer topic. This ensures parallel processing as shown in <strong>Fig 7.1</strong>. Just assign a different <strong>client id</strong> to each <strong>consumer</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/2008/1*aY-01qEPBZYG3a_erAywPw.jpeg" alt="Fig 7.1: Starting the consumer"></p><p>Now execute the producer by :</p><pre><code>python python1.py 5 2 sum</code></pre><p>The operation here is sum and the <strong>operators are 5 and 2</strong> (Fig 7.2)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AnnjUCi-85d0Z68hQtyqsA.jpeg" alt="Fig 7.2: python1 program executed with the sum operator"></p><p>The output can be immediately seen with the result of the addition operation on the previously shell as shown in Fig 7.3</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*b-5s2RcJoInCfZm0Y_cqCg.jpeg" alt="Fig 7.3 : The output message can be seen and the result 7 as well"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion:"></a><strong>5. Conclusion:</strong></h2><p>This project was a basic example how <strong>Kafka</strong> can be extensively used for creating massive, parallel data pipelines. At <a href="https://nayan.co">**NAYAN Technologies</a>** we use <strong>Kafka</strong> extensively for our deep learning inference and training data pipelines.</p><p><strong>Github repo</strong>: <a href="https://github.com/AbhishekBose/kafka_python" target="_blank" rel="noopener">***https://github.com/AbhishekBose/kafka_python</a>***</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-and-Kafka-message-passing-and-more&quot;&gt;&lt;a href=&quot;#Python-and-Kafka-message-passing-and-more&quot; class=&quot;headerlink&quot; title=&quot;Python and
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="Python" scheme="https://nayan.co/blog/tags/Python/"/>
    
      <category term="Queue" scheme="https://nayan.co/blog/tags/Queue/"/>
    
      <category term="Kafka" scheme="https://nayan.co/blog/tags/Kafka/"/>
    
      <category term="Stream Processing" scheme="https://nayan.co/blog/tags/Stream-Processing/"/>
    
      <category term="Microservices" scheme="https://nayan.co/blog/tags/Microservices/"/>
    
  </entry>
  
  <entry>
    <title>Angular Maps | MarkerCluster</title>
    <link href="https://nayan.co/blog/Web/angular-maps/"/>
    <id>https://nayan.co/blog/Web/angular-maps/</id>
    <published>2020-03-04T11:18:37.000Z</published>
    <updated>2020-06-08T11:31:08.902Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/angular-maps/BG.png" class="" title="l"><h2 id="Marker-Cluster"><a href="#Marker-Cluster" class="headerlink" title="Marker Cluster"></a>Marker Cluster</h2><p>The marker clustering utility helps you to manage multiple markers at different zoom levels.When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.<br>If you have a lot of markers on the map, it’s better to use Marker Cluster setting to organize them better visually.</p><h2 id="Why-marker-clustering"><a href="#Why-marker-clustering" class="headerlink" title="Why marker clustering?"></a>Why marker clustering?</h2><p>The marker clustering utility helps you manage large number of google markers at different zoom levels. To be precise, the ‘markers’ are actually ‘items’ at this point, and only become ‘Markers’ when they’re rendered. Rendering large number of google markers on google map can be very resouce extensive tasks and UI experince is also not good even if we achieve to render them. When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.</p><h2 id="How-marker-clustering-works"><a href="#How-marker-clustering-works" class="headerlink" title="How marker clustering works"></a>How marker clustering works</h2><p>The MarkerClustererPlus library uses the grid-based clustering technique that divides the map into squares of a certain size (the size changes at each zoom level), and groups the markers into each square grid. It creates a cluster at a particular marker, and adds markers that are in its bounds to the cluster. It repeats this process until all markers are allocated to the closest grid-based marker clusters based on the map’s zoom level. If markers are in the bounds of more than one existing cluster, the Maps JavaScript API determines the marker’s distance from each cluster, and adds it to the closest cluster.</p><h2 id="How-to-use-Marker-Cluster-in-Angular-Apps"><a href="#How-to-use-Marker-Cluster-in-Angular-Apps" class="headerlink" title="How to use Marker Cluster in Angular Apps"></a>How to use Marker Cluster in Angular Apps</h2><h3 id="Installation-of-modules"><a href="#Installation-of-modules" class="headerlink" title="Installation of modules"></a>Installation of modules</h3><p>We need to install AGM (Angular Google Maps), js-marker-cluster(peer dependency)</p><ol><li>NPM: <code>npm install js-marker-clusterer @agm/js-marker-clusterer --save</code></li><li>Yarn: <code>yarn add js-marker-clusterer @agm/js-marker-clusterer</code></li></ol><p><strong>Module</strong>: <code>https://www.npmjs.com/package/@agm/js-marker-clusterer</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol><li><p>Import the module in <code>module.ts</code> file of your anulgar application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">// add these imports</span><br><span class="line">import &#123; AgmCoreModule &#125; from &apos;@agm/core&apos;;</span><br><span class="line">import &#123; AgmJsMarkerClustererModule &#125; from &apos;@agm/js-marker-clusterer&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">],</span><br><span class="line">imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AgmCoreModule.forRoot(&#123;</span><br><span class="line">    apiKey: [&apos;YOUR_API_KEY_HERE&apos;]</span><br><span class="line">    &#125;),</span><br><span class="line">    AgmJsMarkerClustererModule</span><br><span class="line">],</span><br><span class="line">providers: [],</span><br><span class="line">bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>Import the modules in angular component </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as MarkerClusterer from &quot;@google/markerclusterer&quot;</span><br><span class="line"></span><br><span class="line">new MarkerClusterer(map, opt_markers, opt_options)</span><br></pre></td></tr></table></figure></li><li><p>Use in your angular component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;agm-map style=&quot;height: 300px&quot; [latitude]=&quot;51.673858&quot; [longitude]=&quot;7.815982&quot;&gt;</span><br><span class="line">    &lt;agm-marker-cluster imagePath=&quot;https://raw.githubusercontent.com/googlemaps/v3-utility-library/master/markerclustererplus/images/m&quot;&gt;</span><br><span class="line">        &lt;agm-marker [latitude]=&quot;51.673858&quot; [longitude]=&quot;7.815982&quot;&gt;</span><br><span class="line">        &lt;/agm-marker&gt;&lt;!-- multiple markers --&gt;</span><br><span class="line">    &lt;/agm-marker-cluster&gt;</span><br><span class="line">&lt;/agm-map&gt;</span><br></pre></td></tr></table></figure><h3 id="Customize-your-marker-clusters"><a href="#Customize-your-marker-clusters" class="headerlink" title="Customize your marker clusters"></a>Customize your marker clusters</h3><p>There are many ways to adjust how your marker clusters look and function. Many of them won’t even require that you make edits to the underlying library. Instead, there are a number of options you can set when you create your clusters.</p></li><li><p><code>gridSize</code>: the number of pixels within the cluster grid</p></li><li><p><code>zoomOnClick</code>: whether to zoom in on a cluster when clicked</p></li><li><p><code>maxZoom</code>: what farthest level you can zoom in before regular markers are always displayed</p></li><li><p><code>styles</code>: an array of objects for each cluster type that includes textColor, textSize, and other features of the cluster</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const clusterOptions = &#123;</span><br><span class="line">    imagePath: &quot;https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m&quot;,</span><br><span class="line">    gridSize: 30,</span><br><span class="line">    zoomOnClick: false,</span><br><span class="line">    maxZoom: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OutPut:</p><img src="/blog/Web/angular-maps/custom.png" class="" title="l"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;img src=&quot;/blog/Web/angular-maps/BG.png&quot; class=&quot;&quot; title=&quot;l&quot;&gt;

&lt;h2 id=&quot;Marker-Cluster&quot;&gt;&lt;a href=&quot;#Marker-Cluster&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/blog/categories/Web/"/>
    
    
      <category term="Angular" scheme="https://nayan.co/blog/tags/Angular/"/>
    
      <category term="Google Maps" scheme="https://nayan.co/blog/tags/Google-Maps/"/>
    
      <category term="Large markers" scheme="https://nayan.co/blog/tags/Large-markers/"/>
    
  </entry>
  
  <entry>
    <title>Generating Pdf in Ruby on Rails using Prawn</title>
    <link href="https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/"/>
    <id>https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/</id>
    <published>2020-02-26T06:02:58.000Z</published>
    <updated>2020-06-08T11:31:08.902Z</updated>
    
    <content type="html"><![CDATA[<p>We all must have got requirement to generate PDFs at backend and store that on cloud. Well, here is a quick guide on how you can start generating the PDFs your own way without any limits.</p><img src="/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/prawn.png" class=""><h2 id="Lets-start-generating-PDF-step-by-step"><a href="#Lets-start-generating-PDF-step-by-step" class="headerlink" title="Lets start generating PDF step by step:-"></a>Lets start generating PDF step by step:-</h2><p>1: Add <strong>prawn</strong> gem to your Gemfile</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'prawn'</span></span><br></pre></td></tr></table></figure><p>2: Create an instance of PDF document</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br></pre></td></tr></table></figure><p>3: Draw some text and style that in your own way</p><p><img src="text_style.png" alt="Text Styling"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.text <span class="string">'My Text'</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Styled Text'</span>, <span class="symbol">style:</span> <span class="symbol">:bold</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Sized Text'</span>, <span class="symbol">size:</span> <span class="number">20</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Colored Text'</span>, <span class="symbol">color:</span> <span class="string">'7f7f7f'</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Aligned Text'</span>, <span class="symbol">align:</span> <span class="symbol">:right</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>4: Adding a space/gap before and after drawing a text</p><p><img src="text_spacing.png" alt="Text Gapping"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.text <span class="string">'My Text'</span></span><br><span class="line">receipt_pdf.move_down <span class="number">50</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Text After Moving down'</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>5: Generate Output file</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This will create a file at your project root directory</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Drawing-tables"><a href="#Drawing-tables" class="headerlink" title="Drawing tables:-"></a>Drawing tables:-</h2><p>1: Prepare data to draw the table</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare receipt details to show in a table in the following format</span></span><br><span class="line"><span class="comment"># [[a1,a2]</span></span><br><span class="line"><span class="comment"># [b1,b2]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># this will form following table</span></span><br><span class="line"><span class="comment"># __|_1___2__</span></span><br><span class="line"><span class="comment"># a | a1  a2</span></span><br><span class="line"><span class="comment"># b | b1  b2</span></span><br><span class="line"></span><br><span class="line">table_data = [[<span class="string">'Items'</span>, <span class="string">'Rates'</span>],</span><br><span class="line">              [<span class="string">'Item1'</span>, <span class="string">"1"</span>],</span><br><span class="line">              [<span class="string">'Item2'</span>, <span class="string">"2"</span>],</span><br><span class="line">              [<span class="string">''</span>, <span class="string">''</span>], <span class="comment"># For adding gap between my data</span></span><br><span class="line">              [<span class="string">'Item3'</span>, <span class="string">"3"</span>],</span><br><span class="line">              [<span class="string">'Item4'</span>, <span class="string">"4"</span>]]</span><br></pre></td></tr></table></figure><p>2: Add <strong>prawn/table</strong> requirement before drawing the table</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'prawn/table'</span></span><br></pre></td></tr></table></figure><p>3: Draw Table using prepared data</p><p><img src="table.png" alt="Text Gapping"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.table table_data <span class="comment"># table_data used from previous step</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>4: Styling Rows/Columns/Cells</p><p><img src="table_formatting.png" alt="Table Styling"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line"></span><br><span class="line">receipt_pdf.table table_data, <span class="symbol">cell_style:</span> &#123;<span class="symbol">border_width:</span> <span class="number">0</span>, <span class="symbol">width:</span> <span class="number">250</span>, <span class="symbol">padding:</span> [<span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>], <span class="symbol">text_color:</span> <span class="string">'373737'</span>, <span class="symbol">inline_format:</span> <span class="literal">true</span>&#125; <span class="keyword">do</span></span><br><span class="line"> <span class="comment"># Aligning a specific column cells' text to right</span></span><br><span class="line"> columns(-<span class="number">1</span>).align = <span class="symbol">:right</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># To add bottom padding to a specific row</span></span><br><span class="line"> row(-<span class="number">2</span>).padding_bottom = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># To set width of border for a specific row</span></span><br><span class="line"> row(-<span class="number">1</span>).border_top_width = <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Adding-custom-font-to-your-PDF-document"><a href="#Adding-custom-font-to-your-PDF-document" class="headerlink" title="Adding custom font to your PDF document"></a>Adding custom font to your PDF document</h2><p>1: Download Font Files in <strong>.ttf</strong> format<br>2: Place them into <em>font/your_font_name</em> directory at project root level(Create one if it’s not there)<br>3: Set that font to your PDF document instance</p><p><img src="text_font.png" alt="Using Cutom Font"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">your_font = <span class="string">'font/your_font_name/your_font_name.ttf'</span></span><br><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line"></span><br><span class="line">default_font = receipt_pdf.font.name</span><br><span class="line"></span><br><span class="line">receipt_pdf.text <span class="string">'Default Font Text'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will change font of your entire document after setting this</span></span><br><span class="line">receipt_pdf.font your_font</span><br><span class="line"></span><br><span class="line">receipt_pdf.text <span class="string">'Your Font Text'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will change font of your entire document to default font</span></span><br><span class="line">receipt_pdf.font default_font</span><br><span class="line"></span><br><span class="line">receipt_pdf.move_down <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To Style all cells of a table</span></span><br><span class="line">receipt_pdf.table table_data, <span class="symbol">cell_style:</span> &#123;<span class="symbol">font:</span> your_font&#125;</span><br><span class="line"></span><br><span class="line">receipt_pdf.move_down <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To Style all cells of a specific column</span></span><br><span class="line">receipt_pdf.table table_data <span class="keyword">do</span></span><br><span class="line"> columns(-<span class="number">1</span>).font = your_font</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Limit-the-PDF-page-size-to-drawn-area-only-OR-Remove-extra-white-area-after-drawing-all-your-data"><a href="#Limit-the-PDF-page-size-to-drawn-area-only-OR-Remove-extra-white-area-after-drawing-all-your-data" class="headerlink" title="Limit the PDF page size to drawn area only OR Remove extra white area after drawing all your data"></a>Limit the PDF page size to drawn area only OR Remove extra white area after drawing all your data</h2><p><a href="my_pdf_file.pdf">my_pdf_file.pdf</a></p><p>1: Set page length to much higher value than what you want to draw while creating instance on your PDF document</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new(<span class="symbol">page_size:</span> [<span class="number">600</span>, <span class="number">2000</span>], <span class="symbol">margin:</span> <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>2: Do your drawing</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf.text <span class="string">'My Drawing Here'</span></span><br></pre></td></tr></table></figure><p>3: Clip or Resize the document to the drawn area</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">padding_after_drawing = <span class="number">15</span></span><br><span class="line">initial_width = <span class="number">600</span></span><br><span class="line">initial_height = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.page.dictionary.data[<span class="symbol">:MediaBox</span>] = [<span class="number">0</span>, receipt_pdf.y - padding_after_drawing, initial_width, initial_height]</span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="http://prawnpdf.org/manual.pdf" target="_blank" rel="noopener">Prawn Guide</a> with examples</li><li><a href="http://prawnpdf.org/prawn-table-manual.pdf" target="_blank" rel="noopener">Prawn Table Guide</a> with examples</li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We all must have got requirement to generate PDFs at backend and store that on cloud. Well, here is a quick guide on how you can start ge
      
    
    </summary>
    
    
      <category term="Ruby on Rails" scheme="https://nayan.co/blog/categories/Ruby-on-Rails/"/>
    
    
      <category term="backend" scheme="https://nayan.co/blog/tags/backend/"/>
    
      <category term="rails" scheme="https://nayan.co/blog/tags/rails/"/>
    
      <category term="ruby" scheme="https://nayan.co/blog/tags/ruby/"/>
    
      <category term="ror" scheme="https://nayan.co/blog/tags/ror/"/>
    
      <category term="ruby on rails" scheme="https://nayan.co/blog/tags/ruby-on-rails/"/>
    
      <category term="pdf" scheme="https://nayan.co/blog/tags/pdf/"/>
    
      <category term="generate pdf" scheme="https://nayan.co/blog/tags/generate-pdf/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/blog/tags/Ashish-Jajoria/"/>
    
  </entry>
  
  <entry>
    <title>Angular Charts Features</title>
    <link href="https://nayan.co/blog/Web/angular-advanced/"/>
    <id>https://nayan.co/blog/Web/angular-advanced/</id>
    <published>2020-02-11T11:33:31.000Z</published>
    <updated>2020-06-08T11:31:08.898Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/angular-advanced/BG.png" class="" title="l"><h2 id="Animation-Configuration"><a href="#Animation-Configuration" class="headerlink" title="Animation Configuration"></a>Animation Configuration</h2><p>Chart.js animates charts out of the box. A number of options are provided to configure how the animation looks and how long it takes.</p><p>The following animation options are available. The global options for are defined in Chart.defaults.global.animation.</p><ol><li><p><strong>Duration</strong>: Number of milliseconds an animation takes to complete</p></li><li><p><strong>Easing</strong>: </p><ul><li><code>linear</code></li><li><code>easeInQuad</code></li><li><code>easeOutQuad</code></li><li><code>easeInOutQuad</code></li><li><code>easeInCubic</code></li><li><code>easeOutCubic</code></li><li><code>easeInOutCubic</code></li><li><code>easeInQuart</code></li><li><code>easeOutQuart</code></li><li><code>easeInOutQuart</code></li><li><code>easeInQuint</code></li><li><code>easeOutQ</code></li></ul></li><li><p><strong>Animation Callbacks</strong></p><p>The onProgress and onComplete callbacks are useful for synchronizing an external draw to the chart animation. The callback is passed a Chart.Animation instance:</p></li></ol>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Chart object</span><br><span class="line">  chart: Chart,</span><br><span class="line"></span><br><span class="line">  // Current Animation frame number</span><br><span class="line">  currentStep: number,</span><br><span class="line"></span><br><span class="line">  // Number of animation frames</span><br><span class="line">  numSteps: number,</span><br><span class="line"></span><br><span class="line">  // Animation easing to use</span><br><span class="line">  easing: string,</span><br><span class="line"></span><br><span class="line">  // Function that renders the chart</span><br><span class="line">  render: function,</span><br><span class="line"></span><br><span class="line">  // User callback</span><br><span class="line">  onAnimationProgress: function,</span><br><span class="line"></span><br><span class="line">  // User callback</span><br><span class="line">  onAnimationComplete: function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example-of-preogress-bar-animation"><a href="#Example-of-preogress-bar-animation" class="headerlink" title="Example of preogress bar animation"></a>Example of preogress bar animation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">    type: &apos;line&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    options: &#123;</span><br><span class="line">        animation: &#123;</span><br><span class="line">            onProgress: function(animation) &#123;</span><br><span class="line">                progress.value = animation.animationObject.currentStep / animation.animationObject.numSteps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Legend-Configuration"><a href="#Legend-Configuration" class="headerlink" title="Legend Configuration"></a>Legend Configuration</h2><p>The chart legend displays data about the datasets that are appearing on the chart.</p><ol><li><p><strong>Position</strong><br>Position of the legend. Options are:</p><ul><li><code>top</code></li><li><code>left</code></li><li><code>bottom</code></li><li><code>right</code></li></ul></li><li><p><strong>Align</strong><br>Alignment of the legend. Options are:</p><ul><li><code>start</code></li><li><code>center</code></li><li><code>end</code></li></ul></li><li><p><strong>Legend Item Interface</strong></p><p>Items passed to the legend onClick function are the ones returned from labels.generateLabels. These items must implement the following interface.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Label that will be displayed</span><br><span class="line">  text: string,</span><br><span class="line"></span><br><span class="line">  // Fill style of the legend box</span><br><span class="line">  fillStyle: Color,</span><br><span class="line"></span><br><span class="line">  // If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect</span><br><span class="line">  hidden: boolean,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap</span><br><span class="line">  lineCap: string,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash</span><br><span class="line">  lineDash: number[],</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset</span><br><span class="line">  lineDashOffset: number,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin</span><br><span class="line">  lineJoin: string,</span><br><span class="line"></span><br><span class="line">  // Width of box border</span><br><span class="line">  lineWidth: number,</span><br><span class="line"></span><br><span class="line">  // Stroke style of the legend box</span><br><span class="line">  strokeStyle: Color,</span><br><span class="line"></span><br><span class="line">  // Point style of the legend box (only used if usePointStyle is true)</span><br><span class="line">  pointStyle: string | Image,</span><br><span class="line"></span><br><span class="line">  // Rotation of the point in degrees (only used if usePointStyle is true)</span><br><span class="line">  rotation: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following example will create a chart with the legend enabled and turn all of the text red in color.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">    type: &apos;bar&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    options: &#123;</span><br><span class="line">        legend: &#123;</span><br><span class="line">            display: true,</span><br><span class="line">            labels: &#123;</span><br><span class="line">                fontColor: &apos;rgb(255, 99, 132)&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h2><h3 id="Tooltip-Configuration"><a href="#Tooltip-Configuration" class="headerlink" title="Tooltip Configuration"></a>Tooltip Configuration</h3><ol><li><p><strong>Position Modes</strong><br>Possible modes are:</p><ul><li><code>average</code></li><li><code>nearest</code></li></ul></li><li><p><strong>Alignment</strong><br>The titleAlign, bodyAlign and footerAlign options define the horizontal position of the text lines with respect to the tooltip box. The following values are supported.</p><ul><li><code>left</code></li><li><code>right</code></li><li><code>center</code></li></ul></li></ol><h3 id="Tooltip-Callbacks"><a href="#Tooltip-Callbacks" class="headerlink" title="Tooltip Callbacks"></a>Tooltip Callbacks</h3><ol><li><p><strong>Label Callback</strong></p><p>The label callback can change the text that displays for a given data point. A common example to round data values; the following example rounds the data to two decimal places.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">  type: &apos;line&apos;,</span><br><span class="line">  data: data,</span><br><span class="line">  options: &#123;</span><br><span class="line">      tooltips: &#123;</span><br><span class="line">          callbacks: &#123;</span><br><span class="line">              label: function(tooltipItem, data) &#123;</span><br><span class="line">                  var label = data.datasets[tooltipItem.datasetIndex].label || &apos;&apos;;</span><br><span class="line"></span><br><span class="line">                  if (label) &#123;</span><br><span class="line">                      label += &apos;: &apos;;</span><br><span class="line">                  &#125;</span><br><span class="line">                  label += Math.round(tooltipItem.yLabel * 100) / 100;</span><br><span class="line">                  return label;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>Label Color Callback</strong></p><p>For example, to return a red box for each item in the tooltip you could do:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">  type: &apos;line&apos;,</span><br><span class="line">  data: data,</span><br><span class="line">  options: &#123;</span><br><span class="line">      tooltips: &#123;</span><br><span class="line">          callbacks: &#123;</span><br><span class="line">              labelColor: function(tooltipItem, chart) &#123;</span><br><span class="line">                  return &#123;</span><br><span class="line">                      borderColor: &apos;rgb(255, 0, 0)&apos;,</span><br><span class="line">                      backgroundColor: &apos;rgb(255, 0, 0)&apos;</span><br><span class="line">                  &#125;;</span><br><span class="line">              &#125;,</span><br><span class="line">              labelTextColor: function(tooltipItem, chart) &#123;</span><br><span class="line">                  return &apos;#543453&apos;;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>Tooltip Item Interface</strong></p><p>The tooltip items passed to the tooltip callbacks implement the following interface.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Label for the tooltip</span><br><span class="line">  label: string,</span><br><span class="line"></span><br><span class="line">  // Value for the tooltip</span><br><span class="line">  value: string,</span><br><span class="line"></span><br><span class="line">  // X Value of the tooltip</span><br><span class="line">  // (deprecated) use `value` or `label` instead</span><br><span class="line">  xLabel: number | string,</span><br><span class="line"></span><br><span class="line">  // Y value of the tooltip</span><br><span class="line">  // (deprecated) use `value` or `label` instead</span><br><span class="line">  yLabel: number | string,</span><br><span class="line"></span><br><span class="line">  // Index of the dataset the item comes from</span><br><span class="line">  datasetIndex: number,</span><br><span class="line"></span><br><span class="line">  // Index of this data item in the dataset</span><br><span class="line">  index: number,</span><br><span class="line"></span><br><span class="line">  // X position of matching point</span><br><span class="line">  x: number,</span><br><span class="line"></span><br><span class="line">  // Y position of matching point</span><br><span class="line">  y: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://jtblin.github.io/angular-chart.js/" target="_blank" rel="noopener">https://jtblin.github.io/angular-chart.js/</a></li><li><a href="https://github.com/jtblin/angular-chart.js/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jtblin/angular-chart.js/blob/master/README.md</a></li><li><a href="https://valor-software.com/ng2-charts/" target="_blank" rel="noopener">https://valor-software.com/ng2-charts/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;img src=&quot;/blog/Web/angular-advanced/BG.png&quot; class=&quot;&quot; title=&quot;l&quot;&gt;

&lt;h2 id=&quot;Animation-Configuration&quot;&gt;&lt;a href=&quot;#Animation-Configuration&quot; 
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/blog/categories/Web/"/>
    
    
      <category term="Charts" scheme="https://nayan.co/blog/tags/Charts/"/>
    
      <category term="Plugins" scheme="https://nayan.co/blog/tags/Plugins/"/>
    
      <category term="Customization" scheme="https://nayan.co/blog/tags/Customization/"/>
    
  </entry>
  
  <entry>
    <title>Flask + PyMongo Integration</title>
    <link href="https://nayan.co/blog/uncategorized/Flask-PyMongo-Integration/"/>
    <id>https://nayan.co/blog/uncategorized/Flask-PyMongo-Integration/</id>
    <published>2020-02-05T11:09:31.000Z</published>
    <updated>2020-06-08T11:31:08.858Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/uncategorized/Flask-PyMongo-Integration/maxresdefault.jpg" class=""><p>Flask + PyMongo Integration</p><p>In my college days I found quite difficulty regarding “How to integrate my application with the database”. May be most of us (mostly college students) still have the same problem. So today in this post I will show you how to integrate a Flask application with PyMongo.</p><p>What is <strong>PyMongo</strong>?</p><p>As according to its official site,“<strong>PyMongo is a Python distribution containing tools for working with <a href="http://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>, and is the recommended way to work with MongoDB from Python</strong>”. The PyMongo is very easy to use and quite easy to integrate with Flask. For this you must have install MongoDb in your machine.</p><p><strong>Let’s get started.</strong></p><p>If you are new to flask then before diving more into it, I highly recommend to check out my <a href="https://medium.com/@hghimanshu81/how-to-represent-any-trained-model-in-the-form-of-a-web-application-e5af87d9731d" target="_blank" rel="noopener">previous</a> post in which I discussed about how to create your first application.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Sf16kjWkKCSGNfR3mVRcUQ.png" alt="Fig. 1 Folder structure for the project"></p><p>Firstly we will write some basic files for the project before heading towards the main backend logic. Firstly we write the <strong><em>run.py</em></strong> file and write the code to start our flask server</p><pre><code>from labeler import app as  applicationfrom labeler import configapplication.config.from_object(config)application.config.from_pyfile(&apos;config/config.py&apos;)if __name__ == &quot;__main__&quot;:    application.run(host=&apos;0.0.0.0&apos;, port=8000)</code></pre><p>Now, write the <strong><strong>init</strong>.py</strong></p><pre><code>from flask import Flaskfrom flask_bootstrap import Bootstrapapp = Flask(__name__)Bootstrap(app)from labeler import routes</code></pre><p>Now make a <strong>settings.py</strong> file inside the <strong>config</strong> folder and write the below code in it.</p><pre><code>import pymongofrom pymongo import MongoClientENV = &quot;test&quot;if ENV.lower() == &quot;production&quot;:    MONGO_DB_NAME = &apos;image_search&apos;    MONGO_DB_URL = &apos;localhost&apos;else:    MONGO_DB_NAME = &apos;image_search_local&apos;    MONGO_DB_URL = &apos;localhost&apos;CLIENT = MongoClient()CLIENT = MongoClient(MONGO_DB_URL, 27017)DB = CLIENT[MONGO_DB_NAME]</code></pre><p>In this script, we simple configure our mongo database and connect pymongo with the DB.</p><p>Now, its time to make a script for mongo queries. Lets create a <strong>mongo.py</strong> file inside <strong>mongodb</strong> folder and write the below lines in it.</p><pre><code>import pymongofrom pymongo import MongoClientimport sysfrom labeler.config.settings import DBclass settingupDb:    def __init__(self, query, coll_name):        self.query = query        self.coll_name = coll_name    def constructDb(self):        self.coll = DB[self.coll_name]        return self.coll    def insertsToDb(self,db,coll,query):        self.post_id = coll.insert(self.query, check_keys=False)        print(&apos;Data inserted for Object ID:: &apos;,self.post_id)    def updatesInfo(self, db, coll, query, newVal):        self.query = query        self.newVal = newVal        self.updatedColl = coll.update_many(self.query, self.newVal)   def fetchInfo(self, db, coll, query):        self.results = coll.find(query)        return self.results   def aggregateQuery(self, db, coll, query_in_list):       self.results = coll.aggregate(query_in_list)       return self.resultsdef insertData(query, collection):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    c_db.insertsToDb(DB, coll, query)def fetchData(collection, query):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    res = c_db.fetchInfo(DB, coll, query)    return resdef groupingData(collection, query):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    res = c_db.aggregateQuery(DB, coll, query)    return resdef updateData(query, newVal, collection):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    c_db.updatesInfo(DB, coll, query, newVal)</code></pre><p>In this script, I created a class <em>settingupDb</em>, it basically sets up the db. Then defines some methods based on the queries. In this project we use some basic queries like :-</p><ul><li><p>Insert</p></li><li><p>Find</p></li><li><p>Update</p></li><li><p>Aggregate</p></li></ul><p>Will explain the use of these queries when we use them in the project.</p><p>Now lets make our <strong>routes.py</strong> file.</p><pre><code>from labeler import appimport jsonimport osfrom werkzeug import secure_filenameimport flaskfrom flask import render_templatefrom labeler.backend.handle_requests import STATIC_FOLDER = os.path.dirname(os.path.abspath(__file__)) + &apos;/static/&apos;</code></pre><p>Firstly we will import everything in the script. The last line is for the static folder where we server our media files.</p><p>Since our database is empty, so firstly we will write a <strong>Data Insertion</strong> endpoint. Now, write a <strong>handle_requests.py</strong> file inside the <strong>backend</strong> folder.</p><pre><code>from labeler.mongodb.mongo import fetchData, insertDataCOLL = &quot;Image-Data&quot;def isLabelInDb(label, image_path):    query = {&quot;label&quot;: label}    res = fetchData(COLL, query)    alreadyPresent = False    if res.count() == 0:        insert_q = {&quot;label&quot;: label, &quot;image_path&quot;: image_path}           insertData(insert_q, COLL)    else:        alreadyPresent = True    return alreadyPresent</code></pre><p>This function deals with the insertion and fetching part. The input is the label and the image. Firstly it checks the given label is already present in the database or not, if the label is not present then it inserts it into the database along with the image and if the label is already there in the database then it sets the “alreadyPresent” flag. Now according to the this logic we write our endpoint in the <strong>routes.py</strong> file.</p><pre><code>@app.route(&quot;/createLabels&quot;, methods=[&apos;GET&apos;, &apos;POST&apos;])def createLabels():    if flask.request.method == &apos;POST&apos;:        image = flask.request.files[&apos;image&apos;]        label = flask.request.form[&apos;label&apos;]        image.save(STATIC_FOLDER + secure_filename(image.filename))        alreadyPresent = isLabelInDb(label, image.filename)        if alreadyPresent:            message = &quot;The label is already in the database. Try with other label&quot;            return render_template(&apos;error.html&apos;, message = message)        else:            message = &quot;The label is successfully inserted to the database&quot;            return render_template(&apos;success.html&apos;, message = message)    else:        return render_template(&apos;createLabels.html&apos;)</code></pre><p>This endpoint takes two input for a <em>POST</em> request. The “image” and “label”. It calls the function described above and it renders a template with a message.</p><p>Now we defines our “home” endpoint. In <strong>routes.py</strong> write the below code.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*xcCmqMUDBsx78ryCtf5NHg.png" alt="Fig. 2. Page which creates the label and upload the associated image"></p><pre><code>@app.route(&apos;/home&apos;)def home():    allImages = getAllImages()    data = {}    if len(list(allImages._CommandCursor__data)) != 0:        for r in allImages:            label = r[&apos;_id&apos;]            images = r[&apos;image_path&apos;]            data[label] = images    return render_template(&apos;home.html&apos;, results=data)</code></pre><p>This renders all the images with their function to the home page. Lets create a “getAllImages” function for this code. In the <strong>handle_requests.py</strong> write below code.</p><p><img src="https://cdn-images-1.medium.com/max/2074/1*a0ZuZwhq8SCJJmJKwhVXjg.png" alt="Fig. 3. Home page of the application shows the available labels"></p><pre><code>def getAllImages():    group_q = {&quot;$group&quot;: {&quot;_id&quot;: &quot;$label&quot;, &quot;image_path&quot;: {&quot;$push&quot;: &quot;$image_path&quot;}}}    project_q = {&quot;$project&quot;: {&quot;label&quot;: 1, &quot;image_path&quot;:1}}    pipeline = [group_q, project_q]    res = groupingData(COLL, pipeline)    return res</code></pre><p>This function is basically grouping all the data based on the labels name present in the database and all image values associated with that are pushed into an array.</p><p>Now, we will write a function for fetching of image from database. In the <strong>handle_requests.py</strong> write the below code.</p><pre><code>def getRequiredImages(label):    query = {&quot;label&quot;: label}    res = fetchData(COLL, query)    totalImages = []    if res.count() != 0:        for i in res:            image_name = i[&apos;image_path&apos;]            totalImages.append(image_name)    return totalImages</code></pre><p>This function fetches all the images from the database for the given label name and returns them as a list. Now lets create its endpoint in the <strong>routes.py</strong>.</p><pre><code>@app.route(&apos;/fetchImages&apos;, methods=[&apos;POST&apos;])def fetchImages():    if flask.request.method == &apos;POST&apos;:        label = flask.request.form[&apos;label&apos;]        totalImages = getRequiredImages(label)        if len(totalImages) == 0:            message = &quot;No image is present in the database with the label &quot; + str(label)            return render_template(&apos;error.html&apos;, message = message)        else:            data = [totalImages, label]            return render_template(&apos;show_images.html&apos;, results=data)</code></pre><p>This endpoint takes a label name as input and fetches its images from the database and renders the image on the template.</p><p><img src="https://cdn-images-1.medium.com/max/2440/1*deLzuuUyotCHuYGIz3isfg.png" alt="Fig. 4. Fetching a particular label from the database"></p><p>Now the last type of operation left is <strong>UPDATE</strong>. For this write the below code in <strong>handle_requests.py</strong>.</p><pre><code>def updateInfo(image_path, curr_label, new_label):    curr_label_q = {&quot;label&quot;: curr_label}    new_label_q = {&quot;$set&quot;: {&quot;label&quot;: new_label}}    updateData(curr_label_q, new_label_q, COLL)</code></pre><p>This function takes three input :-</p><ul><li><p>the image name</p></li><li><p>the current label name</p></li><li><p>the new label name</p></li></ul><p>Now its corresponding endpoint in the <strong>routes.py</strong></p><pre><code>@app.route(&apos;/updateLabel&apos;, methods=[&apos;POST&apos;])def updateLabel():    if flask.request.method == &apos;POST&apos;:        image = flask.request.form[&apos;image&apos;]        curr_value = flask.request.form[&apos;current_label&apos;]        new_value = flask.request.form[&apos;new_label&apos;]        updateInfo(image, curr_value, new_value)        message = &quot;Label is updated !!&quot;        return render_template(&apos;success.html&apos;, message=message)</code></pre><p>This endpoint shows a message after successful updation of labels</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*4d_3cmuiPbHOUqW8TLfjgQ.png" alt="Fig. 5. Message showing that label is changed"></p><p><strong>Conclusion</strong></p><p>This is the very basic application which is made by integrating flask with pymongo. The code is available on <a href="https://github.com/hghimanshu/Blog/tree/master/image-labeler" target="_blank" rel="noopener">github.</a> The necessary templates are also uploaded there.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/uncategorized/Flask-PyMongo-Integration/maxresdefault.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;Flask + PyMongo Integration&lt;/p&gt;
&lt;p&gt;In my college da
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>App-Heartbeat</title>
    <link href="https://nayan.co/blog/Android/App-Heartbeat/"/>
    <id>https://nayan.co/blog/Android/App-Heartbeat/</id>
    <published>2020-02-03T13:40:48.000Z</published>
    <updated>2020-06-08T11:31:08.850Z</updated>
    
    <content type="html"><![CDATA[<p>This is an era of mobile technology where everyone is a smartphone user. To be able to use a smartphone we need to ‘Interact’ with it. A simple touch with a finger to open an app is an example of this ‘interact’ and this phenomenon is called ‘User Interaction’.<br>Heart of application will continue beat, as long as user interact. Heartbeat is used to calculate sessions, for how much time a user is interacted with application. When a user is started using app, we create a session. A session has two values, start time and end time. For a new session both start and end time will same (current time of system). Every one minute, we check, is user interacted or not. If user is interacted then we update that session by changing its end time (now end time for that session will be current time of system). If user is not interacted then we create a new session. Reason behind to create a heartbeat of application , we will have at least 60 seconds lost.</p><img src="/blog/Android/App-Heartbeat/heartbeat.jpeg" class="" title="Image_1"><h2 id="Let’s-get-started"><a href="#Let’s-get-started" class="headerlink" title="Let’s get started"></a>Let’s get started</h2><h3 id="Create-a-model"><a href="#Create-a-model" class="headerlink" title="Create a model"></a>Create a model</h3><p>In that data class, we will handle some sessions related tasks (check session is active or not, update session etc.). A session will have two values start time and end time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data class Session(</span><br><span class="line">    val startTime: Long,</span><br><span class="line">    var endTime: Long</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>We perform some operations in session -</p><h4 id="Is-session-active"><a href="#Is-session-active" class="headerlink" title="- Is session active :"></a>- Is session active :</h4><p>In that we check current session is active or not. If difference between System current time and end time of that session is less than a heartbeat( heartbeat duration + heartbeat buffer). In our case heartbeat duration is 60 seconds and heartbeat buffer is 2 seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun isActive(): Boolean &#123;</span><br><span class="line">        return System.currentTimeMillis() - endTime &lt;  HEARTBEAT_DURATION + HEARTBEAT_BUFFER</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Update-current-session"><a href="#Update-current-session" class="headerlink" title="- Update current session:"></a>- Update current session:</h4><p>If session is active then we update current session. For updating current session we will put system current time in end time of that session.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun update(): Session &#123;</span><br><span class="line">        endTime = System.currentTimeMillis()</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Create-a-manager"><a href="#Create-a-manager" class="headerlink" title="Create a manager"></a>Create a manager</h3><p>For handling all heartbeat operations, we will create a session manager. A session manager will manage all sessions activities like — add session, update session. When we open application in onResume() of activity we will start a handler and onPause(),will stop handler.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">init &#123;</span><br><span class="line">    lifecycleOwner.lifecycle.addObserver(object : LifecycleObserver</span><br><span class="line">           &#123;</span><br><span class="line">               @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span><br><span class="line">               fun startSession() &#123;</span><br><span class="line">               Timber.d(&quot;Starting Session for activity:$&#123;lifecycleOwner.javaClass.name&#125;&quot;)</span><br><span class="line">               handler.post(runnable)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">               fun pauseSession() &#123;</span><br><span class="line">               Timber.d(&quot;Pausing Session for activity:    $&#123;lifecycleOwner.javaClass.name&#125;&quot;)</span><br><span class="line">               handler.removeCallbacks(runnable)</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>In handler we are checking heartbeat of application, that user is interacted with app for last 60 seconds or not. If user is interacted then update current session otherwise create new session. We store these sessions into shared preferences.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fun heartBeat() &#123;</span><br><span class="line">    if (hasUserInteracted) &#123;</span><br><span class="line">        val currentSession = getLastSession()</span><br><span class="line">        if (currentSession != null &amp;&amp; currentSession.isActive()) &#123;</span><br><span class="line">            updateCurrentSession()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            createNewSession()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        handler.removeCallbacks(runnable)</span><br><span class="line">        onSessionTimeoutListener.onTimeout()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hasUserInteracted = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For more sample code , see the <a href="https://github.com/diwakarsinghdiwakar/App-Heartbeat" target="_blank" rel="noopener" title="App-Heartbeat"><code>App-Heartbeat</code></a></p><h2 id="And-we’re-done"><a href="#And-we’re-done" class="headerlink" title="And we’re done!"></a>And we’re done!</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is an era of mobile technology where everyone is a smartphone user. To be able to use a smartphone we need to ‘Interact’ with it. A 
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/blog/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/blog/tags/android/"/>
    
      <category term="user interaction" scheme="https://nayan.co/blog/tags/user-interaction/"/>
    
      <category term="sessions" scheme="https://nayan.co/blog/tags/sessions/"/>
    
  </entry>
  
  <entry>
    <title>Override Devise Auth Token Controllers</title>
    <link href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/"/>
    <id>https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/</id>
    <published>2020-01-29T15:56:25.000Z</published>
    <updated>2020-06-08T11:31:08.902Z</updated>
    
    <content type="html"><![CDATA[<p>For authentication and token management at backend in Ruby On Rails we use <a href="https://github.com/lynndylanhurley/devise_token_auth" target="_blank" rel="noopener">devise-token-auth</a>.</p><img src="/blog/Ruby-on-Rails/override-devise-auth-token-controllers/devise_token_auth.png" class=""><h2 id="Sometimes-we-need-to-update-some-of-the-following-default-behaviours"><a href="#Sometimes-we-need-to-update-some-of-the-following-default-behaviours" class="headerlink" title="Sometimes we need to update some of the following default behaviours:-"></a>Sometimes we need to update some of the following default behaviours:-</h2><ul><li>Registration(via facebook, twitter, mobile, email etc.)</li><li>Password reset flow(email reset link OR OTP based)</li><li>We would like to add or remove some fields from the signin API.<br>etc</li></ul><h2 id="Configutation"><a href="#Configutation" class="headerlink" title="Configutation:-"></a>Configutation:-</h2><p>Use <a href="https://devise-token-auth.gitbook.io/devise-token-auth/" target="_blank" rel="noopener">devise-token-auth-guide</a> to setup your devise configuration.</p><p>After configuration, your <strong>routes.rb</strong> would look like this:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line">mount_devise_token_auth_for <span class="string">'User'</span>, <span class="symbol">at:</span> <span class="string">'auth'</span></span><br></pre></td></tr></table></figure><h2 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding:-"></a>Overriding:-</h2><ul><li>Create a package named <code>overrides</code>, in cotrollers package.</li><li><strong>For overriding RegistrationsController</strong> used for signup flow, add <code>registrations_controller.rb</code> to the package we just created and extent the RegistrationsController by <code>DeviseTokenAuth::RegistrationsController</code>.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Overrides</span></span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationsController</span> &lt; DeviseTokenAuth::RegistrationsController</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Now write the <code>create</code> method yourself for your custom parameters you want to use while signing up a user with custom conditions and if there is any condition when you don’t want to handle, then just call <strong>super</strong> and the default signup flow will work for that case.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Overrides</span></span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationsController</span> &lt; DeviseTokenAuth::RegistrationsController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line"></span><br><span class="line">   ... <span class="comment">#Your custom conditions and handling</span></span><br><span class="line"></span><br><span class="line">   @resource = User.new(<span class="symbol">email:</span> email) <span class="comment">#This may vary based on your params and conditions you want</span></span><br><span class="line">   @resource.name = params[<span class="symbol">:name</span>]</span><br><span class="line">   @resource.password = params[<span class="symbol">:password</span>]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">unless</span> @resource.save</span><br><span class="line">    render <span class="symbol">json:</span> &#123; <span class="symbol">message:</span> @resource.errors.full_messages.join(<span class="string">', '</span>) &#125;, <span class="symbol">status:</span> <span class="symbol">:bad_request</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   @token = @resource.create_token</span><br><span class="line">   @resource.save</span><br><span class="line"></span><br><span class="line">   update_auth_header</span><br><span class="line">   render_create_success</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Now Update your <strong>routes.rb</strong></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount_devise_token_auth_for <span class="string">'User'</span>, <span class="symbol">at:</span> <span class="string">'auth'</span>, <span class="symbol">controllers:</span> &#123;</span><br><span class="line"> <span class="symbol">registrations:</span> <span class="string">'overrides/registrations'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Likewise-we-can-override-following-controllers"><a href="#Likewise-we-can-override-following-controllers" class="headerlink" title="Likewise we can override following controllers:-"></a>Likewise we can override following controllers:-</h2><ul><li>ConfirmationsController</li><li>PasswordsController</li><li>OmniauthCallbacksController</li><li>SessionsController</li><li>TokenValidationsController<br>&nbsp;</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://github.com/lynndylanhurley/devise_token_auth" target="_blank" rel="noopener">devise_token_auth</a> gem</li><li><a href="https://devise-token-auth.gitbook.io/devise-token-auth/" target="_blank" rel="noopener">Devise Token Auth</a> Guide</li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/">Generating Pdf in Ruby on Rails using Prawn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For authentication and token management at backend in Ruby On Rails we use &lt;a href=&quot;https://github.com/lynndylanhurley/devise_token_auth&quot;
      
    
    </summary>
    
    
      <category term="Ruby on Rails" scheme="https://nayan.co/blog/categories/Ruby-on-Rails/"/>
    
    
      <category term="backend" scheme="https://nayan.co/blog/tags/backend/"/>
    
      <category term="rails" scheme="https://nayan.co/blog/tags/rails/"/>
    
      <category term="ruby" scheme="https://nayan.co/blog/tags/ruby/"/>
    
      <category term="ror" scheme="https://nayan.co/blog/tags/ror/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/blog/tags/Ashish-Jajoria/"/>
    
      <category term="authentication" scheme="https://nayan.co/blog/tags/authentication/"/>
    
      <category term="devise" scheme="https://nayan.co/blog/tags/devise/"/>
    
      <category term="devise_auth_token" scheme="https://nayan.co/blog/tags/devise-auth-token/"/>
    
  </entry>
  
  <entry>
    <title>Character-Recognition-with-CNN-network</title>
    <link href="https://nayan.co/blog/AI/Character-Recognition-with-CNN-network/"/>
    <id>https://nayan.co/blog/AI/Character-Recognition-with-CNN-network/</id>
    <published>2020-01-29T11:47:04.000Z</published>
    <updated>2020-06-08T11:31:08.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post talks about a simple Convolution Neural Network (CNN) which is used to<br>recognize characters i.e. Numeric and Alphabet. We have total 10 Numeric and 26<br>Alphabets that sums up the total number of classes in our network to 36. In<br>order to get characters from the License Plates we first need to use some kind<br>of License Plate detector which is followed by a Character segmentation method<br>in order to extract character from the License Plates (LP).</p><h2 id="Architecture-of-model"><a href="#Architecture-of-model" class="headerlink" title="Architecture of model"></a>Architecture of model</h2><p>We have used very familiar CNN network for OCR, usually CNN consists of some<br>Convolution layers(All Convolution layers are followed by max pooling layers)<br>and fully connected layers.</p><p>We already know much about Convolution layers so i am gonna talk about max<br>pooling and fully connected layers here.</p><p><strong>Pooling</strong> <strong>layers</strong> section would reduce the number of parameters when the<br>images are too large. Spatial pooling also called sub-sampling or down-sampling<br>which reduces the dimensionality of each map but retains important information.<br>Spatial pooling can be of different types:</p><ul><li>Max Pooling</li><li>Average Pooling</li><li>Sum Pooling</li></ul><p>Max pooling takes the largest element from the rectified feature map. Taking the<br>largest element could also take the average pooling. Sum of all elements in the<br>feature map call as sum pooling.</p><p>The layer we call as <strong>Fully Connected Layer (FC) layer</strong>, we flattened our<br>matrix into vector and feed it into a fully connected layer like a neural<br>network. After the last max pooling layer there will be a sequence of FC layers.<br>Finally we will apply an activation function such as softmax or sigmoid to<br>classify the outputs between classes.</p><p>Model configuration is given below:</p><p>Total layer : 14</p><ol><li>Convolution with 64 different filters in size of (3x3)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function</li><li>Batch Normalization</li></ul></li><li>Convolution with 128 different filters in size of (3x3)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function</li><li>Batch Normalization</li></ul></li><li>Convolution with 256 different filters in size of (5x5)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function </li><li>Batch Normalization</li></ul></li><li>Convolution with 512 different filters in size of (5x5)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function </li><li>Batch Normalization</li></ul></li><li>Flattening the 3-D output of the last convolving operations.</li><li>Fully Connected Layer with 128 units</li><li>Fully Connected Layer with 256 units</li><li>Fully Connected Layer with 512 units</li><li>Fully Connected Layer with 1024 units</li><li>Fully Connected Layer with 36 units (number of classes)<img src="/blog/AI/Character-Recognition-with-CNN-network/p1.png" class=""> <center>Figure 1.  Architecture of model</center></li></ol><h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><p>Defining a placeholder in tensorflow is very common. When we want to declare our<br>input and output without initialization this method comes very useful. You can<br>use them during training of model by feeding them with training data and labels.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def create_placeholders(n_H0, n_W0, n_C0, n_y):</span><br><span class="line">    X = tf.placeholder(tf.float32, shape = (None, n_H0, n_W0, n_C0), name=&apos;X&apos;)</span><br><span class="line">    Y = tf.placeholder(tf.float32, shape = (None, n_y), name = &apos;Y&apos;)</span><br><span class="line">    keep_prob = tf.placeholder(tf.float32, name=&quot;keep_prob&quot;)</span><br><span class="line"></span><br><span class="line">    return X,Y,keep_prob</span><br><span class="line"></span><br><span class="line"># X_train contains training data with shape (batch_size,height,widht,channel)</span><br><span class="line"></span><br><span class="line"># Y_train contains labels of training data with shape (batch_size,num_classes,1)</span><br><span class="line">m, n_H0, n_W0, n_C0 = X_train.shape</span><br><span class="line">n_y = Y_train.shape[1]</span><br><span class="line">X, Y, keep_prob = create_placeholders(n_H0, n_W0, n_C0, n_y)</span><br></pre></td></tr></table></figure><br> <p>Once you have defined your model architecture you now need to define cost and<br>optimizer for your model which is defined in the next section.</p><h2 id="Cost-function-and-optimizer"><a href="#Cost-function-and-optimizer" class="headerlink" title="Cost function and optimizer"></a>Cost function and optimizer</h2><p>Cost function gives degree of error between predicted and expected values and<br>after that it represent it in form of a real number. Whereas optimizer update<br>the weight parameters to minimize the cost function.</p><p>Finally, you’ll define cost, optimizer, and accuracy. The <a href="https://www.tensorflow.org/api_docs/python/tf/math/reduce_mean" target="_blank" rel="noopener">tf.reduce_mean</a><br>takes an input tensor to reduce, and the input tensor is the results of  certain<br>loss functions between predicted results and ground truths. We have to measure<br>loss over 36 classes, <a href="https://www.tensorflow.org/api_docs/python/tf/nn/softmax_cross_entropy_with_logits" target="_blank" rel="noopener">tf.nn.softmax_cross_entropy_with_logis</a>  function is<br>used. </p><p>When training the network, what you want is minimize  the cost by applying a<br>algorithm of your choice. It could be <a href="https://www.tensorflow.org/api_docs/python/tf/train/GradientDescentOptimizer" target="_blank" rel="noopener">SGD</a>,<a href="https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer" target="_blank" rel="noopener">AdamOptimizer</a><a href="https://www.tensorflow.org/api_docs/python/tf/train/AdagradOptimizer" target="_blank" rel="noopener">,AdagradOptimizer</a> or<br>something else. You have to study how each algorithm works to choose what<br>to use, but AdamOptimizer works fine for most cases in general.</p><p>Please find cost and optimizer sample below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = 0.001</span><br><span class="line"># X is placeholder you defined in previous section</span><br><span class="line">Z3 = forward_propagation(X, keep_prob)</span><br><span class="line"></span><br><span class="line"># Z3 has the model structure</span><br><span class="line"># Loss and Optimizer</span><br><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=Z3, labels=Y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"># Accuracy</span><br><span class="line">y_pred = tf.nn.softmax(Z3)</span><br><span class="line">y_pred_class = tf.argmax(y_pred, axis = 1)</span><br><span class="line">y_true_class = tf.argmax(Y, axis = 1)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(y_pred_class, y_true_class)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So in this post i have explained basic steps to train simple CNN network for any<br>classification task i.e. OCR in this particular post. I have given all the steps<br>except the training part for that you just need to use session of tensorflow<br>while feeding image data and labels for those images to placeholder you have<br>created to the session.run function.</p><br> <br> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This post talks about a simple
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="https://nayan.co/blog/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="https://nayan.co/blog/tags/Deep-Learning/"/>
    
      <category term="OCR" scheme="https://nayan.co/blog/tags/OCR/"/>
    
      <category term="Character Recognition" scheme="https://nayan.co/blog/tags/Character-Recognition/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with Ruby on Rails</title>
    <link href="https://nayan.co/blog/Rails/rails-getting-started/"/>
    <id>https://nayan.co/blog/Rails/rails-getting-started/</id>
    <published>2020-01-28T08:00:00.000Z</published>
    <updated>2020-06-08T11:31:08.926Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Rails/rails-getting-started/ruby-on-rails.png" class=""><p>We recently inducted a couple of engineers into our Rails team. Both of them had a web frontend experience, but zero experience with Ruby or backend development. Thanks to the simplicity and convention focussed approach of the Rails framework, both of them were writing test driven production grade code within a week!</p><p>First thing was setting up their machines. We decided to go with</p><ul><li>Ubuntu 18.04 for the OS</li><li>RVM as the Ruby version manager</li><li>RubyMine as the IDE</li><li>Postgresql as the database</li></ul><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>First step was to get them comfortable with Ruby. We believe that doing is the best way of learning. So we got them to complete the wonderful koans at <a href="http://rubykoans.com/" target="_blank" rel="noopener">http://rubykoans.com/</a> to get hands on practice.</p><p>An important thing while working in a team is to have consistent coding style across all members. We follow the style guide at <a href="https://github.com/rubocop-hq/ruby-style-guide" target="_blank" rel="noopener">https://github.com/rubocop-hq/ruby-style-guide</a> , so they read through the guide.</p><h3 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h3><p>We feel the best guide for Rails is the official guide itself.</p><p><a href="https://edgeguides.rubyonrails.org/" target="_blank" rel="noopener">https://edgeguides.rubyonrails.org/</a></p><p>The three sections that were assigned were,</p><ul><li>Getting Started with Rails</li><li>Models</li><li>Controllers</li></ul><p>We skipped the views as we mostly work on API only apps.</p><p>After this, we covered the Rails style guide <a href="https://github.com/rubocop-hq/rails-style-guide" target="_blank" rel="noopener">https://github.com/rubocop-hq/rails-style-guide</a> .</p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>We use <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a> and <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">FactoryBot</a> internally for writing our tests.</p><p>For RSpec, the Github page is a good starting point <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">https://github.com/rspec/rspec-rails</a></p><p>For FactoryBot, we assigned the Getting Started guide on Github <a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md" target="_blank" rel="noopener">https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md</a></p><h3 id="Continuing-Education"><a href="#Continuing-Education" class="headerlink" title="Continuing Education"></a>Continuing Education</h3><p>With these basic tutorials, the engineers were basically ready for contributing to production. Their first few pull requests had many comments, but they came down significantly within the first two weeks.</p><p>For continuing our Rails education, we keep reading up on the frequent gems that we use, such as</p><ul><li>devise</li><li>aasm</li><li>active_model_serializers</li><li>pundit</li><li>resque</li><li>whenever</li><li>carrierwave</li></ul><p>and other excellent gems.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>We got a pleasant reminder as to why Rails is our favorite framework to work on. Within the first few weeks only the engineers were writing production grade, well tested code.</p><p>Hats off to the Ruby philosophy and Matz that our fresh Ruby engineers were able to start guessing the function names for different classes almost immediately!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Rails/rails-getting-started/ruby-on-rails.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;We recently inducted a couple of engineers into our Rails team.
      
    
    </summary>
    
    
      <category term="Rails" scheme="https://nayan.co/blog/categories/Rails/"/>
    
    
      <category term="Ruby" scheme="https://nayan.co/blog/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://nayan.co/blog/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>MySQL in custom Grafana panels</title>
    <link href="https://nayan.co/blog/Web/using-mysql-in-custom-grafana-panel/"/>
    <id>https://nayan.co/blog/Web/using-mysql-in-custom-grafana-panel/</id>
    <published>2020-01-26T19:18:48.000Z</published>
    <updated>2020-06-08T11:31:08.926Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/using-mysql-in-custom-grafana-panel/grafana.png" class="" title="l"><blockquote><p>In this post, we will see how to use MySQL in your custom panel in Grafana.</p></blockquote><p><em>If you don’t know how to make <strong>custom panels</strong> read this post before this. <a href="https://nayan.co/blog/2020/01/06/create-custom-grafana-panel/">https://nayan.co/blog/2020/01/06/create-custom-grafana-panel/</a></em></p><h3 id="MySQL-in-Grafana"><a href="#MySQL-in-Grafana" class="headerlink" title="MySQL in Grafana"></a>MySQL in Grafana</h3><p>To use your MySQL in your dashboard, you need to link your MySQL db with your dashboard. To do so, follow the steps below:</p><ul><li>Find the <strong>Configurations</strong> icon of your Grafana on the left side of your dashbaord.</li><li>Click <strong>Add Datasource</strong><br><img src="datasources.png" alt=""></li><li>Click on <strong>Add New Source</strong></li><li>Choose MySQL and add your databse credentials.</li></ul><h3 id="Using-Data-in-your-panel"><a href="#Using-Data-in-your-panel" class="headerlink" title="Using Data in your panel."></a>Using Data in your panel.</h3><p>To show data from your SQL db to your panel. You need to use it in your panel’s module.ts and frontend page.</p><p>This example has data integration, if you want to see a code for referral.<br><a href="https://github.com/grafana/piechart-panel" target="_blank" rel="noopener">https://github.com/grafana/piechart-panel</a></p><p>To get the data in your panel you need to call your function when queries fetch the data from DB. There are 5 events in a grafana panel which are listed below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.events.on(&apos;render&apos;, this.onRender.bind(this));</span><br><span class="line">this.events.on(&apos;data-received&apos;, this.onDataReceived.bind(this));</span><br><span class="line">this.events.on(&apos;data-error&apos;, this.onDataError.bind(this));</span><br><span class="line">this.events.on(&apos;data-snapshot-load&apos;, this.onDataReceived.bind(this));</span><br><span class="line">this.events.on(&apos;init-edit-mode&apos;, this.onInitEditMode.bind(this));</span><br></pre></td></tr></table></figure><p>The only one we need to think about right now is data-received event. This event is called whenever an SQL query is entered in the <strong>Query</strong> Editor of a panel in Grafana.<br><img src="queries.png" alt=""></p><h3 id="onDataReceived"><a href="#onDataReceived" class="headerlink" title="onDataReceived"></a>onDataReceived</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onDataReceived(dataList: any) &#123;</span><br><span class="line">  console.log(dataList)</span><br><span class="line">  this.series = dataList.map(this.seriesHandler.bind(this));</span><br><span class="line">  this.data = this.parseSeries(this.series);</span><br><span class="line">  this.render(this.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function is called whenever data is received on panel. Since we bind <strong>this</strong> in this function. Its own object is sent in this function. <strong>dataList</strong> contains all the data in this case. You can manipulate and show the data however you want in this function.</p><p><em>You can enter any number of queries in the Queries Section of your panel in the dashboard and use them as they are sent in dashboard as an Array output.</em></p><p>This is how you use SQL DB in your custom Grafana Panel</p><blockquote><p>Tips: You can use $__timeFilter(column_name) to filter the data according to the timestamp provided in Grafana dashboard. This is an inbuilt function in grafana MySQL.</p></blockquote><p>References:</p><ul><li><a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></li><li><a href="https://github.com/grafana/piechart-panel" target="_blank" rel="noopener">https://github.com/grafana/piechart-panel</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;img src=&quot;/blog/Web/using-mysql-in-custom-grafana-panel/grafana.png&quot; class=&quot;&quot; title=&quot;l&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;In this post, we will see how
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/blog/categories/Web/"/>
    
    
      <category term="Grafana" scheme="https://nayan.co/blog/tags/Grafana/"/>
    
      <category term="MySQL" scheme="https://nayan.co/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>boost-up-neural-networks-using-docker-containers-and-spark</title>
    <link href="https://nayan.co/blog/AI/boost-up-neural-networks-using-docker-containers-and-spark/"/>
    <id>https://nayan.co/blog/AI/boost-up-neural-networks-using-docker-containers-and-spark/</id>
    <published>2020-01-09T15:13:20.000Z</published>
    <updated>2020-06-08T11:31:08.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Boost-up-neural-networks-using-docker-containers-and-pyspark-part-1"><a href="#Boost-up-neural-networks-using-docker-containers-and-pyspark-part-1" class="headerlink" title="Boost up neural networks using docker containers and pyspark part : 1"></a>Boost up neural networks using docker containers and pyspark part : 1</h1><p><img src="Boost-up0.jpg" alt="alt_text" title="image_tooltip"></p><p>src: <a href="https://images.app.goo.gl/itH6Cbq8LK7cNZxM8" target="_blank" rel="noopener">https://images.app.goo.gl/itH6Cbq8LK7cNZxM8</a></p><p>Introduction:</p><p>In this blog we will learn how we can use spark to boost up the inference speed of the neural network model. The whole topic is too long to cover in a single blog so we will divide it in two parts</p><ol><li>Create spark cluster on which we will run multiple instances of the model </li><li>Run the neural networks on the cluster</li></ol><p><strong>Lets begin,</strong></p><p>For creating cluster we will use docker containers and create a common network where they can communicate with each other</p><p>Lets start with introduction of Docker:</p><p><em>Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. [<a href="https://en.wikipedia.org/wiki/Docker" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Docker</a></em>(software)](<a href="https://en.wikipedia.org/wiki/Docker_(software)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Docker_(software)</a>)_</p><p>Thanks to docker containers we will be able to create several worker nodes on which we can run spark for distributed processing.</p><p><strong><span style="text-decoration:underline;">Docker Installation:</span></strong></p><p>Docker installation is very easy just follow the steps in the following link</p><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Get Docker Engine - Community for Ubuntu</a></p><p><strong><span style="text-decoration:underline;">Create Docker image :</span></strong></p><p>To create a docker image we need to first create a Dockerfile which upon building will install all the libraries that we want.</p><p><em>Sample docker file:</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FROM nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04</span><br><span class="line">MAINTAINER XYZ</span><br><span class="line">RUN apt-get update -y &amp;&amp; apt-get install -y python3-pip python3-dev libsm6 libxext6 libxrender-dev</span><br><span class="line"># addons</span><br><span class="line">RUN \</span><br><span class="line">apt-get install -y \</span><br><span class="line">wget \</span><br><span class="line">unzip \</span><br><span class="line">ffmpeg \ </span><br><span class="line">git</span><br><span class="line">RUN pip3 install opencv-python</span><br><span class="line">RUN pip3 install moviepy</span><br><span class="line">RUN pip3 install pandas</span><br><span class="line">RUN pip3 install requests</span><br><span class="line">RUN pip3 install numba</span><br><span class="line">RUN pip3 install imutils</span><br><span class="line">RUN pip3 install filterpy</span><br><span class="line">RUN pip3 install sklearn</span><br><span class="line">RUN pip3 install kafka-python</span><br></pre></td></tr></table></figure><p>Now build the docker image using the following command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t &quot;my_docker_image&quot; .</span><br></pre></td></tr></table></figure><p>This will create a docker image with name my_docker_image</p><p><img src="1.png" alt="fig_1" title="image_tooltip"></p><p>You can see the list of images by using the following command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>You should see your newly created image.</p><p>Now we are ready to create containers using the above image.</p><p><strong><span style="text-decoration:underline;">Create docker network:</span></strong></p><p>Docker network is essential when containers wants to communicate . The most common and default network is bridge.</p><p>Run the following command to create a network</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create &quot;my_network&quot;</span><br></pre></td></tr></table></figure><p>Run the following command to list all existing networks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network ls</span><br></pre></td></tr></table></figure><p>You should see your newly created networks</p><p><img src="2.png" alt="fig_2" title="img_tooltip"></p><p>Now that we have created the network , we can now create containers and bind them with the network that we created.</p><p>Create docker container:</p><p>Let’s first create a master node of the cluster</p><p>Run the following command to create the master docker container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name master-docker --network my_network my_image /bin/sh</span><br></pre></td></tr></table></figure><p>This command will create the container and attach a shell with the container</p><p>To check if the docker is running , run the following command to list down all running container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><p>You should see the container master-docker running</p><p><img src="3.png" alt="fig_3"></p><p>Now lets create 2 worker nodes</p><p>The following commands will create two worker nodes with names worker_docker_1 and worker_docker_2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name worker_docker_1 --network my_network my_image /bin/sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name worker_docker_2 --network my_network my_image /bin/sh</span><br></pre></td></tr></table></figure><p>Now again check the running container now you will be able to see one master node and 2 worker nodes.</p><p><img src="4.png" alt="fig_4"></p><p>That’s it for this part , tune in for part 2 of the blog where we will run spark over the cluster and run neural network over it</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Boost-up-neural-networks-using-docker-containers-and-pyspark-part-1&quot;&gt;&lt;a href=&quot;#Boost-up-neural-networks-using-docker-containers-and-
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="spark" scheme="https://nayan.co/blog/tags/spark/"/>
    
      <category term="Docker" scheme="https://nayan.co/blog/tags/Docker/"/>
    
      <category term="neural-network" scheme="https://nayan.co/blog/tags/neural-network/"/>
    
  </entry>
  
  <entry>
    <title>Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation</title>
    <link href="https://nayan.co/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/"/>
    <id>https://nayan.co/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/</id>
    <published>2020-01-09T08:37:31.000Z</published>
    <updated>2020-06-08T11:31:08.850Z</updated>
    
    <content type="html"><![CDATA[<!-- # Efficient Residual Factorized Neural Network for Semantic Segmentation --><blockquote><p>This post explains a research paper ERFNET, a real time and accurate ConvNet for semantic segmentation and the underlying concepts.</p></blockquote><h2 id="Semantic-Segmentation"><a href="#Semantic-Segmentation" class="headerlink" title="Semantic Segmentation"></a>Semantic Segmentation</h2><p>Semantic segmentation is the task of classifying each image pixel to a class label. It is a classification task but at pixel level instead of image level. The labels could include a person, car, flower, piece of furniture, etc. For example, in the below image, all the cars will have the same labels. However, one can differentiate between the same class objects, this is called instance segmentation. For example, in an image that has many cars, <strong>instance segmentation</strong> can differentiate between each car object.</p><!-- ![Image 1](https://cdn-images-1.medium.com/max/3840/1*CUp00rA4mSlJ8CRflVvKcA.jpeg)*Image 1* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/image_1.jpeg" class="" title="Image 1"><p>Semantic segmentation has many applications in autonomous vehicles, Advanced Driver Assistance Systems (ADAS), robotics, self-driving cars because it is important to know the context in which the agent operates.</p><p>Convolutional Neural Networks (CNN), which initially designed for classification tasks, have impressive capabilities in solving complex segmentation tasks as well. <strong>Residual layers</strong> have created a new trend in ConvNets design. Their reformulation of the convolutional layers to avoid the degradation problem of deep architectures allowed neural networks to achieve very high accuracies with large amounts of layers.</p><p>Computation resources are key factors in self-driving and autonomous vehicles. Algorithms are not only required to operate reliably, but they are required to operate fast (real-time), fit in embedded devices due to space constraints (compactness), and have low power consumption to affect as minimum as possible the vehicle autonomy. Considering a reasonable amount of layers, enlarging the depth with more convolutions achieves only small gains in accuracy while significantly increasing the required computational resources.</p><h3 id="Residual-Layer"><a href="#Residual-Layer" class="headerlink" title="Residual Layer"></a>Residual Layer</h3><p>The paper proposes a new architecture design that leverages skip connections and convolutions with 1D kernels. While the skip connections allow the convolutions to learn residual functions that facilitate training, the 1D factorized convolutions allow a significant reduction of the computational costs while retaining a similar accuracy compared to the 2D ones.</p><!-- ![Residual Block](https://cdn-images-1.medium.com/max/2000/1*6WlIo8W1_Qc01hjWdZy-1Q.png)*Residual Block* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/residual_block.png" class="" title="Residual Block"><p>Residual blocks allow convolutional layers to learn the residual functions. For example, in the above image, x is the input vector and F(X)+x is the output vector of the y vector. F(X) is the residual function to be learned. This residual formulation facilitates learning and significantly reduces the degradation problem present in architectures that stack a large number of layers.</p><h3 id="Non-bottleneck-Residual-Layers"><a href="#Non-bottleneck-Residual-Layers" class="headerlink" title="Non-bottleneck Residual Layers"></a>Non-bottleneck Residual Layers</h3><p>There can be two instances of residual layer: the non-bottleneck design with two 3x3 convolutions as depicted in Fig. 1(a), and the bottleneck version as depicted in Fig. 1(b). Both versions have a similar number of parameters and almost equivalent accuracy. However, the bottleneck requires less computational resources and these scale in a more economical way as depth increases. Hence, the bottleneck design has been commonly adopted in state-of-the-art networks. However, it has been reported that non-bottleneck ResNets gain more accuracy from increased depth than the bottleneck versions, which indicates that they are not entirely equivalent and that the bottleneck design still suffers from the degradation problem</p><!-- ![Figure 1](https://cdn-images-1.medium.com/max/2000/1*gu-iuZvJS1-8w-UlWGXmww.png)*Figure 1* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/figure_1.png" class="" title="Figure 1"><p>The paper proposed a new implementation of the residual layer that decomposes 2D convolution into a pair of 1D convolutions to accelerate and reduce the parameters of the original non-bottleneck layer. We refer to this proposed module as “non-bottleneck-1D” (non-bt-1D), which is depicted in Fig. 1(c). This module is faster (as in computation time) and has fewer parameters than the bottleneck design while keeping a learning capacity and accuracy equivalent to the non-bottleneck one.</p><h3 id="Dilated-Convolutions"><a href="#Dilated-Convolutions" class="headerlink" title="Dilated Convolutions"></a>Dilated Convolutions</h3><p>Dilated convolutions are convolutions applied to input images with gaps. The standard convolution is 1-Dilated convolution. Dilated convolutions other than standard convolutions increase the receptive field of the network. Dilated convolutions are more effective in terms of computational cost and parameters than the convolutions with larger kernel size. The paper proposes a network that uses dilated convolution.</p><!-- ![standard convolution](https://cdn-images-1.medium.com/max/2000/1*aIPu6hDHHWFatmOCYP9YPg.gif)*standard convolution* --><!-- ![dilated convolution](https://cdn-images-1.medium.com/max/2000/1*wz4x8BcAOFBPNL6nX4tx-g.gif)*dilated convolution* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/standard_conv.gif" class="" title="Standard Convolution"><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/dilated_conv.gif" class="" title="Dilated Convolution"><h3 id="Network-Architecture"><a href="#Network-Architecture" class="headerlink" title="Network Architecture"></a>Network Architecture</h3><p>The paper presents an encoder-decoder architecture for semantic segmentation. The encoder segment produces downsampled feature maps and the decoder segments upsample the features to match input image resolution. Full network architecture is given in Figure 2</p><!-- ![architecture with feature maps](https://cdn-images-1.medium.com/max/2000/1*YMWnwx78KluFYgcV5KGB0g.png)*architecture with feature maps*![Figure 2](https://cdn-images-1.medium.com/max/2000/1*9Bbsq9_xHHImVSqtFkJrtw.png)*Figure 2* --><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/image_2.png" class="" title="Architecture with feature maps"><img src="/blog/AI/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/figure_2.png" class="" title="figure 2"><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><p><a href="https://pixabay.com/photos/traffic-locomotion-roadway-mobility-3612474/" target="_blank" rel="noopener">https://pixabay.com/photos/traffic-locomotion-roadway-mobility-3612474/</a></p></li><li><p>ERFNet: Efficient Residual Factorized ConvNet for Real-time Semantic Segmentation.</p></li><li><p><a href="https://cdn-images-1.medium.com/max/800/1*aIPu6hDHHWFatmOCYP9YPg.gif" target="_blank" rel="noopener">https://cdn-images-1.medium.com/max/800/1*wz4x8BcAOFBPNL6nX4tx-g.gif</a></p></li><li><p><a href="https://miro.medium.com/max/395/0*3cTXIemm0k3Sbask.gif" target="_blank" rel="noopener">https://miro.medium.com/max/395/0*3cTXIemm0k3Sbask.gif</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- # Efficient Residual Factorized Neural Network for Semantic Segmentation --&gt;

&lt;blockquote&gt;
&lt;p&gt;This post explains a research paper ERFNE
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="https://nayan.co/blog/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="https://nayan.co/blog/tags/Deep-Learning/"/>
    
      <category term="Residual Networks" scheme="https://nayan.co/blog/tags/Residual-Networks/"/>
    
      <category term="Dilated Convolutions" scheme="https://nayan.co/blog/tags/Dilated-Convolutions/"/>
    
      <category term="Semantic segmentation" scheme="https://nayan.co/blog/tags/Semantic-segmentation/"/>
    
      <category term="Autonomous driving" scheme="https://nayan.co/blog/tags/Autonomous-driving/"/>
    
  </entry>
  
  <entry>
    <title>Creating custom Grafana panel</title>
    <link href="https://nayan.co/blog/Web/create-custom-grafana-panel/"/>
    <id>https://nayan.co/blog/Web/create-custom-grafana-panel/</id>
    <published>2020-01-06T11:29:03.000Z</published>
    <updated>2020-06-08T11:31:08.902Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/create-custom-grafana-panel/grafana.png" class="" title="l"><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p>Grafana is an open source platform for monitoring and observability. Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data driven culture.</p><p>Grafana is a tool that is used to create dashboards. Dashboards consists of Panels which are used to visualize data in many ways. Grafana has many types of panels available to visualize your data in many forms. Such panels include Graphs, Tables, Single stats, etc. But what if you want to use the Grafana but show data in your own format. Grafana allows that as well. These components are known as plugins.</p><blockquote><p>In this post we will see how to make our own <strong>custom plugin</strong> and use it in our Grafana dashboard.</p></blockquote><h3 id="Requisites"><a href="#Requisites" class="headerlink" title="Requisites:"></a>Requisites:</h3><ul><li>npm or yarn</li><li>Git</li></ul><p>First download the Grafana repo from Grafana website<br><a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a></p><p><img src="directory.png" alt=""></p><p>Then clone Hello World Custom panel with the command written below in the folder <strong>data/plugins</strong> or <strong>var/lib/grafana/plugins</strong>. If no such folder exists in root directory create one.<br><code>Git clone https://github.com/grafana/simple-angular-panel</code></p><p><img src="clone.png" alt=""></p><p>This folder will be created in your data/plugins.</p><p><img src="angular_panel.png" alt=""></p><p>Install the dependencies required for that panel using <code>npm install</code> or <code>yarn</code>. Then build the plugin using <code>yarn build</code> or <code>npm run build</code>. (Running the build script defined in package.json)</p><p>Then start the grafana-server:</p><ul><li>By running the command <code>./bin/grafana-server</code> in the root directory of your grafana repo (<strong>Linux</strong>).</li><li>By running the <strong>grafana-server.exe</strong> in bin Folder (<strong>Windows</strong>).</li></ul><p><img src="bin.png" alt=""></p><p>Then panel will be availables in your visualization section when you create a new panel</p><p><img src="panel_icon.png" alt=""></p><h3 id="Plugin-json"><a href="#Plugin-json" class="headerlink" title="Plugin.json"></a>Plugin.json</h3><p>It defines your panel and uniquely identifies it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;type&quot;: &quot;panel&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Simple Angular&quot;,</span><br><span class="line">&quot;id&quot;: &quot;simple-angular-panel&quot;,</span><br><span class="line"></span><br><span class="line">&quot;info&quot;: &#123;</span><br><span class="line">&quot;description&quot;: &quot;Simple Angular Panel&quot;,</span><br><span class="line">&quot;author&quot;: &#123;</span><br><span class="line">&quot;name&quot;: &quot;Grafana Labs&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keywords&quot;: [ &quot;discrete&quot;, &quot;events&quot;, &quot;strings&quot; ],</span><br><span class="line">&quot;logos&quot;: &#123;</span><br><span class="line">&quot;small&quot;: &quot;img/logo.svg&quot;,</span><br><span class="line">&quot;large&quot;: &quot;img/logo.svg&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;links&quot;: [],</span><br><span class="line">&quot;screenshots&quot;: [],</span><br><span class="line">&quot;version&quot;: &quot;%VERSION%&quot;,</span><br><span class="line">&quot;updated&quot;: &quot;%TODAY%&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">&quot;grafanaVersion&quot;: &quot;6.3.x&quot;,</span><br><span class="line">&quot;plugins&quot;: [ ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>“name”</strong>: Name Displayed on panel</li><li><strong>“id”</strong>: Unique Identified of your plugin. If two panels have same ID only 1 will be shown</li><li><strong>“logos”</strong>: shows the images shown for your panel which can be found in src/img folder.</li></ul><h3 id="Module-ts"><a href="#Module-ts" class="headerlink" title="Module.ts"></a>Module.ts</h3><p>It is the entry point of your panel. Functions and variables can be created in <strong>module.ts</strong> and be used In html page using “ctrl” as the object of the class.</p><h3 id="Front-HTML-Page"><a href="#Front-HTML-Page" class="headerlink" title="Front HTML Page."></a>Front HTML Page.</h3><p>This page can be found at <strong>partials/module.html</strong>.</p><p><img src="FrontPage.png" alt=""></p><p>So if you create a variable named “text” in the SimpleCtrl Class (<em>in module.ts</em>). It can be accessed in HTML page using ““.</p><p><strong>Options.html</strong> page contains the page the visualization section which is shown when you create or edit a panel.</p><p>After You create your html pages and functionality in module.ts, you can run <code>npm run build</code> or <code>yarn build</code> and use the panel in your own Grafana however you like.</p><blockquote><p>Tips : If you want to see changes in your panel while you are creating it. Use <code>npm run watch</code> or <code>yarn watch</code>. It implements changes as you make them. It basically creates build with environment settings as development. You can see the changes by refreshing the webpage.</p></blockquote><p>References:</p><ul><li><a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a></li><li><a href="https://github.com/grafana/simple-angular-panel" target="_blank" rel="noopener">https://github.com/grafana/simple-angular-panel</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;img src=&quot;/blog/Web/create-custom-grafana-panel/grafana.png&quot; class=&quot;&quot; title=&quot;l&quot;&gt;

&lt;h3 id=&quot;Grafana&quot;&gt;&lt;a href=&quot;#Grafana&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/blog/categories/Web/"/>
    
    
      <category term="Grafana" scheme="https://nayan.co/blog/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>Angular Charts</title>
    <link href="https://nayan.co/blog/Web/angular-charts/"/>
    <id>https://nayan.co/blog/Web/angular-charts/</id>
    <published>2020-01-02T16:27:55.000Z</published>
    <updated>2020-06-08T11:31:08.898Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/angular-charts/BG.png" class="" title="l"><p>Chart.js is a popular JavaScript charting library and ng2-charts is a wrapper for Angular 2+ that makes it easy to integrate Chart.js in Angular. Let’s go over the basic usage.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Install ng2-charts using npm: <code>npm install --save ng2-charts</code></li><li>Install Chart.js library: <code>npm install --save chart.js</code></li><li><em>[Options]</em> Then, if you’re using the <strong>Angular CLI</strong>, you can simply add Chart.js to the list of scripts in your <code>.angular-cli.json</code> file so that it gets bundled with the app: </li></ol><p><strong><em>angular-cli.json</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: [</span><br><span class="line">  &quot;../node_modules/chart.js/dist/Chart.min.js&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Now you’ll want to import ng2-chart’s <code>ChartsModule</code> into your app module or a feature module:</p><p><strong><em>app.module.ts</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; ChartsModule &#125; from &apos;ng2-charts&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    ChartsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>ng2-charts gives us a <code>baseChart</code> directive that can be applied on an HTML <code>canvas</code> element. Here’s an example showing-off some of the options to pass-in as inputs and the <code>chartClick</code> event that’s outputted by the directive:</p><p><strong><em>app.component.html</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width: 40%;&quot;&gt;</span><br><span class="line">  &lt;canvas</span><br><span class="line">      baseChart</span><br><span class="line">      [chartType]=&quot;&apos;line&apos;&quot;</span><br><span class="line">      [datasets]=&quot;chartData&quot;</span><br><span class="line">      [labels]=&quot;chartLabels&quot;</span><br><span class="line">      [options]=&quot;chartOptions&quot;</span><br><span class="line">      [legend]=&quot;true&quot;</span><br><span class="line">      (chartClick)=&quot;onChartClick($event)&quot;&gt;</span><br><span class="line">  &lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>And here’s what it can look like in our component class:</p><p><strong><em>app.component.ts</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123; ... &#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  chartOptions = &#123;</span><br><span class="line">    responsive: true</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  chartData = [</span><br><span class="line">    &#123; data: [330, 600, 260, 700], label: &apos;Account A&apos; &#125;,</span><br><span class="line">    &#123; data: [120, 455, 100, 340], label: &apos;Account B&apos; &#125;,</span><br><span class="line">    &#123; data: [45, 67, 800, 500], label: &apos;Account C&apos; &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  chartLabels = [&apos;January&apos;, &apos;February&apos;, &apos;Mars&apos;, &apos;April&apos;];</span><br><span class="line"></span><br><span class="line">  onChartClick(event) &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="chart_1.png" alt="Chart 1: Basic Line Chart"></p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Here’s a quick breakdown of the different input options</p><ul><li>chartType: This sets the base type of the chart. The value can be <code>pie</code>, <code>doughnut</code>, <code>bar</code>, <code>line</code>, <code>polarArea</code>, <code>radar</code> or <code>horizontalBar</code>.</li><li>legend: A boolean for whether or not a legend should be displayed above the chart.</li><li>datasets: This should be an array of objects that contain a data array and a label for each data set.</li><li>data: If your chart is simple and has only one data set, you can use <code>data</code> instead of <code>datasets</code> and pass-in an array of data points.</li><li>labels: An array of labels for the X-axis.</li><li>options: An object that contains options for the chart. You can refer to the official <a href="https://www.chartjs.org/docs/latest/configuration/" target="_blank" rel="noopener"><code>Chart.js documentation</code></a> for details on the available options.</li></ul><p>In the above example we set the chart to be responsive and adapt depending on the viewport size.</p><ul><li>colors: Not shown in the above example, but you can define your own colors with the <code>colors</code> input. Pass-in an array of object literals that contain the following value:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">myColors = [</span><br><span class="line">  &#123;</span><br><span class="line">    backgroundColor: &apos;rgba(103, 58, 183, .1)&apos;,</span><br><span class="line">    borderColor: &apos;rgb(103, 58, 183)&apos;,</span><br><span class="line">    pointBackgroundColor: &apos;rgb(103, 58, 183)&apos;,</span><br><span class="line">    pointBorderColor: &apos;#fff&apos;,</span><br><span class="line">    pointHoverBackgroundColor: &apos;#fff&apos;,</span><br><span class="line">    pointHoverBorderColor: &apos;rgba(103, 58, 183, .8)&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  ... other colors</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>Two events are emitted, <code>chartClick</code> and <code>chartHover</code>, and they allow to react to the user interacting with the chart. The currently active points and labels are returned as part of the emitted event’s data.</p><ul><li>chartClick: fires when click on a chart has occurred, returns information regarding active points and labels</li><li>chartHover: fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels</li><li>Updating Datasets Dynamically: Of course, the beauty of Chart.js is that your charts can easily by dynamic and update/respond to data received from a backend or from user input.</li></ul><p>In the bellow example we add a new data points for the month of May:</p><p><strong><em>app.component.ts</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">newDataPoint(dataArr = [100, 100, 100], label) &#123;</span><br><span class="line"></span><br><span class="line">  this.chartData.forEach((dataset, index) =&gt; &#123;</span><br><span class="line">    this.chartData[index] = Object.assign(&#123;&#125;, this.chartData[index], &#123;</span><br><span class="line">      data: [...this.chartData[index].data, dataArr[index]]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  this.chartLabels = [...this.chartLabels, label];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And it can be used like this:</p><p><strong><em>app.component.html</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=&quot;newDataPoint([900, 50, 300], &apos;May&apos;)&quot;&gt;</span><br><span class="line">  Add data point</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><h2 id="Schematics"><a href="#Schematics" class="headerlink" title="Schematics"></a>Schematics</h2><p>There are schematics that may be used to generate chart components using Angular CLI. The components are defined in package ng2-charts-schematics.</p><p>Installation of Schematics Package<br><code>npm instal --save-dev ng2-charts-schematics</code></p><p>Example of Generating a Line Chart using Angular CLI<br><code>ng generate ng20chart0schematics:line my-line-chart</code></p><p>This calls angular’s component schematics and then modifies the result, so all the options for the component schematic are also usable here. This schematics will also add the ChartsModule as an imported module in the main app module (or another module as specified in the –module command switch).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;img src=&quot;/blog/Web/angular-charts/BG.png&quot; class=&quot;&quot; title=&quot;l&quot;&gt;

&lt;p&gt;Chart.js is a popular JavaScript charting library and ng2-charts is
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/blog/categories/Web/"/>
    
    
      <category term="Line Chart" scheme="https://nayan.co/blog/tags/Line-Chart/"/>
    
      <category term="Javascript" scheme="https://nayan.co/blog/tags/Javascript/"/>
    
      <category term="Data Visualization" scheme="https://nayan.co/blog/tags/Data-Visualization/"/>
    
  </entry>
  
  <entry>
    <title>Paytm Gateway Integration</title>
    <link href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/"/>
    <id>https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/</id>
    <published>2020-01-02T14:43:06.000Z</published>
    <updated>2020-06-08T11:31:08.902Z</updated>
    
    <content type="html"><![CDATA[<p>A complete guide on adding payments to your Android app with backend as RoR</p><img src="/blog/Ruby-on-Rails/paytm-gateway-integration/img_flow_android_ios_sdk.png" class=""><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps :-"></a>Steps :-</h2><ol><li>Install SDK</li><li>Add Static SMS Permission (for SMS autoread)</li><li>Add Runtime SMS Permission (for SMS autoread)</li><li>Add Proguard Rules</li><li>Get Order Checksum from Server (our Server)</li><li>Generate and send Checksum (from Our Server)</li><li>Start Payment Transaction</li><li>Send Payment Response to Server</li><li>Confirm with Paytm Gateway about payment status</li><li>Update Order Status</li><li>Show Order Status on App<br>&nbsp;<br>&nbsp;</li></ol><h3 id="Step-1-Install-SDK"><a href="#Step-1-Install-SDK" class="headerlink" title="Step 1: Install SDK"></a>Step 1: Install SDK</h3><p>Add the following dependency to your <strong>app level</strong> <code>build.gradle</code>.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Paytm SDK</span></span><br><span class="line"> implementation(<span class="string">'com.paytm:pgplussdk:1.4.4'</span>) &#123;</span><br><span class="line">  transitive = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2-Add-Static-SMS-Permission-for-SMS-autoread"><a href="#Step-2-Add-Static-SMS-Permission-for-SMS-autoread" class="headerlink" title="Step 2: Add Static SMS Permission (for SMS autoread)"></a>Step 2: Add Static SMS Permission (for SMS autoread)</h3><p>Add the following permissions to your <code>AndroidManifest.xml</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">”android.permission.READ_SMS”/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">”android.permission.RECEIVE_SMS”/</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Step-3-Add-Runtime-SMS-Permission-for-SMS-autoread"><a href="#Step-3-Add-Runtime-SMS-Permission-for-SMS-autoread" class="headerlink" title="Step 3: Add Runtime SMS Permission (for SMS autoread)"></a>Step 3: Add Runtime SMS Permission (for SMS autoread)</h3><p>We used <a href="https://github.com/Karumi/Dexter" target="_blank" rel="noopener">Dexter</a> library for handling runtime permissions. To install that add the following dependency to your <strong>app level</strong> <code>build.gradle</code>.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Dexter runtime permissions</span></span><br><span class="line"> implementation <span class="string">'com.karumi:dexter:4.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add the following code before starting your transaction process.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Dexter.withActivity(<span class="keyword">this</span>)</span><br><span class="line">      .withPermissions(</span><br><span class="line">       android.Manifest.permission.READ_SMS”,</span><br><span class="line">       android.Manifest.permission.RECEIVE_SMS”</span><br><span class="line">      )</span><br><span class="line">      .withListener(<span class="keyword">object</span> : MultiplePermissionsListener &#123;</span><br><span class="line">       <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPermissionsChecked</span><span class="params">(report: <span class="type">MultiplePermissionsReport</span>?)</span></span> &#123;</span><br><span class="line">        report?.let &#123;</span><br><span class="line">         <span class="keyword">if</span> (it.areAllPermissionsGranted()) &#123;</span><br><span class="line">          beginPaytmTransaction()</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          showMessage(<span class="string">"Permission Denied"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPermissionRationaleShouldBeShown</span><span class="params">(permissions: <span class="type">MutableList</span>&lt;<span class="type">PermissionRequest</span>&gt;?, token: <span class="type">PermissionToken</span>?)</span></span> &#123;</span><br><span class="line">        token?.continuePermissionRequest()</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .withErrorListener &#123;</span><br><span class="line">       showMessage(<span class="string">"Error occurred! <span class="variable">$it</span>"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      .onSameThread()</span><br><span class="line">      .check()</span><br></pre></td></tr></table></figure><h3 id="Step-4-Add-Proguard-Rules"><a href="#Step-4-Add-Proguard-Rules" class="headerlink" title="Step 4: Add Proguard Rules"></a>Step 4: Add Proguard Rules</h3><p>Add the following rules to your <code>proguard-rules.pro</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class com.paytm.pgsdk.paytmWebView$PaytmJavaScriptInterface &#123;</span><br><span class="line"> public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-5-Get-Order-Checksum-from-Server-our-Server"><a href="#Step-5-Get-Order-Checksum-from-Server-our-Server" class="headerlink" title="Step 5: Get Order Checksum from Server (our Server)"></a>Step 5: Get Order Checksum from Server (our Server)</h3><p>Make an API call to your server to get the order checksum</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OurService</span> </span>&#123;</span><br><span class="line"> <span class="meta">@GET(<span class="meta-string">"/subscriptions/new"</span>)</span></span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">newSubscription</span><span class="params">()</span></span>: NewSubscriptionResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> ourService: OurService) &#123;</span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">createNewSubscription</span><span class="params">()</span></span>: NewSubscriptionResponse = ourService.newSubscription()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityState</span></span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> _paytmState: MutableLiveData&lt;ActivityState&gt; = MutableLiveData(InitialState)</span><br><span class="line"> <span class="keyword">val</span> paytmState: LiveData&lt;ActivityState&gt; = _paytmState</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">createNewSubscription</span><span class="params">()</span></span> &#123;</span><br><span class="line">  viewModelScope.launch &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    _paytmState.value = ProgressState</span><br><span class="line">    _paytmState.value = PaytmChecksumState(userRepository.createNewSubscription())</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: HttpException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">object</span> ProgressState : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PaytmChecksumState</span></span>(<span class="keyword">val</span> checksumResponse: NewSubscriptionResponse) : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span></span>(<span class="keyword">val</span> exception: Exception) : ActivityState()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> profileViewModel: ProfileViewModel <span class="keyword">by</span> viewModel()</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">beginPaytmTransaction</span><span class="params">()</span></span> &#123;</span><br><span class="line">  profileViewModel.createNewSubscription()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-6-Generate-and-send-Checksum-from-Our-Server"><a href="#Step-6-Generate-and-send-Checksum-from-Our-Server" class="headerlink" title="Step 6: Generate and send Checksum (from Our Server)"></a>Step 6: Generate and send Checksum (from Our Server)</h3><p>To your project directory add a package named <strong>paytm</strong>.</p><p>Add <code>checksum_tool.rb</code> and <code>encryption_new_pg.rb</code> to the <strong>paytm</strong> package from <a href="https://github.com/Paytm-Payments/Paytm_App_Checksum_Kit_Ruby/tree/master/paytm" target="_blank" rel="noopener">Paytm_App_Checksum_Kit_Ruby</a></p><p>We will be creating order for a PaymentRequest and we follow model heavy approach for business logic. So we added a static method to generate checksum for our order in PaymentRequest model itself.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequest</span> &lt; ApplicationRecord</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create_checksum</span><span class="params">(user, order_id)</span></span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'./paytm/encryption_new_pg.rb'</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'./paytm/checksum_tool.rb'</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'uri'</span></span><br><span class="line"></span><br><span class="line">  paytm_hash = Hash.new</span><br><span class="line"></span><br><span class="line">  is_staging = <span class="string">'true'</span> == ENV[<span class="string">'PAYTM_STAGING'</span>]</span><br><span class="line">  merchant_id = is_staging ? ENV[<span class="string">'STAGING_PAYTM_MERCHANT_ID'</span>] : ENV[<span class="string">'PAYTM_MERCHANT_ID'</span>]</span><br><span class="line">  industry_type = is_staging ? ENV[<span class="string">'STAGING_PAYTM_INDUSTRY_TYPE'</span>] : ENV[<span class="string">'PAYTM_INDUSTRY_TYPE'</span>]</span><br><span class="line">  paytm_website = is_staging ? ENV[<span class="string">'STAGING_PAYTM_WEBSITE'</span>] : ENV[<span class="string">'PAYTM_WEBSITE'</span>]</span><br><span class="line">  paytm_callback = is_staging ? ENV[<span class="string">'STAGING_PAYTM_CALLBACK'</span>] : ENV[<span class="string">'PAYTM_CALLBACK'</span>]</span><br><span class="line"></span><br><span class="line">  paytm_hash[<span class="string">"REQUEST_TYPE"</span>] = <span class="string">'DEFAULT'</span></span><br><span class="line">  paytm_hash[<span class="string">"MID"</span>] = merchant_id <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"ORDER_ID"</span>] = order_id; <span class="comment">#unique OrderId for every request\</span></span><br><span class="line">  paytm_hash[<span class="string">"CUST_ID"</span>] = user.id.to_s <span class="comment">#unique customer identifier</span></span><br><span class="line">  paytm_hash[<span class="string">"INDUSTRY_TYPE_ID"</span>] = industry_type <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"CHANNEL_ID"</span>] = <span class="string">'WAP'</span>; <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"TXN_AMOUNT"</span>] = <span class="string">'1'</span>; <span class="comment">#transaction amount</span></span><br><span class="line">  paytm_hash[<span class="string">"WEBSITE"</span>] = paytm_website <span class="comment">#Provided by Paytm</span></span><br><span class="line">  paytm_hash[<span class="string">"EMAIL"</span>] = user.email; <span class="comment">#customer email id</span></span><br><span class="line">  <span class="keyword">if</span> user.phone_number.present?</span><br><span class="line">   paytm_hash[<span class="string">"MOBILE_NO"</span>] = user.phone_number; <span class="comment">#customer 10 digit mobile no.</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  paytm_hash[<span class="string">"CALLBACK_URL"</span>] = paytm_callback + <span class="string">"<span class="subst">#&#123;order_id&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">  checksum_hash = ChecksumTool.new.get_checksum_hash(paytm_hash).gsub(<span class="string">"\n"</span>, <span class="string">''</span>)</span><br><span class="line">  paytm_hash[<span class="string">"CHECKSUMHASH"</span>] = checksum_hash</span><br><span class="line">  paytm_hash</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>First create a subscription for current user, then create a payment request for that subscription and create checksum treating that payment request as your Order.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriptionsController</span> &lt; ApplicationController</span></span><br><span class="line"> before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">  user = current_user</span><br><span class="line">  subscription = user.subscriptions.create!</span><br><span class="line">  payment_request = subscription.payment_requests.create!</span><br><span class="line"></span><br><span class="line">  checksum = PaymentRequest.create_checksum(user, payment_request.id)</span><br><span class="line">  render <span class="symbol">json:</span> &#123; <span class="symbol">paytm_params:</span> checksum, <span class="symbol">is_staging:</span> <span class="string">'true'</span> == ENV[<span class="string">'PAYTM_STAGING'</span>]&#125;, <span class="symbol">status:</span> <span class="symbol">:ok</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Step-7-Start-Payment-Transaction"><a href="#Step-7-Start-Payment-Transaction" class="headerlink" title="Step 7: Start Payment Transaction"></a>Step 7: Start Payment Transaction</h3><p>With checksum response from server, initiate the paytm purchase.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initiatePaytmPurchase</span><span class="params">(checksumResponse: <span class="type">NewSubscriptionResponse</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> order = PaytmOrder(checksumResponse.paytmParams)</span><br><span class="line">  <span class="keyword">val</span> service = <span class="keyword">if</span> (checksumResponse.isStaging)</span><br><span class="line">     PaytmPGService.getStagingService(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     PaytmPGService.getProductionService()</span><br><span class="line">  </span><br><span class="line">  service.initialize(order, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  service.startPaymentTransaction(context, <span class="literal">true</span>, <span class="literal">true</span>, <span class="keyword">object</span> : PaytmPaymentTransactionCallback &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransactionResponse</span><span class="params">(inResponse: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clientAuthenticationFailed</span><span class="params">(inErrorMessage: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">someUIErrorOccurred</span><span class="params">(inErrorMessage: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransactionCancel</span><span class="params">(inErrorMessage: <span class="type">String</span>?, inResponse: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">networkNotAvailable</span><span class="params">()</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onErrorLoadingWebPage</span><span class="params">(iniErrorCode: <span class="type">Int</span>, inErrorMessage: <span class="type">String</span>?, inFailingUrl: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressedCancelTransaction</span><span class="params">()</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="merchant_pg_android.gif" alt="Demo of Paytm checkout flow in app"></p><h3 id="Step-8-Send-Payment-Response-to-Server"><a href="#Step-8-Send-Payment-Response-to-Server" class="headerlink" title="Step 8: Send Payment Response to Server"></a>Step 8: Send Payment Response to Server</h3><p>On Transaction response from paytm payments Activity, send the response to your server to update payment status.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OurService</span> </span>&#123;</span><br><span class="line"> <span class="meta">@POST(<span class="meta-string">"/payment_requests/&#123;requestId&#125;/update_status"</span>)</span></span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">updatePaymentStatus</span><span class="params">(<span class="meta">@Path(value = <span class="meta-string">"requestId"</span>)</span> requestId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@Body</span> transactionResponse: <span class="type">JsonObject</span>)</span></span>: UpdatePaymentResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> ourService: OurService) &#123;</span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">updatePaymentResponse</span><span class="params">(requestId: <span class="type">Int</span>, transactionResponse: <span class="type">JsonObject</span>)</span></span>: UpdatePaymentResponse = ourService.updatePaymentStatus(requestId, transactionResponse)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityState</span></span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> _paytmState: MutableLiveData&lt;ActivityState&gt; = MutableLiveData(InitialState)</span><br><span class="line"> <span class="keyword">val</span> paytmState: LiveData&lt;ActivityState&gt; = _paytmState</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">updatePaymentStatus</span><span class="params">(requestId: <span class="type">Int</span>, transactionResponse: <span class="type">JsonObject</span>)</span></span> &#123;</span><br><span class="line">  viewModelScope.launch &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    _paytmState.value = ProgressState</span><br><span class="line">    <span class="keyword">val</span> response = userRepository.updatePaymentResponse(requestId, transactionResponse)</span><br><span class="line">    _paytmState.value = PaytmStatusState(response)</span><br><span class="line">    _paytmState.value = PaytmIdleState</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: HttpException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">    _paytmState.value = ErrorState(e)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">object</span> ProgressState : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PaytmStatusState</span></span>(<span class="keyword">val</span> updatePaymentResponse: UpdatePaymentResponse) : ActivityState()</span><br><span class="line"> <span class="keyword">object</span> PaytmIdleState : ActivityState()</span><br><span class="line"> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span></span>(<span class="keyword">val</span> exception: Exception) : ActivityState()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransactionResponse</span><span class="params">(inResponse: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> orderId = inResponse?.getString(<span class="string">"ORDERID"</span>)</span><br><span class="line">  orderId?.let &#123;</span><br><span class="line">   <span class="keyword">val</span> responseJson = JsonObject()</span><br><span class="line">   inResponse.keySet()?.forEach &#123;</span><br><span class="line">    responseJson.addProperty(it, inResponse.getString(it))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">val</span> responseJsonWrapper = JsonObject()</span><br><span class="line">   responseJsonWrapper.add(<span class="string">"gateway_response"</span>, responseJson)</span><br><span class="line"></span><br><span class="line">   profileViewModel.updatePaymentStatus(Integer.parseInt(orderId), responseJsonWrapper)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-9-Confirm-with-Paytm-Gateway-about-payment-status"><a href="#Step-9-Confirm-with-Paytm-Gateway-about-payment-status" class="headerlink" title="Step 9: Confirm with Paytm Gateway about payment status"></a>Step 9: Confirm with Paytm Gateway about payment status</h3><p>Confirm with Paytm gateway using <a href="https://developer.paytm.com/docs/transaction-status-api/" target="_blank" rel="noopener">Transaction Status API</a>.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequest</span> &lt; ApplicationRecord</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">confirm_with_gateway</span><span class="params">(user)</span></span></span><br><span class="line">  is_staging = <span class="string">'true'</span> == ENV[<span class="string">'PAYTM_STAGING'</span>]</span><br><span class="line">  status_api_url = is_staging ? ENV[<span class="string">'STAGING_PAYTM_STATUS'</span>] : ENV[<span class="string">'PAYTM_STATUS'</span>]</span><br><span class="line">  merchant_id = is_staging ? ENV[<span class="string">'STAGING_PAYTM_MERCHANT_ID'</span>] : ENV[<span class="string">'PAYTM_MERCHANT_ID'</span>]</span><br><span class="line">  order_id = <span class="keyword">self</span>.id</span><br><span class="line"></span><br><span class="line">  response = HTTParty.post(status_api_url,</span><br><span class="line">                           <span class="symbol">body:</span> &#123;</span><br><span class="line">                                  <span class="symbol">MID:</span> merchant_id,</span><br><span class="line">                                  <span class="symbol">ORDERID:</span> order_id,</span><br><span class="line">                                  <span class="symbol">CHECKSUMHASH:</span> PaymentRequest.create_checksum(user, order_id)[<span class="string">"CHECKSUMHASH"</span>]</span><br><span class="line">                                 &#125;.to_json,</span><br><span class="line">                           <span class="symbol">multipart:</span> <span class="literal">false</span>,</span><br><span class="line">                           <span class="symbol">headers:</span> &#123;</span><br><span class="line">                                     <span class="string">'Content-Type'</span> =&gt; <span class="string">'application/json'</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                           <span class="symbol">timeout:</span> <span class="number">10000</span>)</span><br><span class="line">  update_status(response) <span class="comment"># We will learn about this in next step</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>After confirming with gateway, send back the response to App.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequestsController</span> &lt; ApplicationController</span></span><br><span class="line"> before_action <span class="symbol">:authenticate_user!</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">update_status</span></span></span><br><span class="line">  payment_request = PaymentRequest.find(params[<span class="symbol">:id</span>])</span><br><span class="line">  payment_request.initiate! <span class="comment">#We are using aasm gem for this https://github.com/aasm/aasm</span></span><br><span class="line">  payment_request.confirm_with_gateway(current_user)</span><br><span class="line">  payment_request.reload</span><br><span class="line"></span><br><span class="line">  render <span class="symbol">json:</span> &#123;</span><br><span class="line">                <span class="symbol">message:</span> get_status_message(payment_request),</span><br><span class="line">                <span class="symbol">status:</span> payment_request.aasm_state</span><br><span class="line">               &#125;,</span><br><span class="line">         <span class="symbol">status:</span> <span class="symbol">:ok</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_status_message</span><span class="params">(payment_request)</span></span></span><br><span class="line">  <span class="keyword">case</span> payment_request.aasm_state</span><br><span class="line">  <span class="keyword">when</span> <span class="symbol">:gateway_confirmation_pending</span></span><br><span class="line">   <span class="string">'Payment is still under process, please wait until the status of transaction is updated'</span></span><br><span class="line">  <span class="keyword">when</span> <span class="symbol">:success</span></span><br><span class="line">   <span class="string">'Payment was successful'</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="string">'Payment has failed'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Step-10-Update-Order-Status"><a href="#Step-10-Update-Order-Status" class="headerlink" title="Step 10: Update Order Status"></a>Step 10: Update Order Status</h3><p>Based on response codes, update the payment status of order. Response codes and statuses can be found <a href="https://developer.paytm.com/docs/transaction-status-api/" target="_blank" rel="noopener">Transaction Status API’s Response codes and Messages section</a> and <a href="https://developer.paytm.com/assets/Transaction%20response%20codes%20and%20messages.pdf" target="_blank" rel="noopener">Transaction response codes and messages</a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRequest</span> &lt; ApplicationRecord</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> private</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">update_status</span><span class="params">(response)</span></span></span><br><span class="line">  response = response.symbolize_keys</span><br><span class="line">  response_code = response[<span class="symbol">:RESPCODE</span>]</span><br><span class="line">  <span class="keyword">if</span> response_code == <span class="string">"01"</span></span><br><span class="line">   <span class="keyword">self</span>.update(<span class="symbol">transaction_reference:</span> response[<span class="symbol">:TXNID</span>], <span class="symbol">metadata:</span> response)</span><br><span class="line">   <span class="keyword">self</span>.mark_as_succeed!</span><br><span class="line">  <span class="keyword">elsif</span> response_code == <span class="string">"400"</span> <span class="params">||</span> response_code == <span class="string">"402"</span></span><br><span class="line">  <span class="keyword">elsif</span> response_code == <span class="string">"294"</span></span><br><span class="line">   <span class="keyword">self</span>.mark_as_expired!</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="keyword">self</span>.update(<span class="symbol">transaction_reference:</span> response[<span class="symbol">:TXNID</span>], <span class="symbol">error_message:</span> response[<span class="symbol">:RESPMSG</span>], <span class="symbol">metadata:</span> response)</span><br><span class="line">   <span class="keyword">self</span>.mark_as_failed!</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Step-11-Show-Order-Status-on-App"><a href="#Step-11-Show-Order-Status-on-App" class="headerlink" title="Step 11: Show Order Status on App"></a>Step 11: Show Order Status on App</h3><p>Based on server response, show messages on UI.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">val</span> paytmStateObserver: Observer&lt;ActivityState&gt; = Observer &#123;</span><br><span class="line">  <span class="keyword">when</span> (it) &#123;</span><br><span class="line">   <span class="keyword">is</span> ProfileViewModel.PaytmStatusState -&gt; &#123;</span><br><span class="line">    <span class="keyword">when</span> (it.updatePaymentResponse.status) &#123;</span><br><span class="line">     <span class="string">"success"</span> -&gt; &#123;</span><br><span class="line">                   Snackbar.make(progressBar, <span class="string">"Payment success"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                  &#125;</span><br><span class="line">     <span class="string">"failed"</span> -&gt; &#123;</span><br><span class="line">                  Snackbar.make(progressBar, <span class="string">"Payment failed. <span class="subst">$&#123;it.updatePaymentResponse.message&#125;</span>"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                 &#125;</span><br><span class="line">     <span class="string">"expired"</span> -&gt; &#123;</span><br><span class="line">                   Snackbar.make(progressBar, <span class="string">"Payment expired. Please try again"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                  &#125;</span><br><span class="line">     <span class="string">"gateway_confirmation_pending"</span> -&gt; &#123;</span><br><span class="line">                                        Snackbar.make(progressBar, <span class="string">"Payment pending. <span class="subst">$&#123;it.updatePaymentResponse.message&#125;</span>"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class="line">                                       &#125;</span><br><span class="line">     <span class="keyword">else</span> -&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://developer.paytm.com/docs/v1/android-sdk/" target="_blank" rel="noopener">Add payments to your Android app with Paytm SDK</a></li><li><a href="https://github.com/Paytm-Payments/Paytm_App_Checksum_Kit_Ruby" target="_blank" rel="noopener">Paytm_App_Checksum_Kit_Ruby</a></li><li><a href="https://medium.com/the-zalonin/android-payment-gateway-integration-guide-paytm-fa2ee01286e" target="_blank" rel="noopener">Android Payment Gateway Integration Guide: PAYTM</a></li><li><a href="https://developer.paytm.com/docs/transaction-status-api/" target="_blank" rel="noopener">Transaction Status API</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/">Generating Pdf in Ruby on Rails using Prawn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A complete guide on adding payments to your Android app with backend as RoR&lt;/p&gt;
&lt;img src=&quot;/blog/Ruby-on-Rails/paytm-gateway-integration/i
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/blog/categories/Android/"/>
    
      <category term="Ruby on Rails" scheme="https://nayan.co/blog/categories/Ruby-on-Rails/"/>
    
    
      <category term="android" scheme="https://nayan.co/blog/tags/android/"/>
    
      <category term="backend" scheme="https://nayan.co/blog/tags/backend/"/>
    
      <category term="rails" scheme="https://nayan.co/blog/tags/rails/"/>
    
      <category term="ror" scheme="https://nayan.co/blog/tags/ror/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/blog/tags/Ashish-Jajoria/"/>
    
      <category term="paytm" scheme="https://nayan.co/blog/tags/paytm/"/>
    
      <category term="gateway" scheme="https://nayan.co/blog/tags/gateway/"/>
    
      <category term="payment" scheme="https://nayan.co/blog/tags/payment/"/>
    
  </entry>
  
  <entry>
    <title>How to make a web application for any AI model</title>
    <link href="https://nayan.co/blog/AI/How-to-make-a-web-application-for-any-AI-model/"/>
    <id>https://nayan.co/blog/AI/How-to-make-a-web-application-for-any-AI-model/</id>
    <published>2019-12-03T11:15:16.000Z</published>
    <updated>2020-06-08T11:31:08.858Z</updated>
    
    <content type="html"><![CDATA[<p>Yes! you read the title right. So, today in this post I’ll show you how to setup a basic image-classifier in the form of a web application.</p><h2 id="Basic-requirements"><a href="#Basic-requirements" class="headerlink" title="Basic requirements"></a>Basic requirements</h2><p>Before we getting dive more into it, I am listing down the basic ingredients which are required to make a web application in python.</p><ul><li><p>Flask</p></li><li><p>Flask Bootstrap</p></li></ul><p>Please note that, I am not showing about how to create an AI classifier model, so make sure you have your classifier already before seeking into this post, if not then you can download a pre-trained model.</p><p>Let’s get started !</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>You need to have installed the above mentioned libraries. You can easily install them by using <strong>pip</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install flask-bootstrap</span><br></pre></td></tr></table></figure><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>So, firstly we arrange our files and folders in the below shown order.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*UcQSsTBtUdYL4x-HffjTNg.png" alt="Figure 1: Showing basic folder structure for the project"></p><p>You can change the main folder name <em>image-classifier (In my case)</em> to any other name as you like.</p><p>So, firstly we will write a basic flask app structure in <code>__init__.py</code>. This file can be found inside the classifier. Inside the <code>__init__.py</code> file write the below code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_bootstrap import Bootstrap</span><br><span class="line">from classifier import routes</span><br><span class="line"></span><br><span class="line">app = Flask(__name__) ## defining our flask application</span><br><span class="line">Bootstrap(app) ## giving a nice bootstrap touch to our application</span><br></pre></td></tr></table></figure><p>Now, writing our run.py file. You can find this run.py file inside the main folder. Open the file and write the below code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from classifier import app as  application</span><br><span class="line">application.config.from_pyfile(&apos;config/config.py&apos;)  </span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    application.run(host=&apos;0.0.0.0&apos;, port=8000)  ## This tells our</span><br><span class="line">      ##application will run on this host and on this port.</span><br></pre></td></tr></table></figure><p>Now, we will create write a config.py file. This file contains the configuration for the application. The basic configuration we can put now is that, we can just put our application in DEBUG mode. So, open the config.py file and write the below line.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from os.path import join, dirname, realpath</span><br><span class="line"></span><br><span class="line">DEBUG = True</span><br><span class="line">## If True, then it refresh the server after making any changes to the code.</span><br><span class="line">UPLOAD_FOLDER = join(dirname(realpath(__file__)), &apos;uploaded_images/&apos;)</span><br></pre></td></tr></table></figure><p>Make a <strong>uploaded_images</strong> folder inside the config folder, this folder contains the image which will be uploaded on the server via user.</p><h2 id="Writing-a-basic-route-for-our-flask-app"><a href="#Writing-a-basic-route-for-our-flask-app" class="headerlink" title="Writing a basic route for our flask app"></a>Writing a basic route for our flask app</h2><p>We have completely setup our basic flask environment. Now, its time to write a very basic flask api for hello world. Open the routes.py inside the classifier folder. Add the below lines to it</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from classifier import app</span><br><span class="line">import flask</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/testing&apos;)</span><br><span class="line">def testing():</span><br><span class="line">    return &quot;&lt;h1&gt;Hello world&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure><p>Here, the <strong>route()</strong> function of the Flask class is a decorator, which tells the application which URL should call the associated function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.route(rule, options)</span><br></pre></td></tr></table></figure><ul><li><p>The <strong>rule</strong> parameter represents URL binding with the function.</p></li><li><p>The <strong>options</strong> is a list of parameters to be forwarded to the underlying Rule object.</p></li></ul><p>and in the end we just returned a simple message using some HTML tags.</p><p>To run this code, follows below steps.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd path/to/main-folder</span><br><span class="line">python run.py</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*kJBAht4yhvPymR1dyV9Eow.png" alt="Figure 2: After running the above command you should see above like messages"></p><p>Just open the browser and type localhost:8000/testing. You should see a screen just like below</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*vLAQroEaj-4mJwLDFe4Tlg.png" alt="Figure 3: This is the route which we wrote for “/testing”"></p><h2 id="Lets-start-our-main-route"><a href="#Lets-start-our-main-route" class="headerlink" title="Lets start our main route"></a>Lets start our main route</h2><p>Lets make our template. For this, firstly makes a folder called <strong>template</strong> inside the <strong>classifier</strong> folder. Now inside the template, create a home.html file and paste the code from this <a href="https://raw.githubusercontent.com/hghimanshu/Blog/master/image-classifier/classifier/templates/home.html" target="_blank" rel="noopener">link</a> in it.</p><p>Now, we make our home url and our backend part !!. So we will rewrite our routes.py file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/home&apos;)</span><br><span class="line">def home():</span><br><span class="line">    return render_template(&apos;home.html&apos;)  ## The template which we created above</span><br></pre></td></tr></table></figure><p>Now, our image processing function will be like below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import render_template</span><br><span class="line">from werkzeug import secure_filename</span><br><span class="line">from classifier.backend.prediction import image_prediction</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/fetchingImage&quot;, methods = [&apos;POST&apos;])</span><br><span class="line">def fetchingImage():</span><br><span class="line">    if flask.request.method == &apos;POST&apos;</span><br><span class="line">        image = flask.request.files[&apos;image&apos;]</span><br><span class="line">        image.save(app.config[&apos;UPLOAD_FOLDER&apos;] + secure_filename(image.filename))</span><br><span class="line">        full_img = app.config[&apos;UPLOAD_FOLDER&apos;] + image.filename</span><br><span class="line">        data = image_prediction(full_img)</span><br><span class="line">        if len(data)==2:</span><br><span class="line">            return render_template(&apos;prediction.html&apos;, results = data)</span><br><span class="line">        else:</span><br><span class="line">            return render_template(&apos;error.html&apos;, results = data)</span><br></pre></td></tr></table></figure><p>Here, firstly we get the image from the form in the <strong>home.html</strong>, then save the image into the system and then fetch that file and send it to another function <em>image_prediction</em> for processing. Then, we simply render the response from the model to the webpage. If there is no error, then we display the <strong>prediction.html</strong> template or else, we render the <strong>error.html</strong>. Now, working on our <em>image_prediction</em> function.</p><p>For making the this, firstly create a folder named <strong>backend</strong> inside the <em>classifier</em> folder, then inside the <strong>backend</strong> folder, create a <strong>prediction.py</strong> file and write the below code into it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import keras</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import cv2</span><br><span class="line">from keras.models import load_model</span><br><span class="line">from keras.applications.vgg19 import VGG19</span><br><span class="line">from keras.applications.vgg19 import decode_predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def image_prediction(image):</span><br><span class="line">    MODEL = VGG19()</span><br><span class="line">    try:</span><br><span class="line">        image = cv2.imread(image)</span><br><span class="line">        image = cv2.resize(image, (224, 224))</span><br><span class="line">        image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))</span><br><span class="line">        yhat = MODEL.predict(image)</span><br><span class="line">        label = decode_predictions(yhat)</span><br><span class="line">        label = label[0][0]</span><br><span class="line">        label, conf = label[1], label[2]*100</span><br><span class="line">        results = [label, conf]</span><br><span class="line">    except Exception as e:</span><br><span class="line">        results = &quot;Please check the image.&quot;</span><br><span class="line">    return results</span><br></pre></td></tr></table></figure><p>Now, let’s make our <strong>error.html</strong> and <strong>prediction.html</strong> templates. These templates are also, saved inside the <em>templates</em> folder. So, you can get the code for both the templates from <a href="https://github.com/hghimanshu/Blog/tree/master/image-classifier/classifier/templates" target="_blank" rel="noopener">here</a>.</p><p>Well the coding part is mostly done, now we will test our web application. Now open your console and run the below command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python run.py</span><br></pre></td></tr></table></figure><p>After this, it will firstly download the VGG19 pretrained weights <em>(if you are following my code.)</em>, then it will start the server. Now, open the browser and go to <strong>localhost:8000/home</strong>, you will see something like this</p><p><img src="https://cdn-images-1.medium.com/max/2454/1*D8SVbfL_3Mdj_00zhNFSuQ.png" alt="Figure 4: Our classifier’s home page"></p><p>Now, click on browse to upload any image and click the <strong>predict</strong> button. You’ll see some message like this (based on your image)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*IH_y0QAKul0HqqtZxboYrA.png" alt="Figure 5: Our Image Classification result"></p><p>If there is any some issue with your image, then below screen will appear</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ZHXZWF3g6hnKU7cSvhknuA.png" alt="Figure 6: Error message"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So, this is how we can make a very basic web application for our image classifier. You can also find the whole code from my <a href="https://github.com/hghimanshu/Blog/tree/master/image-classifier" target="_blank" rel="noopener">github</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://www.tutorialspoint.com/flask/index.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/flask/index.htm</a></p></li><li><p><a href="https://www.w3schools.com/bootstrap/bootstrap_templates.asp" target="_blank" rel="noopener">https://www.w3schools.com/bootstrap/bootstrap_templates.asp</a></p></li><li><p><a href="https://pythonprogramming.net/flask-send-file-tutorial/" target="_blank" rel="noopener">https://pythonprogramming.net/flask-send-file-tutorial/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yes! you read the title right. So, today in this post I’ll show you how to setup a basic image-classifier in the form of a web applicatio
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/blog/categories/AI/"/>
    
    
      <category term="Image-Classification" scheme="https://nayan.co/blog/tags/Image-Classification/"/>
    
      <category term="Keras" scheme="https://nayan.co/blog/tags/Keras/"/>
    
  </entry>
  
  <entry>
    <title>Android Testing Strategy</title>
    <link href="https://nayan.co/blog/Android/Android-Testing-Strategy/"/>
    <id>https://nayan.co/blog/Android/Android-Testing-Strategy/</id>
    <published>2019-11-29T17:07:05.000Z</published>
    <updated>2020-06-08T11:31:08.850Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Android/Android-Testing-Strategy/testing_strategy.jpeg" class="" title="Testing Strategy"><p>Testing android application is quite hard. There is no set guidelines for us to follow. When ever I started thinking of testing my application I always get confused where to start, should I write unit tests or instrumentation tests and should I start with integration and End to end tests. There is also a lot of confusion on frameworks available for android testing.<br>This article has been written in a sense to address this confusion and show us as developers what kind of testing is most preferred and what frameworks are available.</p><h2 id="Kinds-of-Tests"><a href="#Kinds-of-Tests" class="headerlink" title="Kinds of Tests"></a>Kinds of Tests</h2><h3 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h3><p>This is often referred to as local tests and  doesn’t require a device or emulator for running them. These can be classified broadly into categories</p><ul><li>Local/ Pure Unit tests - tests which can run on JVM, mainly written for testing business logic. On android JUnit, Mockito, the mockable Android JARs give us a nice combination of tools to run fast unit-style tests in the local JVM.</li><li>Android  Unit Tests -  tests which  requires the Android system (ART) and for this we need to replace android dependencies using Roboelectric<br>Guidelines</li><li>If you have dependencies on the Android framework, particularly those that create complex interactions with the framework, it’s better to include framework dependencies using Robolectric.</li><li>If your tests have minimal dependencies on the Android framework, or if the tests depend only on your own objects, it’s fine to include mock dependencies using a mocking framework like Mockito and PowerMock.</li></ul><p>Reference Url : <a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests" target="_blank" rel="noopener">https://developer.android.com/training/testing/unit-testing/local-unit-tests</a></p><h3 id="Instrumentation-Tests"><a href="#Instrumentation-Tests" class="headerlink" title="Instrumentation Tests"></a>Instrumentation Tests</h3><p>These tests requires device or an emulator for running. This is mostly used for UI testing but it can be used to test none UI logic as well.</p><ul><li><p>This is useful when you need to test code that has a dependency on context. </p></li><li><p>UI tests can be an essential component of any testing strategy since they can uncover issues related to UI, hardware, firmware, and backwards compatibility</p></li></ul><p>Reference Url: <a href="https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests" target="_blank" rel="noopener">https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests</a></p><h2 id="Testing-Frameworks"><a href="#Testing-Frameworks" class="headerlink" title="Testing Frameworks"></a>Testing Frameworks</h2><h3 id="Android-X-Test-Framework"><a href="#Android-X-Test-Framework" class="headerlink" title="Android X Test Framework"></a>Android X Test Framework</h3><p> It is testing framework and APIs provided  by android team for writing unit tests.</p><h3 id="Roboelectric"><a href="#Roboelectric" class="headerlink" title="Roboelectric"></a>Roboelectric</h3><p>It is a framework that brings fast and reliable unit tests to android. Runs inside JVM or your workstation in seconds. This is usually used to Integration testing. Integration tests validate how your code interacts with other parts of the system but without the added complexity of a UI framework.</p><p>app/src/test/java - for any unit test which can run on the JVM</p><p><strong>Question</strong> : How does it work?<br><strong>Answer</strong> : Unlike traditional emulators-based androids tests, it tests run inside a sandbox which allows the android environment to be precisely configured to the desired conditions for each test. It lets you run your tests on your workstation, or on your continuous integration environment in a regular JVM, without an emulator. It handles inflation of views, resource loading, and lots of other stuff that’s implemented in native C code on Android devices. This allows tests to do most things you could do on a real device. It’s easy to provide  our own implementation for specific SDK methods too, so you could simulate error conditions or real-world sensor behaviour. It allows a test style that is closer to black box testing, making the tests more effective for refactoring and allowing the tests to focus on the behaviour of the application instead of the implementation of Android</p><p><strong>Question</strong> : Why should be prefer this?<br><strong>Answer</strong> : In order for this to run tests it needs regular JVM,  Because of this, the dexing, packaging, and installing-on-the emulator steps aren’t necessary, reducing test cycles from minutes to seconds so you can iterate quickly and refactor your code with confidence. Robolectric executes your code against real (not mock) Android JARs in the local JVM.</p><h3 id="Espresso"><a href="#Espresso" class="headerlink" title="Espresso"></a>Espresso</h3><p> Use it to write concise, beautiful, and reliable Android UI tests. These tests are called Instrumentation tests and unlike unit tests takes more time to run them.</p><p>app/src/androidTest/java - for any instrumentation test which should run on an Android</p><p><strong>Question</strong> : How does it work?<br><strong>Answer</strong> : it requires an emulator or a real device to run tests. At the time of execution along with the main application, A testing application is also installed in the device which controls main application automatically.</p><h3 id="UI-Automator"><a href="#UI-Automator" class="headerlink" title="UI Automator"></a>UI Automator</h3><p>It allows us to write cross application functional tests ( End to End) . Example, Sharing messages via Text intent or sending email via locally installed email clients.</p><h3 id="Monkey-Runner-CL"><a href="#Monkey-Runner-CL" class="headerlink" title="Monkey Runner CL"></a>Monkey Runner CL</h3><p> Monkey is a command line tool which sends pseudo random events to your device. You can restrict Monkey to run only for a certain package and therefore instruct Monkey to test only your application. it can be used for Stress testing for android.</p><p>Reference Url : <a href="https://developer.android.com/studio/test/monkey" target="_blank" rel="noopener">https://developer.android.com/studio/test/monkey</a>            </p><h2 id="Recommandations"><a href="#Recommandations" class="headerlink" title="Recommandations"></a>Recommandations</h2><ul><li><p>Creating test groups - @SmallTest. @MediumTest and @LargeTest annotation allows us to classify tests. Allows you to run, for example, only short running tests for development cycle. You may run your long running tests on a continuous integration server.<br>This can be easily configured this via InstrumentationTestRunner in user build.gradle    (app)</p></li><li><p>We can use a three tiered approach</p><p><strong>Pure Unit tests :</strong>   These can be written for our business logic which are completely android independent of API and can run on JVM. These can be written using Junit Framework. Roboelectric Unit tests: where code has only small dependencies on android APIs and can be easily mocked with Roborelectric.</p><p><strong>Android Instrumentation tests :</strong> where code heavily interact with device hardware, sensors and android APIs. These tests will usually take most time to run.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Android/Android-Testing-Strategy/testing_strategy.jpeg&quot; class=&quot;&quot; title=&quot;Testing Strategy&quot;&gt;

&lt;p&gt;Testing android application i
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/blog/categories/Android/"/>
    
    
      <category term="Instrumentation Test" scheme="https://nayan.co/blog/tags/Instrumentation-Test/"/>
    
      <category term="Unit Test" scheme="https://nayan.co/blog/tags/Unit-Test/"/>
    
      <category term="Android Testing" scheme="https://nayan.co/blog/tags/Android-Testing/"/>
    
  </entry>
  
</feed>
