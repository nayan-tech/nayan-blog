<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nayan Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://nayan.co/"/>
  <updated>2020-08-11T03:40:04.564Z</updated>
  <id>https://nayan.co/</id>
  
  <author>
    <name>NayanTech</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow-docker</title>
    <link href="https://nayan.co/uncategorized/tensorflow-docker/"/>
    <id>https://nayan.co/uncategorized/tensorflow-docker/</id>
    <published>2020-08-11T03:40:04.564Z</published>
    <updated>2020-08-11T03:40:04.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container"><a href="#Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container" class="headerlink" title="Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container."></a>Installing Tensorflow 2.0 on Ubuntu 18.04 using docker. Run all experiments from a container.</h1><p>I have come across many developers who face serious issues when it comes to installing <strong>tensorflow</strong> on a <strong>linux</strong> distro such as <strong>Ubuntu</strong>. There are very few instances when the installation goes smoothly the first time itself. Mostly, the developer has to face a plethora of error messages which get quite tricky to solve. Some of the error messages are shown below:</p><pre><code>[...\stream_executor\dso_loader.cc] Couldn&apos;t open CUDA library nvcuda.dll[...\stream_executor\cuda\cuda_dnn.cc] Unable to load cuDNN DSO</code></pre><p>Similar error messages can be found in this official tensorflow link → <a href="https://www.tensorflow.org/install/errors" target="_blank" rel="noopener"><strong><em>https://www.tensorflow.org/install/errors</em></strong></a></p><p>Let’s make things easier and lives simpler:</p><h2 id="Enter-Docker"><a href="#Enter-Docker" class="headerlink" title="Enter Docker:"></a>Enter Docker:</h2><p>Using <strong><em>Docker</em></strong> containers the life of a developer becomes easier by a massive amount. Many developers shy away from using docker containers thinking that it introduces extra dependencies into the system followed by maintenance issues, but that’s a misconception.</p><p><strong><em>Docker</em></strong> containers actually reduce the time spent on figuring out different library versions to be installed and how they would communicate with one another. Containers solve multiple issues which arise with incompatibility of libraries and version mismatch. A container is completely independent from it’s host and reduces the chances of ruining environments on the host machine</p><h3 id="Installing-Docker-and-NVIDIA-Docker"><a href="#Installing-Docker-and-NVIDIA-Docker" class="headerlink" title="Installing Docker and NVIDIA Docker :"></a>Installing Docker and NVIDIA Docker :</h3><p>In order to run <strong><em>tensorflow</em></strong> as a container we would obviously need the latest version of docker to be installed and configured. Along with that we would also need <strong><em>NVIDIA Docker v2</em></strong> to be installed on the host machine. <strong><em>NVIDIA Docker</em></strong> plays a beautiful role of exposing the host machine’s GPU and GPU drivers to a container. Hence the developer only has to worry about installing the correct <strong><em>NVIDIA GPU</em></strong> <strong><em>driver</em></strong> on this machine. The <strong><em>NVIDIA Docker v2</em></strong> does the task of making it available for the container.</p><p>In order to learn how to install the latest version of Docker and NVIDIA Docker v2 , head over to my earlier post which describes this is in detail. Link given below:</p><p><a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener"><strong>Deep Learning for Production: Deploying YOLO using Docker.</strong></a></p><h3 id="Installing-tensorflow-using-Docker"><a href="#Installing-tensorflow-using-Docker" class="headerlink" title="Installing tensorflow using Docker:"></a><strong>Installing tensorflow using Docker:</strong></h3><p>Once your docker and NVIDIA docker v2 installation is complete with <strong><em>nvidia-smi</em></strong> giving you the output as shown in Fig 1, when run inside a docker container, we can move ahead with pulling the correct image for tensorflow.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*dPZfCX1ia00A3BmTP-QQhA.jpeg" alt="Fig 1: Output of nvidia-smi inside docker container"></p><p>Simply doing a <strong><em>docker pull tensorflow/tensorflow</em></strong> would download the latest version of tensorflow image. This can be run using the following command</p><pre><code>docker run -it -rm --runtime=nvidia --name=tensorflow_container ***tensorflow_image_name***</code></pre><p>Executing the command given above will run the tensorflow container in an interactive shell along with the availability of the <strong><em>NVIDIA gpus</em></strong> inside the container.</p><p>Now there are certain modifications which can be performed to get the tensorflow <strong><em>version</em></strong> required along with other libraries. Let’s say you want the latest version of tensorflow along with <strong><em>gpu</em></strong> support and <strong><em>python 3</em></strong> pre-installed. The image for this customization can be easily pulled using the following command:</p><pre><code>docker pull tensorflow/tensorflow:latest-gpu-py3</code></pre><p>You can find many other such images in the following link →<a href="https://hub.docker.com/r/tensorflow/tensorflow/tags" target="_blank" rel="noopener"><strong><em>https://hub.docker.com/r/tensorflow/tensorflow/tags</em></strong></a></p><p>Just do a docker pull on the one which suits your requirement.</p><p>If you want other libraries along with tensorflow, you can put them in a <strong><em>dockerfile</em></strong> and perform build command.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*bRwR0nlR4-XbX-00xpY5-Q.png" alt="Fig 2: Custom dockerfile with tensorflow"></p><p>Fig 2 above shows a custom <strong><em>dockerfile</em></strong> with <strong><em>tensorflow v1</em></strong> image being used along with installation of other libraries such as <strong><em>OpenCV,Moviepy,Keras</em></strong> and <strong><em>Apache Kafka</em></strong> for python</p><p>Once inside the container invoked using docker run, you can setup code to use tensorflow easily as you would done on the host machine without the container.</p><p>I would encourage all AI/ML practitioners to increase the use of docker containers to increase their research and development efficiency by reducing the time spent in managing multiple libraries and dueling with incompatibility errors.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Installing-Tensorflow-2-0-on-Ubuntu-18-04-using-docker-Run-all-experiments-from-a-container&quot;&gt;&lt;a href=&quot;#Installing-Tensorflow-2-0-on-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How to recognize Emotions using deep learning?</title>
    <link href="https://nayan.co/AI/emotion-recognition-sagar/"/>
    <id>https://nayan.co/AI/emotion-recognition-sagar/</id>
    <published>2020-08-06T14:16:00.000Z</published>
    <updated>2020-08-11T03:40:04.528Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://neurohive.io/wp-content/uploads/2018/12/labeled-images.57bd-e1547550772626.jpg" alt="Emotions"></p><p>Emotion Recognition is used for categorizing the emotions into one of the 6 emotions through the images of face. Intially viola jones or other face detection algorithm is used for detecting the faces. Preprocessing is also used for standardizing the images into same sizes.</p><p>Facial Feature extraction is used in a number of applications including emotion detection. In the following approach various popular feature descriptors, including Gabor features, HOG, DWT were computed. We have fused features using Multiview Distance Metric Learning (MDML) which<br> utilizes complementary features of the images to extract every known detail while eliminating the redundant   features.   Moreover   MDML  maps   the   features   extracted   from   the   dataset   to   higher discriminative space. The features belonging to the same class are brought closer and those that are from different classes are forced away by the MDML thereby increasing the accuracy of the classifier employed. CK+ Dataset has been used to conduct the experiments. Experimental results<br>represent the efficacy of the method is 93.5% displaying the potential of the recommended manner.</p><p>The human facial expressions contain clues to the emotional state of a person. Computation of emotion   of  a  human  through   facial  expression  has  been   a  central  topic  of  Human   Computer Interaction (HCI) research and a concern for researchers. The machines can utilize an emotion detection tool to understand the human emotions better and respond accordingly. Facial Expressions have been analyzed and put to use by various researchers such as in [6] the pain level can be recognized by detecting the facial expression. It can be used in case of patients who are mute or are not able to speak because of a disorder. [4] judges the concentration level of a viewer watching an advertisement. It has been employed for detecting various mental disorders such as depression and anxiety in [6].</p><p>As Paul Ekman showed in [1], the emotions are universally expressed in the same way regardless of the culture, nationality etc. Subtlety, variance of facial expression and complex nature of emotion further complicate the process. Six emotions have been defined by [1] in his paper. They are happy, Anger, Sad, Surprise, disgust and fear. Emotion detection is accomplished in three basic steps.</p><p>Firstly, the images are preprocessed and a high quality facial image is extracted from the original image from the dataset.</p><p>Secondly, feature descriptors are applied to the image for feature extraction. After the dimension reduction by a dimension reduction algorithm such as PCA, LDA, etc a classifier is used for classifying the image into one of emotion.</p><p>Since the Extended Cohn Kanade Dataset used is free from illumination variance, occlusion and head pose are some of the major concerns in many other datasets results shown are superior than most of the previous methods.</p><p>The  proposed  approach  is  novel  in detecting  and computing  the  emotions  through  Multiview Distance Metric Learning (MDML) introduced in [8]. The similar looking data from different classes are often misclassified. MDML helps to reduce this misclassification and fuses the results of various feature descriptors and extracts complementary features from them.</p><p>Moreover MDML maps the features extracted from the dataset to higher discriminative space. The features having affinity to the same emotion are brought closer while those having affinity to different emotion classes are moved as far as possible. The classifier is trained using this data.</p><ul><li>A. Emotion recognition </li></ul><p>The primary step in emotion detection is the localization of the face. CK+ dataset has been recorded in a controlled having illumination invariance and free from any occlusions. Hence, the facial image is always present in the image and priorly the face’s global position is known. Since wide variations are present in the scale and yaw, pitch, roll of the face, accurately localizing the face in different images is a very challenging task. The various obstructions and hindrances such as glasses and facial hair further complicates the task [1].</p><p>Viola-Jones [2] found an efficient answer for localizing the face. This method is based on AdaBoost learning and Haar-like features. Earlier it was developed for finding and detecting objects in an image [3]. It granted fast object detection for the task of real time usage. Keeping in mind the accuracy of the method, it is used for face localization.</p><ul><li>B. Feature Descriptor</li></ul><p>Feature extraction indicates deriving pertinent data from the preprocessed, gray scaled images from dataset, that will be employed for the intent of emotion detection. It is a defying task due to the above mentioned reasons. A comprehensive method is to derive descriptors from images is to use Log-Gabor filters as done in [2] by nominating the random bandwidth for making the Log-Gabor filter. Another attainable answer is to use model based method for the facial expression recognition   [5]. The  authors  in   [5]  constructed   a  light  source  and   subject  independent   global representation of expressions by discovering of the set of 322 image sequences in CK+ database. [7] utilizes LBP features and finds the emotion.</p><ul><li>C. Multiview Distance Metric Learning</li></ul><p>Motivated   by  the   discriminative   mapping   and   better   results   of   MDML  we  are   using   MDML proposed by [8] which attracts the features of the same class together and pushes away that belong to the different class. The data is then mapped to higher discriminative space and complementary features are extracted from the dataset. This ensures all the details of the image are taken into account. MDML pulls the similar data together and pushes away the different data away. In [8] the<br>authors used MDML for Pain intensity classification.</p><ul><li>D. Facial Expression Classification</li></ul><p>Finally, after being mapped to higher discriminative space features are enforced into the classifier for identification of the six emotions. The most sought after classifiers include template matching, rule based classifier, neural networks and support vector machines (SVM). In SVM, a hyperplane is constructed with ample distance among the different emotion classes during the training phase.</p><p>While during test phase, the trained SVM model classifies the test image to one of the emotion classes. In [7] the authors utilize SVM with linear kernel for expression classification. There are six basic emotion classes which are Anger, Disgust, Happy, Sad, Surprise and Fear for analysis of proposed algorithm.</p><p>The author of this blog is working currently with <a href="https://www.nayan.co" target="_blank" rel="noopener" >Nayan</a></p><ul><li><p>Bibliography</p></li><li><p>[1] Ekman, P., &amp; Friesen, W. V. (1971). Constants across cultures in the face and emotion. Journal of personality and social psychology, 17(2), 124.</p></li><li><p>[2]   L.   S.   Chen.   Joint   processing   of   audio-visual   information   for   the   recognition   of   emotional expressions in human-computer interaction. PhD thesis, University of Illinois at Urbana<br>Champaign, Dept. of Electrical Engineering, 2000.</p></li><li><p>[3] Viola, Paul, and Michael Jones. “Rapid object detection using a boosted cascade of simple features.” Computer Vision and Pattern Recognition, 2001. CVPR 2001. Proceedings of the 2001 IEEE Computer Society Conference on. Vol. 1. IEEE, 2001.</p></li><li><p>[4] S. Lajevardi and M. Lech, “Facial expression recognition from imagesequences using optimized feature selection,” Image and Vision Computing New Zealand, 2008. IVCNZ 2008. 23rd International Conference.pp. 1–6, 2008. J. T. Cacioppo and L.G. Tassinary. Inferring psychological significance from physiological signals. American Psychologist, 45:16–28, January 1990.</p></li><li><p>[5] Kaltwang, S., Rudovic, O., &amp; Pantic, M. (2012). Continuous pain intensity estimation from facial expressions. Advances in visual computing, 368-377</p></li><li><p>[6] Rathee, N., Vaish, A., &amp; Gupta, S. (2016, April).  Adaptive  system to learn and  recognize emotional   state   of   mind.   In   Computing,   Communication   and   Automation   (ICCCA),   2016 International Conference on (pp. 32-36). IEEE.</p></li><li><p>[7]   Rathee,   N.,   &amp;   Ganotra,   D.   (2016).   Multiview   Distance   Metric   Learning   on   facial   feature descriptors for automatic pain intensity detection. Computer Vision and Image Understanding, 147, 77-86.</p></li><li><p>[8] Dalal, N., &amp; Triggs, B. (2005, June). Histograms of oriented gradients for human detection. In Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on (Vol. 1, pp. 886-893). IEEE.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://neurohive.io/wp-content/uploads/2018/12/labeled-images.57bd-e1547550772626.jpg&quot; alt=&quot;Emotions&quot;&gt;&lt;/p&gt;
&lt;p&gt;Emotion Recognit
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Emotion Recognition" scheme="https://nayan.co/tags/Emotion-Recognition/"/>
    
      <category term="AI" scheme="https://nayan.co/tags/AI/"/>
    
      <category term="HCI" scheme="https://nayan.co/tags/HCI/"/>
    
  </entry>
  
  <entry>
    <title>How to host any port to entire internet on any machine?</title>
    <link href="https://nayan.co/AI/jupyter-hosting/"/>
    <id>https://nayan.co/AI/jupyter-hosting/</id>
    <published>2020-07-31T08:00:00.000Z</published>
    <updated>2020-08-11T03:40:04.528Z</updated>
    
    <content type="html"><![CDATA[<br><p><img src="/blog/AI/jupyter-hosting/nmap_guide.png" alt="Banner"></p><p>In this short blog post, I will explain a great trick to expose various services like Jupyter-notebook, tensorboard, etc. to the entire internet. We generally use it at <a href="http://nayan.co.in" target="_blank" rel="noopener">Nayan</a></p><p>Before following the steps I want you to understand some fundamentals behind the hosting of different services.</p><h3 id="Some-Basics"><a href="#Some-Basics" class="headerlink" title="Some Basics:"></a><strong>Some Basics:</strong></h3><p>Whenever we host some services on a local server having URLs like (<a href="https://localhost:8888" target="_blank" rel="noopener">https://localhost:8888</a> or <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a>) they are behind a NAT or firewall of our computer(Most of the hackers work to breach these).</p><p><img src="/blog/AI/jupyter-hosting/banner.jpg" alt="Firewall"></p><p>To jump over the firewall, we will use <a href="http://ngrok.com" target="_blank" rel="noopener">ngrok</a>.</p><h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok:"></a>Ngrok:</h3><p>Ngrok allows you to expose a web server running on your local machine to the internet. Just tell ngrok what port your web server is listening on.<br>something like this:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*yyRGRBHIsXRHw_8LfL8CAA.png" alt="Ngrok flowchart"></p><h3 id="Steps-to-host-Jupyter-Notebook-on-AWS-EC2"><a href="#Steps-to-host-Jupyter-Notebook-on-AWS-EC2" class="headerlink" title="Steps to host Jupyter-Notebook on AWS EC2:"></a><strong>Steps to host Jupyter-Notebook on AWS EC2:</strong></h3><ol><li><p>First, we need to install tmux for running processes(jupyter in our case) in background and jupyter notebook.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r</span><br></pre></td></tr></table></figure></li></ol><p>2) Download ngrok using</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget [https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip](https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip)</span><br></pre></td></tr></table></figure><p>3) Unzip to install ngrok</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip ngrok.zip</span><br></pre></td></tr></table></figure><p>4) Create an account on <a href="http://ngrok.com" target="_blank" rel="noopener">ngrok</a> and get authtoken.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*C36pyfvzwZnTXSieoHNVEw.png" alt="Authtoken"></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok authtoken &lt;your_auth_token&gt;</span><br></pre></td></tr></table></figure></code></pre><ol start="5"><li><p>Now on tmux we will run jupyter-notebook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-notebook --ip=0.0.0.0 --allow-root ```</span><br></pre></td></tr></table></figure></li><li><p>Host the noted port using ngrok. For my case it is 8890</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok http 8890</span><br></pre></td></tr></table></figure></li></ol><p>Also, you can make a config file and can host multiple ports using the same account as mentioned <a href="https://ngrok.com/docs#config" target="_blank" rel="noopener">here</a>.</p><ol start="7"><li>Now note the URL you got on ngrok screen.</li></ol><p><img src="https://cdn-images-1.medium.com/max/2000/1*QLItoFPpvwq7VNYMVjEqYw.png" alt="Ngrok link"></p><ol start="8"><li>Cheers and now hit the URL as many times as you can to access your favorite jupyter notebook.</li></ol><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h3><p>In this cool blogpost, we understood to host jupyter notebook on the local machine. We can host other services like tensorboard or anything you want.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/blog/AI/jupyter-hosting/nmap_guide.png&quot; alt=&quot;Banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this short blog post, I will explain a great trick to ex
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="AI" scheme="https://nayan.co/tags/AI/"/>
    
      <category term="Deep learning" scheme="https://nayan.co/tags/Deep-learning/"/>
    
      <category term="jupyter" scheme="https://nayan.co/tags/jupyter/"/>
    
      <category term="ngrok" scheme="https://nayan.co/tags/ngrok/"/>
    
      <category term="Kunal Goyal" scheme="https://nayan.co/tags/Kunal-Goyal/"/>
    
  </entry>
  
  <entry>
    <title>How to apply Proguard in an android application (Code obfuscation, shrinking, optimization)</title>
    <link href="https://nayan.co/Android/Applying-Proguard-in-an-android-application/"/>
    <id>https://nayan.co/Android/Applying-Proguard-in-an-android-application/</id>
    <published>2020-07-27T18:40:48.000Z</published>
    <updated>2020-08-11T03:40:04.452Z</updated>
    
    <content type="html"><![CDATA[<p>To make an application is not good enough, but it also needs to make secure and optimize. It’s the basic needs of an application.</p><p>To make your app as small as possible, you should enable shrinking in your release build to remove unused code and resources. When enabling shrinking, you also benefit from obfuscation, which shortens the names of your app’s classes and members, and optimization, which applies more aggressive strategies to further reduce the size of your app.</p><p>ProGuard is a tool used to do the following in an Android application:</p><h2 id="Minify-the-code"><a href="#Minify-the-code" class="headerlink" title="Minify the code"></a>Minify the code</h2><p>Detects and safely removes unused classes, fields, methods, and attributes from your app and its library dependencies</p><h2 id="Obfuscate-the-code"><a href="#Obfuscate-the-code" class="headerlink" title="Obfuscate the code"></a>Obfuscate the code</h2><p>Shortens the name of classes and members, which results in reduced DEX file sizes.</p><h2 id="Optimize-the-code"><a href="#Optimize-the-code" class="headerlink" title="Optimize the code"></a>Optimize the code</h2><p>Inspects and rewrites your code to further reduce the size of your app’s DEX files.</p><p><img src="/blog/Android/Applying-Proguard-in-an-android-application/flow_diagram.jpg" alt="Flow diagram for applying proguard"></p><p>To enable shrinking, obfuscation, and optimization, include the following in your project-level build.gradle file.</p><p>In that data class, we will handle some sessions related tasks (check session is active or not, update session etc.). A session will have two values start time and end time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            shrinkResources true</span><br><span class="line">            minifyEnabled true</span><br><span class="line">            proguardFiles getDefaultProguardFile(</span><br><span class="line">              &apos;proguard-android-optimize.txt&apos;),</span><br><span class="line">              &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While enabling proguard in your application there are some rules , that should be considered. Do not forget to add the Proguard rules in proguard-rules.pro file for any library that you have included in your project.</p><p>Like this for classes, also can apply for members and fields</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class &lt;className with pakage&gt;.** &#123; *; &#125;</span><br></pre></td></tr></table></figure><p>For Warning : You need to take a look on stacktrace to find which classes gives those warnings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-dontwarn &lt;classes_name&gt;</span><br><span class="line">-dontwarn java.nio.file.*</span><br></pre></td></tr></table></figure><h2 id="Some-stats-related-to-APK-size"><a href="#Some-stats-related-to-APK-size" class="headerlink" title="Some stats related to APK size"></a>Some stats related to APK size</h2><p><img src="/blog/Android/Applying-Proguard-in-an-android-application/stats.png" alt="Some stats before and after applying proguard"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noopener">https://developer.android.com/studio/build/shrink-code</a></p><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Android/App-Heartbeat/">App-Heartbeat</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To make an application is not good enough, but it also needs to make secure and optimize. It’s the basic needs of an application.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="Diwakar Singh" scheme="https://nayan.co/tags/Diwakar-Singh/"/>
    
      <category term="proguard" scheme="https://nayan.co/tags/proguard/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="shrinking" scheme="https://nayan.co/tags/shrinking/"/>
    
      <category term="obfuscation" scheme="https://nayan.co/tags/obfuscation/"/>
    
      <category term="optimization" scheme="https://nayan.co/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Deploying a Rails application to a Docker container</title>
    <link href="https://nayan.co/Rails/rails-docker/"/>
    <id>https://nayan.co/Rails/rails-docker/</id>
    <published>2020-07-25T08:00:00.000Z</published>
    <updated>2020-08-11T03:40:04.564Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Rails/rails-docker/rails-docker.jpg" class="" title="Rails and Docker" alt="Rails and Docker"><p>Docker has gained immense popularity over the past few years as a tool for depploying your applications to production. It allows you to package you application and all of its dependencies in an image, ready to be deployed anywhere.</p><p>Deploying a Rails app to Docker can be a bit tricky, so here’s a handy step by step guide.</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ul><li>Install Docker</li><li>Create Dockerfile</li><li>Create docker-compose.yml</li><li>Build the image</li><li>Deploy</li></ul><h4 id="Installing-Docker"><a href="#Installing-Docker" class="headerlink" title="Installing Docker"></a>Installing Docker</h4><p>If you are on Mac or Windows, its best to install <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop</a> which installs all the necessary tools for you.</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>It all starts with the Dockerfile. This is where you define how your image needs to be built.</p><p>TLDR;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM ruby:2.5.3</span><br><span class="line"></span><br><span class="line">RUN apt-get update -qq &amp;&amp; apt-get install -y nodejs postgresql-client</span><br><span class="line"></span><br><span class="line">RUN mkdir /src</span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line">ENV BUNDLER_VERSION=2.1.4</span><br><span class="line">RUN gem install bundler -v 2.1.4</span><br><span class="line"></span><br><span class="line">COPY Gemfile Gemfile.lock ./</span><br><span class="line">RUN bundle config build.nokogiri --use-system-libraries</span><br><span class="line">RUN bundle install</span><br><span class="line"></span><br><span class="line">COPY . ./</span><br><span class="line"></span><br><span class="line">#COPY entrypoint.sh /usr/bin/</span><br><span class="line">RUN chmod +x entrypoint.sh</span><br><span class="line">ENTRYPOINT [&quot;./entrypoint.sh&quot;]</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>You start by choosing the base image with your project Ruby version, and install the required libraries on the next line.</p><p>Then you create the source directory for your code and set it as your working directory.</p><p>Next, set the bundler version to the one from your Gemfile and install it.</p><p>Copy the Gemfile and Gemfile.lock, and install all dependencies.</p><p>Once the dependencies are installed, we copy the entire current directory to the image.</p><p>Finally, we define an entrypoint for the image. This is a script that will be run when the image is first started. And then we expose the port on which our app will run.</p><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>With the Dockerfile, we can build our application image. But it depends on other services as well, such as a database or maybe Redis. This is where Docker Compose comes into the picture.</p><p>We’ll create another file docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=password</span><br><span class="line">    volumes:</span><br><span class="line">      - ./tmp/db:/var/lib/postgresql/data</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    command: bash -c &quot;rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b &apos;0.0.0.0&apos;&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/src</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br></pre></td></tr></table></figure><p>We have two service, one for the database and one for the application. By defining the web service to be dependent on the db service, we tell Compose to start db before the web service.</p><h4 id="Entrypoint"><a href="#Entrypoint" class="headerlink" title="Entrypoint"></a>Entrypoint</h4><p>Finally, we define the entrypoint file that describes the tasks to be run when starting a new image.</p><p>entrypoint.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># Remove a potentially pre-existing server.pid for Rails.</span><br><span class="line">rm -f /src/tmp/pids/server.pid</span><br><span class="line"></span><br><span class="line"># Database migration</span><br><span class="line">RUN bundle exec rails db:migrate</span><br><span class="line"></span><br><span class="line"># Then exec the container&apos;s main process (what&apos;s set as CMD in the Dockerfile).</span><br><span class="line">bundle exec rails s -b 0.0.0.0</span><br></pre></td></tr></table></figure><p><em>One thing to note is that you should not have both the CMD and entrypoint in Dockerfile. Took me a few many hours to figure this out.</em></p><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><p>To build the container, run the following command,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose build</span><br></pre></td></tr></table></figure><h4 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h4><p>The app can be run locally by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run web rails new . --force --no-deps --database=postgresql</span><br></pre></td></tr></table></figure><p>You can upload the image to a registry service such as GCR. First tag the image, then push it to GCR,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;image-name&gt;:latest gcr.io/&lt;organization&gt;/&lt;image-name&gt;:latest</span><br><span class="line">docker push gcr.io/&lt;organization&gt;/&lt;image-name&gt;:latest</span><br></pre></td></tr></table></figure><p>And you are done. You can now deploy this image to GKE or any other Kubernetes engine.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Rails/rails-docker/rails-docker.jpg&quot; class=&quot;&quot; title=&quot;Rails and Docker&quot; alt=&quot;Rails and Docker&quot;&gt;

&lt;p&gt;Docker has gained immense
      
    
    </summary>
    
    
      <category term="Rails" scheme="https://nayan.co/categories/Rails/"/>
    
    
      <category term="Ruby" scheme="https://nayan.co/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://nayan.co/tags/Rails/"/>
    
  </entry>
  
  <entry>
    <title>How to check whether your product causes potential patent infringement</title>
    <link href="https://nayan.co/IP-Patents/potential-patent-infringement/"/>
    <id>https://nayan.co/IP-Patents/potential-patent-infringement/</id>
    <published>2020-07-24T18:16:09.000Z</published>
    <updated>2020-08-11T03:40:04.560Z</updated>
    
    <content type="html"><![CDATA[<br><p><img src="/blog/IP-Patents/potential-patent-infringement/banner.jpg" alt="Nayan IP"></p><!-- source/\_posts/potential-patent-infringement/banner.jpg --><p>Let’s imagine that as an entrepreneur or a product manager, you are going to launch a product (or service) commercially but you do not know what is patent infringement and how to avoid it (<a href="https://www.patentgrasp.com/2020/07/originally-published-on-www.html" target="_blank" rel="noopener">this article </a> explains what are patents and how they work). For anyone facing this situation, it is important to understand the meaning of patent infringement, know if you are infringing on a patent and use necessary remedies to avoid infringement, in early stages of your product launch. You may want to take such preventive measures because if patent infringement is proven after your product hits the market, you may need to pay a share of your revenues (called ‘royalty’) to the patent owner who alleges infringement. This is especially important for start-ups since in many cases, the company’s business model is largely based on these products and if they were to get stuck in patent infringement, it can be damaging for the entire business.</p><p>It, therefore, makes sense to take such risks into account before the product hits the market. To find whether your product infringes on a patent, let us first understand what is patent infringement. As we now already know, an important purpose of getting a patent is to protect an invention by excluding others from making it, using it, selling it, importing it or offering it for sale without the patent owner’s consent. Any such exploitation of the patented invention without the consent of the patent owner is called patent infringement. As an example, let’s assume that you have a technical solution or a product that you are going to commercialise. In this event, someone else with a patent on that product (or your technical solution) could approach you to solicit royalty (licensing fee) from you, since you are exploiting their patent without their consent.</p><p>Well, such a situation cannot always be completely eliminated but its probability can be minimized to a great extent if, before launching your product, you can conduct (or get a patent professional to conduct) a thorough patent search (known as a Freedom-to-operate search in IP world). The objective of doing so is to find patents which have claims that directly map to the features of your product. This precautionary effort can make you aware at early stages of your product launch, regarding any patent risks that you may face later on and allows you sufficient time to take necessary precautions.</p><p>Now we know that FTO search is used to find any third-party patents on which your product may infringe. An important aspect to remember here is that patent infringement occurs when a product feature directly maps to the ‘claims’ of a granted patent. For example, the very popular feature of “slide to unlock” on smartphones directly maps to this <a href="https://patents.google.com/patent/US8046721B2/en" target="_blank" rel="noopener">patent</a> (refer claim 1 in the linked patent) and thus, this feature is considered infringing on this patent.</p><p>Now that you know what is patent infringement and how it can affect you in the above situation, it logically follows that you would want to review every patent that is a potential risk and take precautionary measures accordingly. The simplest starting approach you can take as a beginner is to use this <a href="https://www.patentgrasp.com/2020/07/how-to-search-on-google-patents-google.html" target="_blank" rel="noopener">article</a> in conjunction with the points covered below to search for patents by using relevant keywords (or patent classes).</p><ol><li><p><strong>Patent is a territorial right</strong> - Any patent in any jurisdiction is an enforceable right that can be exercised only within the confines of that jurisdiction. For example, a product launched in U.S. (or any other country) cannot be considered infringing on a patent granted in Australia (or any country). This means if a patent owner has a patent granted in Australia, they can only enforce their patent within Australia and not outside. In fact, this is exactly why patent owners file patents in different jurisdictions separately and there is no such thing as global patent. Therefore, while searching you need to only stick to the patents that are granted in jurisdictions of your interest. This saves time and effort during your search.</p></li><li><p><strong>Independent claims must map entirely</strong> - An essential criteria of patent infringement is that at least one independent claim (any one) must map to the product features. If any of the dependent claims map to the product features without the independent claims getting mapped, it is not considered patent infringement. Another aspect to consider is that each feature of the independent claim must map to the product, for infringement to occur. If you refer to the ‘slide to unlock’ patent above, you will notice that the independent claim 1 of the patent maps entirely to the actual slide to unlock feature you use on your smartphone to unlock the phone. Moving on, if as a product owner, you can ascertain that any feature of the independent claim does not map, it is not considered patent infringement (but this can be subjective).</p></li><li><p><strong>Granted patent</strong> - Since only ‘granted’ patents can be enforced as per patent law in any country, any legal action can be taken by a third-party against you (as an infringing product owner) only if their patent is granted. Therefore, you should pay attention to the legal status of a patent before concluding that your product infringes on a patent. If a patent application is yet to be granted and its claims map to your product, it is likely that the scope of its claims would change during patent prosecution (and diverting from your product scope. However, you can watchlist such patents to track any change in their scope until (and if!) they get granted. This may affect your product strategy. If the patent is abandoned or expired (even after grant), you need not be concerned and can discard that particular patent from your consideration.</p></li><li><p><strong>Exhaustive search</strong>- A great aspect of patents is that they are published documents. This means that you will find most of the patents in public domain at one or another search tool. To make the search exhaustive though, you should try multiple search tools including Google Patents, Freepatentsonline, USPTO search tool, Espacenet, Patentscope and so on. If the budget permits, you can even try out a paid search tool as well for better patent coverage where high stakes are involved. However, no search completely eliminates the risk because the search tools have coverage limitations with respect to the jurisdictions and the number of patents covered. Additionally, most patent offices globally, publish patent applications after a few months from filing. Therefore, it is likely that at the time you are searching, a target patent has not been published and thus, could not be found but it does not mean that there is no infringement. However, doing an exhaustive search and repeating it periodically can minimize the risk of infringement to a great extent.</p></li></ol><p>All the above points translate to shortlisting at least one <strong>granted patent</strong>, which has <strong>at least one independent claim</strong> that <strong>completely maps</strong> to the product in consideration, in a jurisdiction of interest (where the product is going to get launched).</p><p>During your review of the patents that show up during search, you can shortlist patents using the above criteria and find the most relevant ones based on their claim features. These are the patents that pose patent infringement risk to your product. Remember that merely adding new features to the product or believing that you already have additional features in the product may not help you escape infringement as long as the infringing features are already present in the product.</p><p>Once you have done the above exercise, study the patents closely to find out any features in the independent claims that <strong>do not map</strong>. If that is not possible and you are stuck with a granted (enforceable) patent that does map to your product, you can try to <strong>modify your product features</strong> such that the product does not infringe on the shortlisted patent(s). Alternatively, you can approach the patent owner to strike a deal to license the patented invention. There are many more remedies available but I would avoid digressing from the scope of this article.</p><p>Like analysis of all market risks before launching a product, patent infringement risk also should be given high importance and all necessary due diligence should be done to minimise it.</p><p>If you are new to patents or are trying to learn this field in greater detail, do subscribe to this blog to get notified on similar articles on patent fundamentals.</p><h2 id="IP-focus-at-Nayan-Technologies"><a href="#IP-focus-at-Nayan-Technologies" class="headerlink" title="IP focus at Nayan Technologies"></a>IP focus at <a href="https://nayan.co">Nayan</a> Technologies</h2><p>Nayan Technologies is a new-age start-up focussed on Artificial Intelligence-based Intelligent Mobility. At Nayan, we strongly believe in creating and expanding our Intellectual Property assets. Nayan Technologies has more than 40 patent applications filed across the world in jurisdictions such as USA, Europe, PCT, Middle-East (GCC), Canada, India, Singapore, Indonesia and Australia with 4 patent grants already received across USA, Australia and India. These patents protect various facets of the Intelligent Mobility framework that Nayan Technology works on. To avoid external patent risks, Nayan applies a two-pronged strategy – first, to create, expand and diversify its own patent portfolio and second, to be aware of third-party patents from which patent risk is anticipated and take appropriate strategies accordingly. While innovation one of the core strengths at Nayan, we also believe in ensuring that Nayan’s innovation does not wilfully infringe on third-party patents, by following the above mentioned practices.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/blog/IP-Patents/potential-patent-infringement/banner.jpg&quot; alt=&quot;Nayan IP&quot;&gt;&lt;/p&gt;
&lt;!-- source/\_posts/potential-patent-infri
      
    
    </summary>
    
    
      <category term="IP-Patents" scheme="https://nayan.co/categories/IP-Patents/"/>
    
    
      <category term="Patents" scheme="https://nayan.co/tags/Patents/"/>
    
      <category term="Infringement" scheme="https://nayan.co/tags/Infringement/"/>
    
      <category term="Nayan IP" scheme="https://nayan.co/tags/Nayan-IP/"/>
    
      <category term="Nayan data protection" scheme="https://nayan.co/tags/Nayan-data-protection/"/>
    
  </entry>
  
  <entry>
    <title>How to implement Android RecyclerView Drag and Drop feature seamlessly</title>
    <link href="https://nayan.co/Android/android-recycler-view-drag-and-drop/"/>
    <id>https://nayan.co/Android/android-recycler-view-drag-and-drop/</id>
    <published>2020-07-07T12:41:05.000Z</published>
    <updated>2020-08-11T03:40:04.520Z</updated>
    
    <content type="html"><![CDATA[<p>We some times want to implement Drag and Drop feature OR Swip to dismiss feature on our recycler view. For implementing that we usually go for a library that already have this implemented, and at this point of time most of those libraries are using old APIs and complex logic to handle the things. But now we have simple and better ItemTouchHelper in the Android Support Library itself, so now we don’t need those good old libraries. Lets start implementing.</p><p><img src="/blog/Android/android-recycler-view-drag-and-drop/drag_n_drop.gif" alt="Drag n Drop and Swipe feature"></p><h2 id="1-Lets-create-an-ItemTouchHelper-Callback"><a href="#1-Lets-create-an-ItemTouchHelper-Callback" class="headerlink" title="1. Lets create an ItemTouchHelper.Callback"></a>1. Lets create an <code>ItemTouchHelper.Callback</code></h2><p>We’ll create an <code>ItemTouchHelper.Callback</code> to handle the events.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMovementFlags</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="comment">// Specify the directions of movement</span></span><br><span class="line">            <span class="keyword">return</span> makeMovementFlags(<span class="literal">null</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMove</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            target: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// Notify your adapter that an item is moved from x position to y position</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isLongPressDragEnabled</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// true: if you want to start dragging on long press</span></span><br><span class="line">            <span class="comment">// false: if you want to handle it yourself</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSwiped</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>, direction: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSelectedChanged</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>?, actionState: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState)</span><br><span class="line">            <span class="comment">// Hanlde action state changes</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearView</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.clearView(recyclerView, viewHolder)</span><br><span class="line">            <span class="comment">// Called by the ItemTouchHelper when the user interaction with an element is over and it also completed its animation</span></span><br><span class="line">            <span class="comment">// This is a good place to send update to your backend about changes</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-Set-directions"><a href="#2-Set-directions" class="headerlink" title="2. Set directions"></a>2. Set directions</h2><p>Add your movement flags for the directions you want to handle.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMovementFlags</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="comment">// Specify the directions of movement</span></span><br><span class="line">            <span class="keyword">val</span> dragFlags = ItemTouchHelper.UP or ItemTouchHelper.DOWN</span><br><span class="line">            <span class="keyword">return</span> makeMovementFlags(dragFlags, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-Update-Adapter"><a href="#3-Update-Adapter" class="headerlink" title="3. Update Adapter"></a>3. Update Adapter</h2><p>Tell your adapter about the positions updates of the items.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMove</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            target: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="comment">// Notify your adapter that an item is moved from x position to y position</span></span><br><span class="line">            yourAdapter.notifyItemMoved(viewHolder.adapterPosition, target.adapterPosition)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-Create-ItemTouchHelper"><a href="#4-Create-ItemTouchHelper" class="headerlink" title="4. Create ItemTouchHelper"></a>4. Create <code>ItemTouchHelper</code></h2><p>From <code>itemTouchHelperCallback</code> we’ll create an <code>ItemTouchHelper</code> object to attach RecyclerView to it.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> itemTouchHelper = ItemTouchHelper(itemTouchHelperCallback)</span><br></pre></td></tr></table></figure><h2 id="5-Attach-to-RecyclerView"><a href="#5-Attach-to-RecyclerView" class="headerlink" title="5. Attach to RecyclerView"></a>5. Attach to RecyclerView</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemTouchHelper.attachToRecyclerView(yourRecyclerView)</span><br></pre></td></tr></table></figure><p>By this time now you have Drag and Drop feature enabled in your RecyclerView you can just build the project and run the app.</p><h2 id="6-Handle-final-state"><a href="#6-Handle-final-state" class="headerlink" title="6. Handle final state"></a>6. Handle final state</h2><p>Now when you want to send and update to you backend about the new order of the items, then just override the <code>clearView</code> method of <code>itemTouchHelperCallback</code> and you are good to go.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clearView</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.clearView(recyclerView, viewHolder)</span><br><span class="line">            <span class="comment">// Called by the ItemTouchHelper when the user interaction with an element is over and it also completed its animation</span></span><br><span class="line">            <span class="comment">// This is a good place to send update to your backend about changes</span></span><br><span class="line">            <span class="comment">// Your API call</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Make-it-working-with-SwipeRefreshLayout"><a href="#Make-it-working-with-SwipeRefreshLayout" class="headerlink" title="Make it working with SwipeRefreshLayout"></a>Make it working with <code>SwipeRefreshLayout</code></h2><p>Now comes a strange problem when you try to implement this feature in swipe refresh layout. The problem is, when you try to drag the item from bottom to top direction, then it will work, but when you try to drag from top to bottom, then it fails, as <code>SwipeRefreshLayout</code> intercepts the callback of dragging from top to bottom.</p><p>We just have to disable the <code>SwipeRefreshLayout</code>‘s swipe to refresh feature for the drag time and enable it back when the user has dropped the item to its final position.</p><p>So, lets override <code>onSelectedChanged</code> to handle this.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> itemTouchHelperCallback = <span class="keyword">object</span>: ItemTouchHelper.Callback() &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSelectedChanged</span><span class="params">(viewHolder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>?, actionState: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState)</span><br><span class="line">            <span class="comment">// Hanlde action state changes</span></span><br><span class="line">            <span class="keyword">val</span> swiping = actionState == ItemTouchHelper.ACTION_STATE_DRAG</span><br><span class="line">            pullToRefresh.isEnabled = !swiping</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>That’s all you have to do for implementing Drag and Drop feature for your RecyclerView</p><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://medium.com/@gopalawasthi383/android-recyclerview-drag-and-drop-a3f227cdb641" target="_blank" rel="noopener">Android RecyclerView drag and drop</a></li><li><a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="noopener">Drag and Swipe with RecyclerView</a></li><li><a href="https://stackoverflow.com/a/32075806/5752113" target="_blank" rel="noopener">ItemTouchHelper and SwipeRefreshLayout (RecyclerView)</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Android/Android-Testing-Strategy/">Android Testing Strategy</a></li><li><a href="https://nayan.co/blog/Android/drawing-custom-paths-in-android/">How to draw custom paths/lines in Android usign PathEffect</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We some times want to implement Drag and Drop feature OR Swip to dismiss feature on our recycler view. For implementing that we usually g
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="ItemTouchHelper" scheme="https://nayan.co/tags/ItemTouchHelper/"/>
    
      <category term="Callback" scheme="https://nayan.co/tags/Callback/"/>
    
      <category term="RecyclerView" scheme="https://nayan.co/tags/RecyclerView/"/>
    
      <category term="Drag and Drop" scheme="https://nayan.co/tags/Drag-and-Drop/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
  </entry>
  
  <entry>
    <title>Youtube Data API in Angular app for realtime chanels video data</title>
    <link href="https://nayan.co/Web/angular-youtube/"/>
    <id>https://nayan.co/Web/angular-youtube/</id>
    <published>2020-06-21T16:36:18.000Z</published>
    <updated>2020-08-11T03:40:04.524Z</updated>
    
    <content type="html"><![CDATA[<br><p><img src="/blog/Web/angular-youtube/blog_banner.png" alt="Youtube data API in Angular app"></p><p>Facing issues getting data of your Youtube channel on your website? This blog is a guide demonstrating on how to integrate Youtube data API in your angular web application with few easy steps.</p><h2 id="YouTube-Data-API-v3"><a href="#YouTube-Data-API-v3" class="headerlink" title="YouTube Data API v3"></a>YouTube Data API v3</h2><p>The first step is to get the api key. By visiting <a href="https://developers.google.com/youtube/v3/getting-started" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/getting-started</a> you’ll find the procedures you need to get your authorization credentials.<br>In a nutshell, you need:</p><ol><li>Go to the Google Developers Console.</li><li>Select a project.</li><li>In the left sidebar, select APIs and authorization. In the list of APIs, make sure the status is ON for the YouTube Data API v3.</li></ol><p>After the project is created the next step is to register the HttpClientModule module in the main module (app.module.ts).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; HttpClientModule &#125; from &apos;@angular/common/http&apos;;</span><br></pre></td></tr></table></figure><p>And declare in imports:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">BrowserModule,</span><br><span class="line">AppRoutingModule,</span><br><span class="line">HttpClientModule,</span><br><span class="line">NgxSpinnerModule</span><br></pre></td></tr></table></figure><p>I’ll use the NGX-Spinner library to display a spinner while loading the videos.</p><p>Install the library with:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ngx-spinner --save</span><br></pre></td></tr></table></figure><p>And declare the module in the imports, as per the code above.<br>We can now create a service to make calls to the Youtube API.</p><p>In the terminal, write:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng g service youtube</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; HttpClient &#125; from &apos;@angular/common/http&apos;;</span><br><span class="line">import &#123; map &#125; from &apos;rxjs/operators&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: &apos;root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">export class YoutubeService &#123;</span><br><span class="line"></span><br><span class="line">  apiKey : string = &apos;YOUR-APIKEY-YOUTUBE&apos;;</span><br><span class="line"></span><br><span class="line">  constructor(public http: HttpClient) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    getVideosForChanel(channel, maxResults): Observable&lt;Object&gt; &#123;</span><br><span class="line">    let url = &apos;https://www.googleapis.com/youtube/v3/search?key=&apos; + this.apiKey + &apos;&amp;channelId=&apos; + channel + &apos;&amp;order=date&amp;part=snippet &amp;type=video,id&amp;maxResults=&apos; + maxResults</span><br><span class="line">    return this.http.get(url)</span><br><span class="line">      .pipe(map((res) =&gt; &#123;</span><br><span class="line">        return res;</span><br><span class="line">      &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We create an apiKey variable that stores the value of the API obtained in the first step.</p><p>Then we inject the HttpClient class into the constructor. It provides methods for performing HTTP requests.</p><p>Let’s implement a method that returns a list of videos. We name it getVideosForChanel(). We pass two arguments, the first is the channel ID. The second limit the number of videos.</p><p>We concatenate this information in the API URL, passing other parameters as the order (‘&amp; order = date), part = snippet that contains other properties that identify the title, the description, among others, and the type of resource (type = video).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let url = ‘https://www.googleapis.com/youtube/v3/search?key=&apos; + this.apiKey + ‘&amp;channelId=’ + channel + ‘&amp;order=date&amp;part=snippet &amp;type=video,id&amp;maxResults=’ + maxResults</span><br></pre></td></tr></table></figure><p>In the component class (app.component.ts), we declare an array for the result of the videos:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export class AppComponent &#123;</span><br><span class="line">videos: any[];</span><br></pre></td></tr></table></figure><p>In the constructor method, we inject the service created for requesting videos (YoutubeService) and a class to display a spinner (NgxSpinnerService).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor(private spinner: NgxSpinnerService, private youTubeService: YoutubeService) &#123; &#125;</span><br></pre></td></tr></table></figure><p>Then, in the ngOnInit( ) method, we invoke the method by passing the Channel ID, in this example the channel is my child’s :), and a maximum number of .getVideosForChanel results.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line">this.spinner.show()</span><br><span class="line">setTimeout(()=&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.spinner.hide()</span><br><span class="line">&#125;,3000)</span><br><span class="line">this.videos = [];</span><br><span class="line">this.youTubeService</span><br><span class="line">.getVideosForChanel(&apos;UC_LtA_EtCr7Jp5ofOsYt18g&apos;, 15)</span><br><span class="line">.pipe(takeUntil(this.unsubscribe$))</span><br><span class="line">.subscribe(lista =&gt; &#123;</span><br><span class="line">for (let element of lista[&quot;items&quot;]) &#123;</span><br><span class="line">this.videos.push(element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the result, .subscribe (list =&gt; {, retrieve the items property and add each object in the created array.</p><p>At the beginning of the function, we included a timeout of 3 seconds to close the spinner in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.spinner.hide()</span><br><span class="line">&#125;,3000)</span><br></pre></td></tr></table></figure><p>Let’s finalize, coding the component template (app.component.html:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngFor=&quot;let video of videos&quot; class=&quot;col-xl-3 col-md-6 mb-4&quot;&gt;</span><br><span class="line">&lt;div class=&quot;card border-0 shadow vh-50&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.youtube.com/watch?v=&#123;&#123;video.id.videoId&#125;&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img [src]=&quot;video.snippet.thumbnails.medium.url&quot; class=&quot;card-img-top&quot; alt=&quot;...&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;card-body text-center&quot;&gt;</span><br><span class="line">&lt;h5 class=&quot;card-title mb-0&quot;&gt;</span><br><span class="line">&lt;a href=&quot;https://www.youtube.com/watch?v=&#123;&#123;video.id.videoId&#125;&#125;&quot;&gt;&#123;&#123;video.snippet.title&#125;&#125;</span><br><span class="line">&lt;/a&gt;&lt;/h5&gt;</span><br><span class="line">&lt;div class=&quot;card-text text-black-50&quot;&gt;&#123;&#123;video.snippet.description.slice(0, 100)&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;p class=&quot;card-text&quot;&gt;&#123;&#123;video.snippet.description&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>We loop the array using the * ngFor directive. We have defined a link to view the video through videoID at href = “<a href="https://www.youtube.com/watch?v=" target="_blank" rel="noopener">https://www.youtube.com/watch?v=</a>“.</p><p>Resources:</p><ol><li><a href="https://developers.google.com/youtube/v3" target="_blank" rel="noopener">https://developers.google.com/youtube/v3</a></li><li><a href="https://developers.google.com/youtube/v3/docs/videos/list" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/docs/videos/list</a></li></ol><p>Previous blog: <a href="https://nayan.co/blog/Web/angular-maps/">https://nayan.co/blog/Web/angular-maps/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/blog/Web/angular-youtube/blog_banner.png&quot; alt=&quot;Youtube data API in Angular app&quot;&gt;&lt;/p&gt;
&lt;p&gt;Facing issues getting data of yo
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/categories/Web/"/>
    
    
      <category term="angular" scheme="https://nayan.co/tags/angular/"/>
    
      <category term="youtube" scheme="https://nayan.co/tags/youtube/"/>
    
      <category term="Youtube data API" scheme="https://nayan.co/tags/Youtube-data-API/"/>
    
      <category term="Nayan" scheme="https://nayan.co/tags/Nayan/"/>
    
      <category term="Cloud Data" scheme="https://nayan.co/tags/Cloud-Data/"/>
    
  </entry>
  
  <entry>
    <title>How to draw custom paths/lines in Android usign PathEffect</title>
    <link href="https://nayan.co/Android/drawing-custom-paths-in-android/"/>
    <id>https://nayan.co/Android/drawing-custom-paths-in-android/</id>
    <published>2020-06-08T12:41:05.000Z</published>
    <updated>2020-08-11T03:40:04.528Z</updated>
    
    <content type="html"><![CDATA[<p>We can draw simple lines and shapes by using <code>path.lineTo</code>, <code>path.moveTo</code> etc. But sometimes we have requirements to draw a line in pattern, for example: simple dashed, two lines where 1 is continuous and other one is dashed etc.</p><p><img src="/blog/Android/drawing-custom-paths-in-android/lines.png" alt="Lines Drawn By PathEffects"></p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>First we’ll have to create a small path that we want to repeat in the final path</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These are some sample methods to generate a single block of path</span></span><br><span class="line"><span class="comment">// which will be repeated in the final path that we'll draw on canvas</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw a small line with width 10px and length 30px</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeDefaultLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">        <span class="keyword">val</span> p = Path()</span><br><span class="line">        p.moveTo(-<span class="number">15f</span>, <span class="number">5f</span>)</span><br><span class="line">        p.lineTo(<span class="number">15f</span>, <span class="number">5f</span>)</span><br><span class="line">        p.lineTo(<span class="number">15f</span>, -<span class="number">5f</span>)</span><br><span class="line">        p.lineTo(-<span class="number">15f</span>, -<span class="number">5f</span>)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw two small lines with width 4px and length 30px</span></span><br><span class="line"><span class="comment">// They'll have 4px space between them</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeDoubleLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Path()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will draw two small lines</span></span><br><span class="line"><span class="comment">// One with width 4px and length 15px</span></span><br><span class="line"><span class="comment">// Other with width 4px and length 30px</span></span><br><span class="line"><span class="comment">// They'll have 4px space between them</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">makeBrokenSolidLinePath</span><span class="params">()</span></span>: Path &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Path()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">0f</span>, <span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">0f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, <span class="number">2f</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.moveTo(-<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">6f</span>)</span><br><span class="line">    p.lineTo(<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    p.lineTo(-<span class="number">15f</span>, -<span class="number">2f</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve create our building blocks of the final path. Now we’ll be setting PathEffect to the paint that will draw these blocks.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First setup your paint object</span></span><br><span class="line"><span class="keyword">val</span> paint = Paint()</span><br><span class="line">paint.style = Paint.Style.STROKE</span><br><span class="line">paint.strokeWidth = <span class="number">10f</span></span><br><span class="line">paint.color = Color.YELLOW</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare your pathDashPathEffect</span></span><br><span class="line"><span class="keyword">var</span> pathDashPathEffect: PathDashPathEffect? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define your pathDashPathEffect</span></span><br><span class="line">pathDashPathEffect = PathDashPathEffect(makeDoubleLanePath(),           <span class="comment">//Your building block</span></span><br><span class="line">                                        <span class="number">45f</span>,                            <span class="comment">//At how much distance the next block should be drawn from the current block's starting point</span></span><br><span class="line">                                        <span class="number">0f</span>,                             <span class="comment">//Phase value</span></span><br><span class="line">                                        PathDashPathEffect.Style.MORPH) <span class="comment">//EffectStyle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your defined pathDashPathEffect to your paint object</span></span><br><span class="line">pathDashPathEffect?.let &#123; effect -&gt;</span><br><span class="line">    paint.pathEffect = effect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have our paint object with pathEffect with us. Now we’ll be drawing a path that we actaully want to draw using this paint object.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineX1 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineX2 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineY1 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">var</span> lineY2 = <span class="number">0f</span></span><br><span class="line"><span class="keyword">val</span> path = Path()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    path.reset()</span><br><span class="line">    path.moveTo(lineX1, lineY1)</span><br><span class="line">    path.lineTo(lineX2, lineY2)</span><br><span class="line"></span><br><span class="line">    canvas?.drawPath(path,  <span class="comment">//This final path that we are drawing now</span></span><br><span class="line">                     paint) <span class="comment">//The one that we created earlier</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://stackoverflow.com/questions/10907386/custom-path-line-style-when-drawing-on-canvas" target="_blank" rel="noopener">Custom path line style when drawing on canvas</a></li><li><a href="https://stackoverflow.com/questions/20068803/what-does-path-mean-in-pathdashpatheffect-constructor" target="_blank" rel="noopener">what does path mean in PathDashPathEffect constructor</a></li><li><a href="http://android-coding.blogspot.com/2014/05/pathdashpatheffect-example.html" target="_blank" rel="noopener">PathDashPathEffect example</a></li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Android/Android-Testing-Strategy/">Android Testing Strategy</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We can draw simple lines and shapes by using &lt;code&gt;path.lineTo&lt;/code&gt;, &lt;code&gt;path.moveTo&lt;/code&gt; etc. But sometimes we have requirements t
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="kotlin" scheme="https://nayan.co/tags/kotlin/"/>
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
      <category term="canvas" scheme="https://nayan.co/tags/canvas/"/>
    
      <category term="paint" scheme="https://nayan.co/tags/paint/"/>
    
      <category term="path" scheme="https://nayan.co/tags/path/"/>
    
      <category term="PathDashPathEffect" scheme="https://nayan.co/tags/PathDashPathEffect/"/>
    
      <category term="DashPathEffect" scheme="https://nayan.co/tags/DashPathEffect/"/>
    
      <category term="CornerPathEffect" scheme="https://nayan.co/tags/CornerPathEffect/"/>
    
      <category term="ComposePathEffect" scheme="https://nayan.co/tags/ComposePathEffect/"/>
    
      <category term="draw custom path" scheme="https://nayan.co/tags/draw-custom-path/"/>
    
  </entry>
  
  <entry>
    <title>Detecting Whether a Parking Zone Is Vacant Or Occupied</title>
    <link href="https://nayan.co/AI/Vehicle-Parking-Occupancy-Detection/"/>
    <id>https://nayan.co/AI/Vehicle-Parking-Occupancy-Detection/</id>
    <published>2020-06-01T17:22:29.000Z</published>
    <updated>2020-08-11T03:40:04.488Z</updated>
    
    <content type="html"><![CDATA[<p>Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.<br>However , there has been a major boost in the field of <a href="https://nayan.co/#/home">Deep Learning</a> and <a href="https://nayan.co/#/home">Computer Vision</a> in the past few years which enables us to create a robust and a real-time solution.</p><img src="/blog/AI/Vehicle-Parking-Occupancy-Detection/20140103__bartpark31-1.jpg" class="" title="Depicting the Problem"><h3 id="Plan-Of-Attack"><a href="#Plan-Of-Attack" class="headerlink" title="Plan Of Attack"></a>Plan Of Attack</h3><p> A pipeline for the same has been created which consists of  the following 5 steps :</p><ol><li><strong>Finding suitable Images</strong> </li><li><strong>Parking zones detection</strong></li><li><strong>Vehicle detection</strong></li><li><strong>Plotting the vehicles as point objects on 2d-map</strong></li><li><strong>Detecting whether a parking lot is vacant or occupied</strong> </li></ol><p>Each of the 5 steps have been described in detail in the following sections :</p><h3 id="1-Finding-Suitable-Images"><a href="#1-Finding-Suitable-Images" class="headerlink" title="1) Finding Suitable Images"></a>1) Finding Suitable Images</h3><p>The first step to solve any problem in <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> is to collect data.<br>In our approach , we just required 2 images throughout the entire process.</p><p>The 2 images required are:</p><pre><code>* Image of actual camera view of the parking zones * Image of the top-view / 2d-map of the same area</code></pre><p>We obtained these 2 images in the following manner :</p><pre><code>* There are a lot of open CCTV IP cameras available freely on the internet. By using one of the websites , we were    able to get our first image which is a camera view of parking zones.</code></pre><p><img src="2.png" alt="Fig 2: Camera View of Parking Zones"></p><pre><code>* The same website also provided us the longitude and latitude of the area which was then entered in Google Maps   in order to get it’s top-view.</code></pre><p><img src="3.png" alt="Fig 3: Longitude and Latitude search on Google Maps"></p><p><img src="4.png" alt="Fig 4:  Top-view of parking zones"></p><p>We now have both the images and we are ready to proceed to the next step.</p><h3 id="2-Parking-Zones-Detection"><a href="#2-Parking-Zones-Detection" class="headerlink" title="2) Parking Zones Detection"></a>2) Parking Zones Detection</h3><p>This is one of the most important tasks in the entire pipeline as almost all the remaining tasks are dependent on this. Getting these inaccurate could impact our entire pipeline leading us to an incorrect outcome.</p><p>Before jumping onto this , I had done some research and found that the following 3 methods are most commonly used to tackle this kind of problem :</p><pre><code>* Canny edge detection and hough line transform combined with image processing could detect the lines in the parking     zones. * Manually drawing out the contours on the parking zones. * Directly perform vehicle detection and locate the stationary cars assuming that they are on the parking zones.</code></pre><p>Third method is based on assumptions and also not suitable for many scenarios , due to which we discarded it as an option.</p><p>We used the first method wherein we detected the lines using canny edge detection and hough line transform combined with image processing.</p><p><img src="5.jpg" alt="Fig 5:  Drawing the contours over the parking zones"></p><h3 id="3-Vehicle-Detection"><a href="#3-Vehicle-Detection" class="headerlink" title="3) Vehicle Detection"></a>3) Vehicle Detection</h3><p>In order to achieve this , we had used the state-of-the-art YOLOv3 <strong><em>Deep Learning</em></strong> object detection model.</p><p><img src="6.jpg" alt="Fig 6:  Vehicles detected by YoloV3"></p><p>This is a crucial step as once we get the bounding boxes accurately, only  then would we be able to detect whether a parking zone is vacant or occupied.</p><h3 id="4-Representing-the-vehicles-as-point-objects-on-2d-map"><a href="#4-Representing-the-vehicles-as-point-objects-on-2d-map" class="headerlink" title="4) Representing the vehicles as point objects on 2d-map"></a>4) Representing the vehicles as point objects on 2d-map</h3><p>For this step , we would be using a very classical <strong><em>Computer Vision</em></strong> concept.<br>This step can be broken to the following sub-steps :</p><pre><code>*Using Google API , we came to know the dimensions of the parking areas in both the images.  *This helped us in restricting the images to particular areas which further aided us in automatically detecting key     points in both images. *Distortion also plays a significant role in getting accurate key-points. So had there been some information about the     planted camera , we could have undistorted the images and got more accurate key-points </code></pre><p><img src="7.jpg" alt="Fig 7:   Key-Points marked on the camera view image"></p><p><img src="8.jpg" alt="Fig 8:   Key-Points marked on the top-view image"></p><p>Using the key-points in the above 2 images , we calculate their homography.</p><ol><li><p>We can represent vehicles as point objects by the following steps  :</p><ol><li><code>First step is to determine the 2d-point matrix by multiplying homography and the center coordinates of the bounding boxes</code><br><img src="9.jpg" alt="where center-x and center-y are the center coordinates of the bounding boxes"></li><li><code>The final step in finding the 2d coordinates is to divide the 2d-point matrix obtained by third element.</code></li></ol></li></ol><p><img src="10.png" alt="&#39;2d-point is calculated&#39;"></p><p>Therefore the 2d coordinates for all the vehicles are derived in similar fashion and are plotted on the 2d-map<br>        image.</p><p><img src="11.jpg" alt="Fig 11:   Vehicles depicted as 2d-points "></p><p>Getting these points plotted at accurate locations implies that results and calculations we got from both step 3<br>        and step 4 are perfect.</p><h3 id="5-Detecting-whether-a-parking-lot-is-vacant-or-occupied"><a href="#5-Detecting-whether-a-parking-lot-is-vacant-or-occupied" class="headerlink" title="5) Detecting whether a parking lot is vacant or occupied"></a>5) Detecting whether a parking lot is vacant or occupied</h3><p>Point Polygon test is used here to find whether the point is inside or outside the parking zone.</p><ol><li><p>Point polygon test checks whether a point is inside the polygon or not.</p></li><li><p>It returns a negative value if the point is outside the polygon , 0 if the point is on the polygon and a<br> positive value if the point is inside the polygon.</p></li></ol><p><img src="12.jpg" alt="Fig 12:   Final Result  "></p><p>Hence as it can be seen from the image above, with the help of <strong><em>Deep Learning</em></strong> and <strong><em>Computer Vision</em></strong> , we have successfully solved this problem by following a very simple and systematic approach.</p><p>For more such exciting Deep Learning blog posts,<a href="https://nayan.co/blog/">click here</a>.</p><p>Also, <a href="https://nayan.co/#/home">click here</a> to know how we are leveraging AI for traffic monitoring and road safety.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Circling around the parking is one of the most annoying experiences mainly because it is time consuming and quite irritating too.&lt;br&gt;Howe
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Deep Learning" scheme="https://nayan.co/tags/Deep-Learning/"/>
    
      <category term="Computer Vision" scheme="https://nayan.co/tags/Computer-Vision/"/>
    
      <category term="Parking Detection" scheme="https://nayan.co/tags/Parking-Detection/"/>
    
      <category term="Vehicle Occupancy Detection" scheme="https://nayan.co/tags/Vehicle-Occupancy-Detection/"/>
    
  </entry>
  
  <entry>
    <title>Meta-Learning:Learning-to-learn-fast and its approaches</title>
    <link href="https://nayan.co/AI/Meta-Learning-Learning-to-learn-fast/"/>
    <id>https://nayan.co/AI/Meta-Learning-Learning-to-learn-fast/</id>
    <published>2020-05-06T10:36:34.000Z</published>
    <updated>2020-08-11T03:40:04.464Z</updated>
    
    <content type="html"><![CDATA[<!-- # Meta-Learning(Learning to learn fast) and its approaches --><blockquote><p>In this blog, I will explain meta-learning what is also known as learning to learn in machine learning.</p></blockquote><!-- ![Meta Learning](meta-learning.png "Meta Learning") --><img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/meta-learning.png" class="" title="Meta Learning"><h2 id="What-is-Meta-Learning"><a href="#What-is-Meta-Learning" class="headerlink" title="What is Meta-Learning?"></a>What is Meta-Learning?</h2><p>Current AI agents excel at mastering a particular skill like object classification, predicting a disaster, <a href="https://nayan.co/blog/2020/01/09/Efficient-Residual-Factorized-Neural-Network-for-Semantic-Segmentation/">image segmentation</a> etc. However, now AI is extensively used in day-to-day life. Almost every organization now uses AI in their products. So there is a need for a single AI agent that can solve a variety of problems. <strong><em>A good machine learning model often requires training with a large number of samples. Humans, in contrast, learn new concepts and skills much faster and more efficiently.</em></strong> Kids who have seen cats and birds only a few times can quickly tell them apart. Similar to humans, machine learning models need to be versatile and adapt to a new problem with the least number of samples. This essentially <strong>meta-learning</strong> aims to solve.</p><p>Versatility is achieved by an intelligent amalgamation of meta-learning along with related techniques such as <strong>reinforcement learning</strong> (finding suitable actions to maximize a reward), <strong>transfer learning</strong>    (re-purposing a trained model for a specific task on a second related task), and <strong>active learning</strong> (learning algorithm chooses the data it wants to learn from). Such different learning techniques provide an AI agent with the brains to do multiple tasks without the need to learn every new task from scratch. Thereby making it capable of adapting intelligently to a wide variety of new, unseen situations.</p><blockquote><p><strong>Using Meta-Learning, AI agents learn how to learn new tasks by reusing prior experience, rather than examining each new task in isolation.</strong></p></blockquote><h2 id="Approaches-for-Meta-Learning"><a href="#Approaches-for-Meta-Learning" class="headerlink" title="Approaches for Meta-Learning"></a><strong>Approaches for Meta-Learning</strong></h2><p>There are two popular approaches to <a href="https://nayan.co/#/home">meta-learning</a>.</p><h3 id="The-Simple-View"><a href="#The-Simple-View" class="headerlink" title="The Simple View"></a><strong>The Simple View</strong></h3><p>A good meta-learning model should be trained over a variety of learning tasks and optimized for the best performance on the distribution of tasks, including potentially unseen tasks. Each task is associated with a dataset D, containing both feature vectors and true labels. The optimal model parameters are:</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_1.png" class=""> --><p><img src="formula_1.png" alt="" title="Formula 1"><br>here one dataset is considered as one sample data point.</p><h3 id="Few-shot-classification"><a href="#Few-shot-classification" class="headerlink" title="Few-shot classification"></a><strong>Few-shot classification</strong></h3><p><em>Few-shot classification</em> is an instantiation of meta-learning in the field of supervised learning. The dataset <strong><em>D</em></strong> is often split into two parts, support set <strong><em>S</em></strong> for learning and a prediction set <strong><em>B</em></strong> for training or testing, <strong><em>D=</em>(<em>S, B</em>)</strong>. Often we consider a <em>K-shot N-class classification</em> task: the support set contains K labeled examples for each of N classes.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/image.png" class="" title="An example of a 4-shot 2-class image classification"> --><p><img src="image.png" alt="An example of a 4-shot 2-class image classification" title="An example of a 4-shot 2-class image classification"></p><p>A dataset <strong><em>D</em></strong> contains pairs of feature vectors and labels, and each label belongs to a known label set <strong><em>L</em></strong>. Let’s say, our classifier <strong><em>f</em></strong> outputs a probability of a data point belonging to the class <strong><em>y</em></strong> given the feature vector <strong><em>x, Pθ(y|x)</em></strong>. The optimal parameters should maximize the probability of true labels across multiple training batches <strong><em>B⊂D</em></strong>:</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_2.png" class=""> --><p><img src="formula_2.png" alt="" title="Formula 2"></p><p>In a few-shot classification, the goal is to reduce the prediction error on data samples with unknown labels given small support set for “fast learning” (think of how “fine-tuning” works). To make the training process mimics what happens during inference, we would like to “fake” datasets with a subset of labels to avoid exposing all the labels to the model and modify the optimization procedure accordingly to encourage fast learning:</p><ol><li><p>Sample a subset of labels.</p></li><li><p>Sample a support set and a training batch. Both of them only contain data points with labels belonging to the sampled label set.</p></li><li><p>The support set is part of the model input.</p></li><li><p>The final optimization uses the mini-batch to compute the loss and update the model parameters through backpropagation, in the same way as how we use it in the supervised learning</p></li></ol><p>We may consider each pair of sampled datasets as one data point. The model is trained such that it can generalize to other datasets. Symbols in red are added for <a href="https://nayan.co/#/home">meta-learning</a> in addition to the supervised learning objective.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/formula_3.png" class=""> --><p><img src="formula_3.png" alt="" title="Formula 3"></p><h2 id="The-Learner-and-Meta-Learner"><a href="#The-Learner-and-Meta-Learner" class="headerlink" title="The Learner and Meta Learner"></a><strong>The Learner and Meta Learner</strong></h2><p>Another popular view of meta-learning decomposes the model update into two stages:</p><ul><li><p><strong><em>A classifier is the learner model, trained for operating a given task;</em></strong></p></li><li><p><strong><em>In the meantime, an optimizer learns how to update the learner model’s parameters via the support set.</em></strong></p></li></ul><p>Let’s consider what happens in normal supervised training. In the figure below, <strong>M</strong> is the neural network with initial weights (blue ■) and <strong>L</strong> calculates the loss function, and <strong>O</strong> is the optimizer with parameters (pink ★). For each data sample, the model predicts, finds loss, and optimizes the model weights. This happens in the cycle.</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/training_process.png" class="" title="Training step in supervised learning"> --><p><img src="training_process.png" alt="Training step in supervised learning" title="Training step in supervised learning"></p><p>In meta-learning, the model <strong>M</strong> is called <strong>the learner</strong> and the optimizer <strong>O</strong> is called <strong>the meta-learner</strong>. The meta-learner’s parameters are learned by back-propagating a meta-loss gradient along the training process itself, back to the initial weights of the model and/or to the parameters of the optimizer</p><p>We now have two, nested, training processes: the <strong><em>meta-training process</em></strong> of the optimizer/meta-learner in which the <em>(meta-)forward pass</em> includes several training steps of the model (with forward, backward, and optimization steps).</p><!-- <img src="/blog/AI/Meta-Learning-Learning-to-learn-fast/meta_training.gif" class="" title="Meta Training process"> --><p><img src="meta_training.gif" alt="Meta Training process" title="Meta Training process"></p><p>A single step of the <strong>meta-training process</strong> includes two steps of the <strong>training process</strong> of the model (vertically in the meta-forward and meta-backward boxes). The training process of the model is exactly the same training process as in supervised learning. The input of the meta-forward pass is a list of examples/labels (or a list of batches) that are used successively during the model training pass. <strong><em>Meta-loss</em></strong> is calculated to reduce the training error. It means, the lower the loss, the better the training was. A <strong><em>meta-optimizer</em></strong> is used to update the weights of the optimizer.</p><p>Thanks for reading it…</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><p><a href="https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html#a-simple-view" target="_blank" rel="noopener">https://lilianweng.github.io/lil-log/2018/11/30/meta-learning.html#a-simple-view</a></p></li><li><p><a href="https://medium.com/huggingface/from-zero-to-research-an-introduction-to-meta-learning-8e16e677f78a" target="_blank" rel="noopener">from-zero-to-research-an-introduction-to-meta-learning</a></p></li><li><p><a href="http://localhost:4000/blog/2020/05/06/Meta-Learning-Learning-to-learn-fast/meta-learning.png" target="_blank" rel="noopener">http://localhost:4000/blog/2020/05/06/Meta-Learning-Learning-to-learn-fast/meta-learning.png</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- # Meta-Learning(Learning to learn fast) and its approaches --&gt;

&lt;blockquote&gt;
&lt;p&gt;In this blog, I will explain meta-learning what is also
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="https://nayan.co/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="https://nayan.co/tags/Deep-Learning/"/>
    
      <category term="Meta Learning" scheme="https://nayan.co/tags/Meta-Learning/"/>
    
      <category term="Supervised Learning" scheme="https://nayan.co/tags/Supervised-Learning/"/>
    
      <category term="nayan" scheme="https://nayan.co/tags/nayan/"/>
    
      <category term="nayanindia" scheme="https://nayan.co/tags/nayanindia/"/>
    
  </entry>
  
  <entry>
    <title>Python and Kafka: message passing and more</title>
    <link href="https://nayan.co/AI/Pyton-and-Kafka-Message-Passing-and-More/"/>
    <id>https://nayan.co/AI/Pyton-and-Kafka-Message-Passing-and-More/</id>
    <published>2020-05-03T14:50:04.000Z</published>
    <updated>2020-08-11T03:40:04.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-and-Kafka-message-passing-and-more"><a href="#Python-and-Kafka-message-passing-and-more" class="headerlink" title="Python and Kafka: message passing and more"></a>Python and Kafka: message passing and more</h2><p>At many stages during a developer’s career, he/she has to build systems capable of communicating with another. For example, there may be two <strong><em>python</em></strong> programs and the second program’s operations might depend on the output of the first program. There can be multiple programs in that linear sequence, with every consecutive program depending on the output of the previous. The linear sequence may even branch out to two child programs depending on the output of the previous. An example <strong><em>dependency graph</em></strong> is shown below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*w7Bht4t-dwqjDDtYlBdFqQ.jpeg" alt="Fig 1: Dependency graph for python programs"></p><p>As shown in Fig 1, program 2 depends on the output of program 1. Similarly, program 3 depends on the output of program 2. Program 3, in turn, branched out into two children programs accepting output from 3. If the objective of the developer is to make program 4 and program 5 run in parallel then he/she will have to make asynchronous calls to these programs in a multi-threaded fashion. Since python is not inherently thread safe, making scalable multi-threaded systems becomes a bit difficult. This is where <strong><em>Apache Kafka</em></strong> can be used.</p><p>Let me give you brief introduction of <strong><em>Apache Kafka</em></strong> before moving into it’s implementation and integration with Python.</p><p>A software platform developed by <strong>LinkedIn, Kafka *<em>is an open-source stream processing pipeline which was later donated to the *</em>Apache Software foundation.</strong></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*8GbrXbHdH5uPGMb5epWhrg.png" alt="[Apache logo](https://kafka.apache.org/images/logo.png) at [https://kafka.apache.org/](https://kafka.apache.org/)"></p><p>As mentioned on the official <strong>Apache</strong> site, <strong>Kafka</strong> can be used for creating <strong>data pipelines</strong> that are horizontally scalable, extremely fast and fault-tolerant.</p><p>The use-case involving python programs given above is not an exact streaming pipeline but <strong><em>Kafka</em></strong> can be used to solve the problem of sending messages to programs for execution and can be also be used to horizontally scale the information between programs.</p><p>Let’s move forward to see how this can be done.</p><h2 id="1-Installing-Kafka-on-Ubuntu-and-Confluent-Kafka-for-python"><a href="#1-Installing-Kafka-on-Ubuntu-and-Confluent-Kafka-for-python" class="headerlink" title="1. Installing Kafka on Ubuntu and Confluent-Kafka for python:"></a><strong>1. Installing Kafka on Ubuntu and Confluent-Kafka for python:</strong></h2><p>In order to install Kafka, just follow <a href="https://www.digitalocean.com/community/tutorials/how-to-install-apache-kafka-on-ubuntu-18-04" target="_blank" rel="noopener">**this</a>** installation tutorial for Ubuntu 18 given on <a href="https://www.digitalocean.com/" target="_blank" rel="noopener">**DigitalOcean</a>**.</p><p><a href="https://www.confluent.io/" target="_blank" rel="noopener">***Confluent-Kafka</a>*** is a fully managed enterprise platform for Kafka services.</p><p>Confluent also ships a <strong><em>Python Client</em></strong> for Kafka, which can be used to integrate Kafka directly with python. This client can be used to create topics, delete them and also send and receive messages.</p><h2 id="2-Using-Kafka-with-python"><a href="#2-Using-Kafka-with-python" class="headerlink" title="2. Using Kafka with python:"></a>2. Using Kafka with python:</h2><p>Let’s begin my making a project folder.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*4nvSxxZ2jc6yPlYFwxg4wQ.jpeg" alt="Fig 2: Project folder"></p><p>We will be carrying out the experiments using Docker since it’s a wonderful piece of technology and makes a developer’s life extremely easy.</p><p>A good practice would be to have two project folders, but for this experiment would be using just one. To execute the python programs we will be going inside the containers and running and them manually.</p><blockquote><p> If you want a pretty tutorial on using Docker with python checkout these blogs -&gt; <a href="https://medium.com/@abose550/installing-tensorflow-2-0-on-ubuntu-18-04-using-docker-run-all-experiments-from-a-container-4be9c2a8004d" target="_blank" rel="noopener">**Docker and Tensorflow</a> and also <a href="https://medium.com/@abose550/deep-learning-for-production-deploying-yolo-using-docker-2c32bb50e8d6" target="_blank" rel="noopener">Docker and YOLO</a>**</p></blockquote><p>Let’s go ahead and check each of these files now.</p><p><strong>Config.yml : <em>*Contains the topic list and from which the two programs are going to read. Also contains the broker information. A kafka topic retains a certain message for a certain amount of topic. Kafka topics can be also be broken down into partitions. Users can then send specific messages in these partitions. To understand more about Kafka topics and partitions check this link out -&gt; [</em></strong>Kafka topics and partitions](<a href="http://cloudurable.com/blog/kafka-architecture-topics/index.html" target="_blank" rel="noopener">http://cloudurable.com/blog/kafka-architecture-topics/index.html</a>) . ***A Kafka consumer reads messages from a particular topic and the Kafka produces/sends messages to topics.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*IFfYGEzlKdLQtfqEEBVShQ.jpeg" alt="Fig 3: Configuration file for topics"></p><p><strong>KafaConsumer.py and KafkaProducer.py : **These two files contains the classes for the *</strong>Kafka Consumer<strong>* and *</strong>Kafka Producer.<strong>* For complete information please refer to the [*</strong>github repo](<a href="https://github.com/AbhishekBose/kafka_python" target="_blank" rel="noopener">https://github.com/AbhishekBose/kafka_python</a>)<strong><em>. Link given below. These two files contains classes which have been created using the *</em>Consumer</strong> and <strong>Producer</strong> classes from the <strong><em>confluent_kafka</em></strong> library.main(operation,x,y)</p><p><strong>Dockerfile: *<em>Contains the configuration for the docker container which we will be spawning. This will take a *</em>python:3.8 image</strong> and install all required libraries using the <strong>requirements.txt</strong> file. The project folder is added to container using the *<em>ADD *</em>command as shown in Fig 4 below.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Fk5rGui4NbxAvvnBLYbmJg.jpeg" alt="Fig 4: Dockerfile"></p><p>*<em>Requirements.txt *</em>: Contains a list of all the python libraries for this project</p><p><strong>python_1.py : *<em>This file does the task of sending a message to a topic which will be read by the second python code. The *</em>config file</strong> is read using the *<em>PyYaml library. *</em>The function , defined as *<em>main(operation,x,y) *</em>initializes the producer object named prod and sends a message to it. The message is in a json format which can be read the second program. In this example the second function would be performing two operations namely addition and subtraction. The operations and the operators are taken as command line arguments.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*CO_s7768bEv5xALKw5y-rw.jpeg" alt="Fig 5: Shows the program which will be producing messages to a particular topic"></p><p><strong>python_2.py: *<em>This code essentially will contain the consumer. The consumer will read from the topic in which *</em>python_1.py **will be producing the message. The two functions are defined as *</strong>add(x,y) <strong>*and *</strong>subtract(x,y). <strong><em>These functions will be receiving the two operators to perform the operation on, shown in Fig 6.1. The main function defined in Fig 6.2 is while loop which continuously reads from the consumer topic. This function checks the *</em>operation</strong> which was sent by the previous code by reading the message in a json format and calls the respective function. If the operator in the message is <strong><em>sum</em></strong> then the <strong>add</strong> function is called otherwise the <strong>subtract</strong> function is called.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*cDn_HI9hxoFFFMRA273Z8A.jpeg" alt="Fig 6.1: Shows the two function which will be called."></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*aMkG3vQqVpUT02uK9d8sqQ.jpeg" alt="Fig 6.2: Shows the main function which will be reading from the consumer topic."></p><h2 id="3-Building-the-image-and-running-the-container"><a href="#3-Building-the-image-and-running-the-container" class="headerlink" title="3. Building the image and running the container:"></a><strong>3. Building the image and running the container:</strong></h2><p>In order to build the image type the command:</p><pre><code>docker build -t &apos;image_name&apos; .</code></pre><p>Once the image is built, spawn a container by typing the following command:</p><pre><code>docker run -it -d --name=container_name --network=host image_name</code></pre><h2 id="4-Executing-the-programs"><a href="#4-Executing-the-programs" class="headerlink" title="4. Executing the programs:"></a><strong>4. Executing the programs:</strong></h2><p>Go inside the container by typing the following command:</p><pre><code>docker exec -it container_name  bash</code></pre><p>This will get you inside. The above container opens up the bash shell inside the container.</p><p>Run the following commands in two separate shells to witness the output</p><p>Run the consumer first</p><pre><code>cd srcpython python2.py 0</code></pre><p>The 0 here is the <strong>client id</strong> which gives a name to your consumer. You can have <strong><em>multiple consumers</em></strong> reading from the consumer topic. This ensures parallel processing as shown in <strong>Fig 7.1</strong>. Just assign a different <strong>client id</strong> to each <strong>consumer</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/2008/1*aY-01qEPBZYG3a_erAywPw.jpeg" alt="Fig 7.1: Starting the consumer"></p><p>Now execute the producer by :</p><pre><code>python python1.py 5 2 sum</code></pre><p>The operation here is sum and the <strong>operators are 5 and 2</strong> (Fig 7.2)</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AnnjUCi-85d0Z68hQtyqsA.jpeg" alt="Fig 7.2: python1 program executed with the sum operator"></p><p>The output can be immediately seen with the result of the addition operation on the previously shell as shown in Fig 7.3</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*b-5s2RcJoInCfZm0Y_cqCg.jpeg" alt="Fig 7.3 : The output message can be seen and the result 7 as well"></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion:"></a><strong>5. Conclusion:</strong></h2><p>This project was a basic example how <strong>Kafka</strong> can be extensively used for creating massive, parallel data pipelines. At <a href="https://nayan.co">**NAYAN Technologies</a>** we use <strong>Kafka</strong> extensively for our deep learning inference and training data pipelines.</p><p><strong>Github repo</strong>: <a href="https://github.com/AbhishekBose/kafka_python" target="_blank" rel="noopener">***https://github.com/AbhishekBose/kafka_python</a>***</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-and-Kafka-message-passing-and-more&quot;&gt;&lt;a href=&quot;#Python-and-Kafka-message-passing-and-more&quot; class=&quot;headerlink&quot; title=&quot;Python and
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Python" scheme="https://nayan.co/tags/Python/"/>
    
      <category term="Queue" scheme="https://nayan.co/tags/Queue/"/>
    
      <category term="Kafka" scheme="https://nayan.co/tags/Kafka/"/>
    
      <category term="Stream Processing" scheme="https://nayan.co/tags/Stream-Processing/"/>
    
      <category term="Microservices" scheme="https://nayan.co/tags/Microservices/"/>
    
  </entry>
  
  <entry>
    <title>Angular Maps | MarkerCluster</title>
    <link href="https://nayan.co/Web/angular-maps/"/>
    <id>https://nayan.co/Web/angular-maps/</id>
    <published>2020-03-04T11:18:37.000Z</published>
    <updated>2020-08-11T03:40:04.524Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/angular-maps/BG.png" class="" title="l"><h2 id="Marker-Cluster"><a href="#Marker-Cluster" class="headerlink" title="Marker Cluster"></a>Marker Cluster</h2><p>The marker clustering utility helps you to manage multiple markers at different zoom levels.When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.<br>If you have a lot of markers on the map, it’s better to use Marker Cluster setting to organize them better visually.</p><h2 id="Why-marker-clustering"><a href="#Why-marker-clustering" class="headerlink" title="Why marker clustering?"></a>Why marker clustering?</h2><p>The marker clustering utility helps you manage large number of google markers at different zoom levels. To be precise, the ‘markers’ are actually ‘items’ at this point, and only become ‘Markers’ when they’re rendered. Rendering large number of google markers on google map can be very resouce extensive tasks and UI experince is also not good even if we achieve to render them. When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.</p><h2 id="How-marker-clustering-works"><a href="#How-marker-clustering-works" class="headerlink" title="How marker clustering works"></a>How marker clustering works</h2><p>The MarkerClustererPlus library uses the grid-based clustering technique that divides the map into squares of a certain size (the size changes at each zoom level), and groups the markers into each square grid. It creates a cluster at a particular marker, and adds markers that are in its bounds to the cluster. It repeats this process until all markers are allocated to the closest grid-based marker clusters based on the map’s zoom level. If markers are in the bounds of more than one existing cluster, the Maps JavaScript API determines the marker’s distance from each cluster, and adds it to the closest cluster.</p><h2 id="How-to-use-Marker-Cluster-in-Angular-Apps"><a href="#How-to-use-Marker-Cluster-in-Angular-Apps" class="headerlink" title="How to use Marker Cluster in Angular Apps"></a>How to use Marker Cluster in Angular Apps</h2><h3 id="Installation-of-modules"><a href="#Installation-of-modules" class="headerlink" title="Installation of modules"></a>Installation of modules</h3><p>We need to install AGM (Angular Google Maps), js-marker-cluster(peer dependency)</p><ol><li>NPM: <code>npm install js-marker-clusterer @agm/js-marker-clusterer --save</code></li><li>Yarn: <code>yarn add js-marker-clusterer @agm/js-marker-clusterer</code></li></ol><p><strong>Module</strong>: <code>https://www.npmjs.com/package/@agm/js-marker-clusterer</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ol><li><p>Import the module in <code>module.ts</code> file of your anulgar application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &apos;@angular/platform-browser&apos;;</span><br><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">// add these imports</span><br><span class="line">import &#123; AgmCoreModule &#125; from &apos;@agm/core&apos;;</span><br><span class="line">import &#123; AgmJsMarkerClustererModule &#125; from &apos;@agm/js-marker-clusterer&apos;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">],</span><br><span class="line">imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AgmCoreModule.forRoot(&#123;</span><br><span class="line">    apiKey: [&apos;YOUR_API_KEY_HERE&apos;]</span><br><span class="line">    &#125;),</span><br><span class="line">    AgmJsMarkerClustererModule</span><br><span class="line">],</span><br><span class="line">providers: [],</span><br><span class="line">bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>Import the modules in angular component </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as MarkerClusterer from &quot;@google/markerclusterer&quot;</span><br><span class="line"></span><br><span class="line">new MarkerClusterer(map, opt_markers, opt_options)</span><br></pre></td></tr></table></figure></li><li><p>Use in your angular component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;agm-map style=&quot;height: 300px&quot; [latitude]=&quot;51.673858&quot; [longitude]=&quot;7.815982&quot;&gt;</span><br><span class="line">    &lt;agm-marker-cluster imagePath=&quot;https://raw.githubusercontent.com/googlemaps/v3-utility-library/master/markerclustererplus/images/m&quot;&gt;</span><br><span class="line">        &lt;agm-marker [latitude]=&quot;51.673858&quot; [longitude]=&quot;7.815982&quot;&gt;</span><br><span class="line">        &lt;/agm-marker&gt;&lt;!-- multiple markers --&gt;</span><br><span class="line">    &lt;/agm-marker-cluster&gt;</span><br><span class="line">&lt;/agm-map&gt;</span><br></pre></td></tr></table></figure><h3 id="Customize-your-marker-clusters"><a href="#Customize-your-marker-clusters" class="headerlink" title="Customize your marker clusters"></a>Customize your marker clusters</h3><p>There are many ways to adjust how your marker clusters look and function. Many of them won’t even require that you make edits to the underlying library. Instead, there are a number of options you can set when you create your clusters.</p></li><li><p><code>gridSize</code>: the number of pixels within the cluster grid</p></li><li><p><code>zoomOnClick</code>: whether to zoom in on a cluster when clicked</p></li><li><p><code>maxZoom</code>: what farthest level you can zoom in before regular markers are always displayed</p></li><li><p><code>styles</code>: an array of objects for each cluster type that includes textColor, textSize, and other features of the cluster</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const clusterOptions = &#123;</span><br><span class="line">    imagePath: &quot;https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m&quot;,</span><br><span class="line">    gridSize: 30,</span><br><span class="line">    zoomOnClick: false,</span><br><span class="line">    maxZoom: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OutPut:</p><img src="/blog/Web/angular-maps/custom.png" class="" title="l"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;img src=&quot;/blog/Web/angular-maps/BG.png&quot; class=&quot;&quot; title=&quot;l&quot;&gt;

&lt;h2 id=&quot;Marker-Cluster&quot;&gt;&lt;a href=&quot;#Marker-Cluster&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/categories/Web/"/>
    
    
      <category term="Angular" scheme="https://nayan.co/tags/Angular/"/>
    
      <category term="Google Maps" scheme="https://nayan.co/tags/Google-Maps/"/>
    
      <category term="Large markers" scheme="https://nayan.co/tags/Large-markers/"/>
    
  </entry>
  
  <entry>
    <title>Generating Pdf in Ruby on Rails using Prawn</title>
    <link href="https://nayan.co/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/"/>
    <id>https://nayan.co/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/</id>
    <published>2020-02-26T06:02:58.000Z</published>
    <updated>2020-08-11T03:40:04.528Z</updated>
    
    <content type="html"><![CDATA[<p>We all must have got requirement to generate PDFs at backend and store that on cloud. Well, here is a quick guide on how you can start generating the PDFs your own way without any limits.</p><img src="/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/prawn.png" class=""><h2 id="Lets-start-generating-PDF-step-by-step"><a href="#Lets-start-generating-PDF-step-by-step" class="headerlink" title="Lets start generating PDF step by step:-"></a>Lets start generating PDF step by step:-</h2><p>1: Add <strong>prawn</strong> gem to your Gemfile</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'prawn'</span></span><br></pre></td></tr></table></figure><p>2: Create an instance of PDF document</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br></pre></td></tr></table></figure><p>3: Draw some text and style that in your own way</p><p><img src="text_style.png" alt="Text Styling"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.text <span class="string">'My Text'</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Styled Text'</span>, <span class="symbol">style:</span> <span class="symbol">:bold</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Sized Text'</span>, <span class="symbol">size:</span> <span class="number">20</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Colored Text'</span>, <span class="symbol">color:</span> <span class="string">'7f7f7f'</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Aligned Text'</span>, <span class="symbol">align:</span> <span class="symbol">:right</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>4: Adding a space/gap before and after drawing a text</p><p><img src="text_spacing.png" alt="Text Gapping"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.text <span class="string">'My Text'</span></span><br><span class="line">receipt_pdf.move_down <span class="number">50</span></span><br><span class="line">receipt_pdf.text <span class="string">'My Text After Moving down'</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>5: Generate Output file</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This will create a file at your project root directory</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Drawing-tables"><a href="#Drawing-tables" class="headerlink" title="Drawing tables:-"></a>Drawing tables:-</h2><p>1: Prepare data to draw the table</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare receipt details to show in a table in the following format</span></span><br><span class="line"><span class="comment"># [[a1,a2]</span></span><br><span class="line"><span class="comment"># [b1,b2]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># this will form following table</span></span><br><span class="line"><span class="comment"># __|_1___2__</span></span><br><span class="line"><span class="comment"># a | a1  a2</span></span><br><span class="line"><span class="comment"># b | b1  b2</span></span><br><span class="line"></span><br><span class="line">table_data = [[<span class="string">'Items'</span>, <span class="string">'Rates'</span>],</span><br><span class="line">              [<span class="string">'Item1'</span>, <span class="string">"1"</span>],</span><br><span class="line">              [<span class="string">'Item2'</span>, <span class="string">"2"</span>],</span><br><span class="line">              [<span class="string">''</span>, <span class="string">''</span>], <span class="comment"># For adding gap between my data</span></span><br><span class="line">              [<span class="string">'Item3'</span>, <span class="string">"3"</span>],</span><br><span class="line">              [<span class="string">'Item4'</span>, <span class="string">"4"</span>]]</span><br></pre></td></tr></table></figure><p>2: Add <strong>prawn/table</strong> requirement before drawing the table</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'prawn/table'</span></span><br></pre></td></tr></table></figure><p>3: Draw Table using prepared data</p><p><img src="table.png" alt="Text Gapping"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line">receipt_pdf.table table_data <span class="comment"># table_data used from previous step</span></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><p>4: Styling Rows/Columns/Cells</p><p><img src="table_formatting.png" alt="Table Styling"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line"></span><br><span class="line">receipt_pdf.table table_data, <span class="symbol">cell_style:</span> &#123;<span class="symbol">border_width:</span> <span class="number">0</span>, <span class="symbol">width:</span> <span class="number">250</span>, <span class="symbol">padding:</span> [<span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>], <span class="symbol">text_color:</span> <span class="string">'373737'</span>, <span class="symbol">inline_format:</span> <span class="literal">true</span>&#125; <span class="keyword">do</span></span><br><span class="line"> <span class="comment"># Aligning a specific column cells' text to right</span></span><br><span class="line"> columns(-<span class="number">1</span>).align = <span class="symbol">:right</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># To add bottom padding to a specific row</span></span><br><span class="line"> row(-<span class="number">2</span>).padding_bottom = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># To set width of border for a specific row</span></span><br><span class="line"> row(-<span class="number">1</span>).border_top_width = <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Adding-custom-font-to-your-PDF-document"><a href="#Adding-custom-font-to-your-PDF-document" class="headerlink" title="Adding custom font to your PDF document"></a>Adding custom font to your PDF document</h2><p>1: Download Font Files in <strong>.ttf</strong> format<br>2: Place them into <em>font/your_font_name</em> directory at project root level(Create one if it’s not there)<br>3: Set that font to your PDF document instance</p><p><img src="text_font.png" alt="Using Cutom Font"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">your_font = <span class="string">'font/your_font_name/your_font_name.ttf'</span></span><br><span class="line">receipt_pdf = Prawn::Document.new</span><br><span class="line"></span><br><span class="line">default_font = receipt_pdf.font.name</span><br><span class="line"></span><br><span class="line">receipt_pdf.text <span class="string">'Default Font Text'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will change font of your entire document after setting this</span></span><br><span class="line">receipt_pdf.font your_font</span><br><span class="line"></span><br><span class="line">receipt_pdf.text <span class="string">'Your Font Text'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will change font of your entire document to default font</span></span><br><span class="line">receipt_pdf.font default_font</span><br><span class="line"></span><br><span class="line">receipt_pdf.move_down <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To Style all cells of a table</span></span><br><span class="line">receipt_pdf.table table_data, <span class="symbol">cell_style:</span> &#123;<span class="symbol">font:</span> your_font&#125;</span><br><span class="line"></span><br><span class="line">receipt_pdf.move_down <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To Style all cells of a specific column</span></span><br><span class="line">receipt_pdf.table table_data <span class="keyword">do</span></span><br><span class="line"> columns(-<span class="number">1</span>).font = your_font</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="Limit-the-PDF-page-size-to-drawn-area-only-OR-Remove-extra-white-area-after-drawing-all-your-data"><a href="#Limit-the-PDF-page-size-to-drawn-area-only-OR-Remove-extra-white-area-after-drawing-all-your-data" class="headerlink" title="Limit the PDF page size to drawn area only OR Remove extra white area after drawing all your data"></a>Limit the PDF page size to drawn area only OR Remove extra white area after drawing all your data</h2><p><a href="my_pdf_file.pdf">my_pdf_file.pdf</a></p><p>1: Set page length to much higher value than what you want to draw while creating instance on your PDF document</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf = Prawn::Document.new(<span class="symbol">page_size:</span> [<span class="number">600</span>, <span class="number">2000</span>], <span class="symbol">margin:</span> <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>2: Do your drawing</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipt_pdf.text <span class="string">'My Drawing Here'</span></span><br></pre></td></tr></table></figure><p>3: Clip or Resize the document to the drawn area</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">padding_after_drawing = <span class="number">15</span></span><br><span class="line">initial_width = <span class="number">600</span></span><br><span class="line">initial_height = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">receipt_pdf.page.dictionary.data[<span class="symbol">:MediaBox</span>] = [<span class="number">0</span>, receipt_pdf.y - padding_after_drawing, initial_width, initial_height]</span><br><span class="line"></span><br><span class="line">receipt_pdf.render_file <span class="string">'my_pdf_file.pdf'</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="http://prawnpdf.org/manual.pdf" target="_blank" rel="noopener">Prawn Guide</a> with examples</li><li><a href="http://prawnpdf.org/prawn-table-manual.pdf" target="_blank" rel="noopener">Prawn Table Guide</a> with examples</li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/override-devise-auth-token-controllers/">Override Devise Auth Token Controllers</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We all must have got requirement to generate PDFs at backend and store that on cloud. Well, here is a quick guide on how you can start ge
      
    
    </summary>
    
    
      <category term="Ruby on Rails" scheme="https://nayan.co/categories/Ruby-on-Rails/"/>
    
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
      <category term="backend" scheme="https://nayan.co/tags/backend/"/>
    
      <category term="rails" scheme="https://nayan.co/tags/rails/"/>
    
      <category term="ruby" scheme="https://nayan.co/tags/ruby/"/>
    
      <category term="ror" scheme="https://nayan.co/tags/ror/"/>
    
      <category term="ruby on rails" scheme="https://nayan.co/tags/ruby-on-rails/"/>
    
      <category term="pdf" scheme="https://nayan.co/tags/pdf/"/>
    
      <category term="generate pdf" scheme="https://nayan.co/tags/generate-pdf/"/>
    
  </entry>
  
  <entry>
    <title>Angular Charts Features</title>
    <link href="https://nayan.co/Web/angular-advanced/"/>
    <id>https://nayan.co/Web/angular-advanced/</id>
    <published>2020-02-11T11:33:31.000Z</published>
    <updated>2020-08-11T03:40:04.524Z</updated>
    
    <content type="html"><![CDATA[<br><img src="/blog/Web/angular-advanced/BG.png" class=""><h2 id="Animation-Configuration"><a href="#Animation-Configuration" class="headerlink" title="Animation Configuration"></a>Animation Configuration</h2><p>Chart.js animates charts out of the box. A number of options are provided to configure how the animation looks and how long it takes.</p><p>The following animation options are available. The global options for are defined in Chart.defaults.global.animation.</p><ol><li><p><strong>Duration</strong>: Number of milliseconds an animation takes to complete</p></li><li><p><strong>Easing</strong>:</p><ul><li><code>linear</code></li><li><code>easeInQuad</code></li><li><code>easeOutQuad</code></li><li><code>easeInOutQuad</code></li><li><code>easeInCubic</code></li><li><code>easeOutCubic</code></li><li><code>easeInOutCubic</code></li><li><code>easeInQuart</code></li><li><code>easeOutQuart</code></li><li><code>easeInOutQuart</code></li><li><code>easeInQuint</code></li><li><code>easeOutQ</code></li></ul></li><li><p><strong>Animation Callbacks</strong></p></li></ol><p>The onProgress and onComplete callbacks are useful for synchronizing an external draw to the chart animation. The callback is passed a Chart.Animation instance:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Chart object</span><br><span class="line">  chart: Chart,</span><br><span class="line"></span><br><span class="line">  // Current Animation frame number</span><br><span class="line">  currentStep: number,</span><br><span class="line"></span><br><span class="line">  // Number of animation frames</span><br><span class="line">  numSteps: number,</span><br><span class="line"></span><br><span class="line">  // Animation easing to use</span><br><span class="line">  easing: string,</span><br><span class="line"></span><br><span class="line">  // Function that renders the chart</span><br><span class="line">  render: function,</span><br><span class="line"></span><br><span class="line">  // User callback</span><br><span class="line">  onAnimationProgress: function,</span><br><span class="line"></span><br><span class="line">  // User callback</span><br><span class="line">  onAnimationComplete: function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example-of-preogress-bar-animation"><a href="#Example-of-preogress-bar-animation" class="headerlink" title="Example of preogress bar animation"></a>Example of preogress bar animation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">    type: &apos;line&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    options: &#123;</span><br><span class="line">        animation: &#123;</span><br><span class="line">            onProgress: function(animation) &#123;</span><br><span class="line">                progress.value = animation.animationObject.currentStep / animation.animationObject.numSteps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Legend-Configuration"><a href="#Legend-Configuration" class="headerlink" title="Legend Configuration"></a>Legend Configuration</h2><p>The chart legend displays data about the datasets that are appearing on the chart.</p><ol><li><p><strong>Position</strong><br>Position of the legend. Options are:</p><ul><li><code>top</code></li><li><code>left</code></li><li><code>bottom</code></li><li><code>right</code></li></ul></li><li><p><strong>Align</strong><br>Alignment of the legend. Options are:</p><ul><li><code>start</code></li><li><code>center</code></li><li><code>end</code></li></ul></li><li><p><strong>Legend Item Interface</strong></p></li></ol><p>Items passed to the legend onClick function are the ones returned from labels.generateLabels. These items must implement the following interface.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Label that will be displayed</span><br><span class="line">  text: string,</span><br><span class="line"></span><br><span class="line">  // Fill style of the legend box</span><br><span class="line">  fillStyle: Color,</span><br><span class="line"></span><br><span class="line">  // If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect</span><br><span class="line">  hidden: boolean,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap</span><br><span class="line">  lineCap: string,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash</span><br><span class="line">  lineDash: number[],</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset</span><br><span class="line">  lineDashOffset: number,</span><br><span class="line"></span><br><span class="line">  // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin</span><br><span class="line">  lineJoin: string,</span><br><span class="line"></span><br><span class="line">  // Width of box border</span><br><span class="line">  lineWidth: number,</span><br><span class="line"></span><br><span class="line">  // Stroke style of the legend box</span><br><span class="line">  strokeStyle: Color,</span><br><span class="line"></span><br><span class="line">  // Point style of the legend box (only used if usePointStyle is true)</span><br><span class="line">  pointStyle: string | Image,</span><br><span class="line"></span><br><span class="line">  // Rotation of the point in degrees (only used if usePointStyle is true)</span><br><span class="line">  rotation: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following example will create a chart with the legend enabled and turn all of the text red in color.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">    type: &apos;bar&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    options: &#123;</span><br><span class="line">        legend: &#123;</span><br><span class="line">            display: true,</span><br><span class="line">            labels: &#123;</span><br><span class="line">                fontColor: &apos;rgb(255, 99, 132)&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h2><h3 id="Tooltip-Configuration"><a href="#Tooltip-Configuration" class="headerlink" title="Tooltip Configuration"></a>Tooltip Configuration</h3><ol><li><strong>Position Modes</strong><br>Possible modes are:</li></ol><ul><li><code>average</code></li><li><code>nearest</code></li></ul><ol start="2"><li><strong>Alignment</strong><br>The titleAlign, bodyAlign and footerAlign options define the horizontal position of the text lines with respect to the tooltip box. The following values are supported.</li></ol><pre><code>* `left`* `right`* `center`</code></pre><h3 id="Tooltip-Callbacks"><a href="#Tooltip-Callbacks" class="headerlink" title="Tooltip Callbacks"></a>Tooltip Callbacks</h3><ol><li><strong>Label Callback</strong></li></ol><p>The label callback can change the text that displays for a given data point. A common example to round data values; the following example rounds the data to two decimal places.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">  type: &apos;line&apos;,</span><br><span class="line">  data: data,</span><br><span class="line">  options: &#123;</span><br><span class="line">      tooltips: &#123;</span><br><span class="line">          callbacks: &#123;</span><br><span class="line">              label: function(tooltipItem, data) &#123;</span><br><span class="line">                  var label = data.datasets[tooltipItem.datasetIndex].label || &apos;&apos;;</span><br><span class="line"></span><br><span class="line">                  if (label) &#123;</span><br><span class="line">                      label += &apos;: &apos;;</span><br><span class="line">                  &#125;</span><br><span class="line">                  label += Math.round(tooltipItem.yLabel * 100) / 100;</span><br><span class="line">                  return label;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Label Color Callback</strong></li></ol><p>For example, to return a red box for each item in the tooltip you could do:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var chart = new Chart(ctx, &#123;</span><br><span class="line">  type: &apos;line&apos;,</span><br><span class="line">  data: data,</span><br><span class="line">  options: &#123;</span><br><span class="line">      tooltips: &#123;</span><br><span class="line">          callbacks: &#123;</span><br><span class="line">              labelColor: function(tooltipItem, chart) &#123;</span><br><span class="line">                  return &#123;</span><br><span class="line">                      borderColor: &apos;rgb(255, 0, 0)&apos;,</span><br><span class="line">                      backgroundColor: &apos;rgb(255, 0, 0)&apos;</span><br><span class="line">                  &#125;;</span><br><span class="line">              &#125;,</span><br><span class="line">              labelTextColor: function(tooltipItem, chart) &#123;</span><br><span class="line">                  return &apos;#543453&apos;;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Tooltip Item Interface</strong></li></ol><p>The tooltip items passed to the tooltip callbacks implement the following interface.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // Label for the tooltip</span><br><span class="line">  label: string,</span><br><span class="line"></span><br><span class="line">  // Value for the tooltip</span><br><span class="line">  value: string,</span><br><span class="line"></span><br><span class="line">  // X Value of the tooltip</span><br><span class="line">  // (deprecated) use `value` or `label` instead</span><br><span class="line">  xLabel: number | string,</span><br><span class="line"></span><br><span class="line">  // Y value of the tooltip</span><br><span class="line">  // (deprecated) use `value` or `label` instead</span><br><span class="line">  yLabel: number | string,</span><br><span class="line"></span><br><span class="line">  // Index of the dataset the item comes from</span><br><span class="line">  datasetIndex: number,</span><br><span class="line"></span><br><span class="line">  // Index of this data item in the dataset</span><br><span class="line">  index: number,</span><br><span class="line"></span><br><span class="line">  // X position of matching point</span><br><span class="line">  x: number,</span><br><span class="line"></span><br><span class="line">  // Y position of matching point</span><br><span class="line">  y: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://jtblin.github.io/angular-chart.js/" target="_blank" rel="noopener">https://jtblin.github.io/angular-chart.js/</a></li><li><a href="https://github.com/jtblin/angular-chart.js/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jtblin/angular-chart.js/blob/master/README.md</a></li><li><a href="https://valor-software.com/ng2-charts/" target="_blank" rel="noopener">https://valor-software.com/ng2-charts/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;

&lt;img src=&quot;/blog/Web/angular-advanced/BG.png&quot; class=&quot;&quot;&gt;

&lt;h2 id=&quot;Animation-Configuration&quot;&gt;&lt;a href=&quot;#Animation-Configuration&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Web" scheme="https://nayan.co/categories/Web/"/>
    
    
      <category term="Charts" scheme="https://nayan.co/tags/Charts/"/>
    
      <category term="Plugins" scheme="https://nayan.co/tags/Plugins/"/>
    
      <category term="Customization" scheme="https://nayan.co/tags/Customization/"/>
    
  </entry>
  
  <entry>
    <title>Flask + PyMongo Integration</title>
    <link href="https://nayan.co/uncategorized/Flask-PyMongo-Integration/"/>
    <id>https://nayan.co/uncategorized/Flask-PyMongo-Integration/</id>
    <published>2020-02-05T11:09:31.000Z</published>
    <updated>2020-08-11T03:40:04.464Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/uncategorized/Flask-PyMongo-Integration/maxresdefault.jpg" class=""><p>Flask + PyMongo Integration</p><p>In my college days I found quite difficulty regarding “How to integrate my application with the database”. May be most of us (mostly college students) still have the same problem. So today in this post I will show you how to integrate a Flask application with PyMongo.</p><p>What is <strong>PyMongo</strong>?</p><p>As according to its official site,“<strong>PyMongo is a Python distribution containing tools for working with <a href="http://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>, and is the recommended way to work with MongoDB from Python</strong>”. The PyMongo is very easy to use and quite easy to integrate with Flask. For this you must have install MongoDb in your machine.</p><p><strong>Let’s get started.</strong></p><p>If you are new to flask then before diving more into it, I highly recommend to check out my <a href="https://medium.com/@hghimanshu81/how-to-represent-any-trained-model-in-the-form-of-a-web-application-e5af87d9731d" target="_blank" rel="noopener">previous</a> post in which I discussed about how to create your first application.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Sf16kjWkKCSGNfR3mVRcUQ.png" alt="Fig. 1 Folder structure for the project"></p><p>Firstly we will write some basic files for the project before heading towards the main backend logic. Firstly we write the <strong><em>run.py</em></strong> file and write the code to start our flask server</p><pre><code>from labeler import app as  applicationfrom labeler import configapplication.config.from_object(config)application.config.from_pyfile(&apos;config/config.py&apos;)if __name__ == &quot;__main__&quot;:    application.run(host=&apos;0.0.0.0&apos;, port=8000)</code></pre><p>Now, write the <strong><strong>init</strong>.py</strong></p><pre><code>from flask import Flaskfrom flask_bootstrap import Bootstrapapp = Flask(__name__)Bootstrap(app)from labeler import routes</code></pre><p>Now make a <strong>settings.py</strong> file inside the <strong>config</strong> folder and write the below code in it.</p><pre><code>import pymongofrom pymongo import MongoClientENV = &quot;test&quot;if ENV.lower() == &quot;production&quot;:    MONGO_DB_NAME = &apos;image_search&apos;    MONGO_DB_URL = &apos;localhost&apos;else:    MONGO_DB_NAME = &apos;image_search_local&apos;    MONGO_DB_URL = &apos;localhost&apos;CLIENT = MongoClient()CLIENT = MongoClient(MONGO_DB_URL, 27017)DB = CLIENT[MONGO_DB_NAME]</code></pre><p>In this script, we simple configure our mongo database and connect pymongo with the DB.</p><p>Now, its time to make a script for mongo queries. Lets create a <strong>mongo.py</strong> file inside <strong>mongodb</strong> folder and write the below lines in it.</p><pre><code>import pymongofrom pymongo import MongoClientimport sysfrom labeler.config.settings import DBclass settingupDb:    def __init__(self, query, coll_name):        self.query = query        self.coll_name = coll_name    def constructDb(self):        self.coll = DB[self.coll_name]        return self.coll    def insertsToDb(self,db,coll,query):        self.post_id = coll.insert(self.query, check_keys=False)        print(&apos;Data inserted for Object ID:: &apos;,self.post_id)    def updatesInfo(self, db, coll, query, newVal):        self.query = query        self.newVal = newVal        self.updatedColl = coll.update_many(self.query, self.newVal)   def fetchInfo(self, db, coll, query):        self.results = coll.find(query)        return self.results   def aggregateQuery(self, db, coll, query_in_list):       self.results = coll.aggregate(query_in_list)       return self.resultsdef insertData(query, collection):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    c_db.insertsToDb(DB, coll, query)def fetchData(collection, query):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    res = c_db.fetchInfo(DB, coll, query)    return resdef groupingData(collection, query):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    res = c_db.aggregateQuery(DB, coll, query)    return resdef updateData(query, newVal, collection):    c_db = settingupDb(query, collection)    coll = c_db.constructDb()    c_db.updatesInfo(DB, coll, query, newVal)</code></pre><p>In this script, I created a class <em>settingupDb</em>, it basically sets up the db. Then defines some methods based on the queries. In this project we use some basic queries like :-</p><ul><li><p>Insert</p></li><li><p>Find</p></li><li><p>Update</p></li><li><p>Aggregate</p></li></ul><p>Will explain the use of these queries when we use them in the project.</p><p>Now lets make our <strong>routes.py</strong> file.</p><pre><code>from labeler import appimport jsonimport osfrom werkzeug import secure_filenameimport flaskfrom flask import render_templatefrom labeler.backend.handle_requests import STATIC_FOLDER = os.path.dirname(os.path.abspath(__file__)) + &apos;/static/&apos;</code></pre><p>Firstly we will import everything in the script. The last line is for the static folder where we server our media files.</p><p>Since our database is empty, so firstly we will write a <strong>Data Insertion</strong> endpoint. Now, write a <strong>handle_requests.py</strong> file inside the <strong>backend</strong> folder.</p><pre><code>from labeler.mongodb.mongo import fetchData, insertDataCOLL = &quot;Image-Data&quot;def isLabelInDb(label, image_path):    query = {&quot;label&quot;: label}    res = fetchData(COLL, query)    alreadyPresent = False    if res.count() == 0:        insert_q = {&quot;label&quot;: label, &quot;image_path&quot;: image_path}           insertData(insert_q, COLL)    else:        alreadyPresent = True    return alreadyPresent</code></pre><p>This function deals with the insertion and fetching part. The input is the label and the image. Firstly it checks the given label is already present in the database or not, if the label is not present then it inserts it into the database along with the image and if the label is already there in the database then it sets the “alreadyPresent” flag. Now according to the this logic we write our endpoint in the <strong>routes.py</strong> file.</p><pre><code>@app.route(&quot;/createLabels&quot;, methods=[&apos;GET&apos;, &apos;POST&apos;])def createLabels():    if flask.request.method == &apos;POST&apos;:        image = flask.request.files[&apos;image&apos;]        label = flask.request.form[&apos;label&apos;]        image.save(STATIC_FOLDER + secure_filename(image.filename))        alreadyPresent = isLabelInDb(label, image.filename)        if alreadyPresent:            message = &quot;The label is already in the database. Try with other label&quot;            return render_template(&apos;error.html&apos;, message = message)        else:            message = &quot;The label is successfully inserted to the database&quot;            return render_template(&apos;success.html&apos;, message = message)    else:        return render_template(&apos;createLabels.html&apos;)</code></pre><p>This endpoint takes two input for a <em>POST</em> request. The “image” and “label”. It calls the function described above and it renders a template with a message.</p><p>Now we defines our “home” endpoint. In <strong>routes.py</strong> write the below code.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*xcCmqMUDBsx78ryCtf5NHg.png" alt="Fig. 2. Page which creates the label and upload the associated image"></p><pre><code>@app.route(&apos;/home&apos;)def home():    allImages = getAllImages()    data = {}    if len(list(allImages._CommandCursor__data)) != 0:        for r in allImages:            label = r[&apos;_id&apos;]            images = r[&apos;image_path&apos;]            data[label] = images    return render_template(&apos;home.html&apos;, results=data)</code></pre><p>This renders all the images with their function to the home page. Lets create a “getAllImages” function for this code. In the <strong>handle_requests.py</strong> write below code.</p><p><img src="https://cdn-images-1.medium.com/max/2074/1*a0ZuZwhq8SCJJmJKwhVXjg.png" alt="Fig. 3. Home page of the application shows the available labels"></p><pre><code>def getAllImages():    group_q = {&quot;$group&quot;: {&quot;_id&quot;: &quot;$label&quot;, &quot;image_path&quot;: {&quot;$push&quot;: &quot;$image_path&quot;}}}    project_q = {&quot;$project&quot;: {&quot;label&quot;: 1, &quot;image_path&quot;:1}}    pipeline = [group_q, project_q]    res = groupingData(COLL, pipeline)    return res</code></pre><p>This function is basically grouping all the data based on the labels name present in the database and all image values associated with that are pushed into an array.</p><p>Now, we will write a function for fetching of image from database. In the <strong>handle_requests.py</strong> write the below code.</p><pre><code>def getRequiredImages(label):    query = {&quot;label&quot;: label}    res = fetchData(COLL, query)    totalImages = []    if res.count() != 0:        for i in res:            image_name = i[&apos;image_path&apos;]            totalImages.append(image_name)    return totalImages</code></pre><p>This function fetches all the images from the database for the given label name and returns them as a list. Now lets create its endpoint in the <strong>routes.py</strong>.</p><pre><code>@app.route(&apos;/fetchImages&apos;, methods=[&apos;POST&apos;])def fetchImages():    if flask.request.method == &apos;POST&apos;:        label = flask.request.form[&apos;label&apos;]        totalImages = getRequiredImages(label)        if len(totalImages) == 0:            message = &quot;No image is present in the database with the label &quot; + str(label)            return render_template(&apos;error.html&apos;, message = message)        else:            data = [totalImages, label]            return render_template(&apos;show_images.html&apos;, results=data)</code></pre><p>This endpoint takes a label name as input and fetches its images from the database and renders the image on the template.</p><p><img src="https://cdn-images-1.medium.com/max/2440/1*deLzuuUyotCHuYGIz3isfg.png" alt="Fig. 4. Fetching a particular label from the database"></p><p>Now the last type of operation left is <strong>UPDATE</strong>. For this write the below code in <strong>handle_requests.py</strong>.</p><pre><code>def updateInfo(image_path, curr_label, new_label):    curr_label_q = {&quot;label&quot;: curr_label}    new_label_q = {&quot;$set&quot;: {&quot;label&quot;: new_label}}    updateData(curr_label_q, new_label_q, COLL)</code></pre><p>This function takes three input :-</p><ul><li><p>the image name</p></li><li><p>the current label name</p></li><li><p>the new label name</p></li></ul><p>Now its corresponding endpoint in the <strong>routes.py</strong></p><pre><code>@app.route(&apos;/updateLabel&apos;, methods=[&apos;POST&apos;])def updateLabel():    if flask.request.method == &apos;POST&apos;:        image = flask.request.form[&apos;image&apos;]        curr_value = flask.request.form[&apos;current_label&apos;]        new_value = flask.request.form[&apos;new_label&apos;]        updateInfo(image, curr_value, new_value)        message = &quot;Label is updated !!&quot;        return render_template(&apos;success.html&apos;, message=message)</code></pre><p>This endpoint shows a message after successful updation of labels</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*4d_3cmuiPbHOUqW8TLfjgQ.png" alt="Fig. 5. Message showing that label is changed"></p><p><strong>Conclusion</strong></p><p>This is the very basic application which is made by integrating flask with pymongo. The code is available on <a href="https://github.com/hghimanshu/Blog/tree/master/image-labeler" target="_blank" rel="noopener">github.</a> The necessary templates are also uploaded there.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/uncategorized/Flask-PyMongo-Integration/maxresdefault.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;Flask + PyMongo Integration&lt;/p&gt;
&lt;p&gt;In my college da
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>App-Heartbeat</title>
    <link href="https://nayan.co/Android/App-Heartbeat/"/>
    <id>https://nayan.co/Android/App-Heartbeat/</id>
    <published>2020-02-03T13:40:48.000Z</published>
    <updated>2020-08-11T03:40:04.452Z</updated>
    
    <content type="html"><![CDATA[<p>This is an era of mobile technology where everyone is a smartphone user. To be able to use a smartphone we need to ‘Interact’ with it. A simple touch with a finger to open an app is an example of this ‘interact’ and this phenomenon is called ‘User Interaction’.<br>Heart of application will continue beat, as long as user interact. Heartbeat is used to calculate sessions, for how much time a user is interacted with application. When a user is started using app, we create a session. A session has two values, start time and end time. For a new session both start and end time will same (current time of system). Every one minute, we check, is user interacted or not. If user is interacted then we update that session by changing its end time (now end time for that session will be current time of system). If user is not interacted then we create a new session. Reason behind to create a heartbeat of application , we will have at least 60 seconds lost.</p><img src="/blog/Android/App-Heartbeat/heartbeat.jpeg" class="" title="Image_1"><h2 id="Let’s-get-started"><a href="#Let’s-get-started" class="headerlink" title="Let’s get started"></a>Let’s get started</h2><h3 id="Create-a-model"><a href="#Create-a-model" class="headerlink" title="Create a model"></a>Create a model</h3><p>In that data class, we will handle some sessions related tasks (check session is active or not, update session etc.). A session will have two values start time and end time.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data class Session(</span><br><span class="line">    val startTime: Long,</span><br><span class="line">    var endTime: Long</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>We perform some operations in session -</p><h4 id="Is-session-active"><a href="#Is-session-active" class="headerlink" title="- Is session active :"></a>- Is session active :</h4><p>In that we check current session is active or not. If difference between System current time and end time of that session is less than a heartbeat( heartbeat duration + heartbeat buffer). In our case heartbeat duration is 60 seconds and heartbeat buffer is 2 seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun isActive(): Boolean &#123;</span><br><span class="line">        return System.currentTimeMillis() - endTime &lt;  HEARTBEAT_DURATION + HEARTBEAT_BUFFER</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Update-current-session"><a href="#Update-current-session" class="headerlink" title="- Update current session:"></a>- Update current session:</h4><p>If session is active then we update current session. For updating current session we will put system current time in end time of that session.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun update(): Session &#123;</span><br><span class="line">        endTime = System.currentTimeMillis()</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Create-a-manager"><a href="#Create-a-manager" class="headerlink" title="Create a manager"></a>Create a manager</h3><p>For handling all heartbeat operations, we will create a session manager. A session manager will manage all sessions activities like — add session, update session. When we open application in onResume() of activity we will start a handler and onPause(),will stop handler.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">init &#123;</span><br><span class="line">    lifecycleOwner.lifecycle.addObserver(object : LifecycleObserver</span><br><span class="line">           &#123;</span><br><span class="line">               @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span><br><span class="line">               fun startSession() &#123;</span><br><span class="line">               Timber.d(&quot;Starting Session for activity:$&#123;lifecycleOwner.javaClass.name&#125;&quot;)</span><br><span class="line">               handler.post(runnable)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">               fun pauseSession() &#123;</span><br><span class="line">               Timber.d(&quot;Pausing Session for activity:    $&#123;lifecycleOwner.javaClass.name&#125;&quot;)</span><br><span class="line">               handler.removeCallbacks(runnable)</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>In handler we are checking heartbeat of application, that user is interacted with app for last 60 seconds or not. If user is interacted then update current session otherwise create new session. We store these sessions into shared preferences.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fun heartBeat() &#123;</span><br><span class="line">    if (hasUserInteracted) &#123;</span><br><span class="line">        val currentSession = getLastSession()</span><br><span class="line">        if (currentSession != null &amp;&amp; currentSession.isActive()) &#123;</span><br><span class="line">            updateCurrentSession()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            createNewSession()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        handler.removeCallbacks(runnable)</span><br><span class="line">        onSessionTimeoutListener.onTimeout()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hasUserInteracted = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For more sample code , see the <a href="https://github.com/diwakarsinghdiwakar/App-Heartbeat" target="_blank" rel="noopener" title="App-Heartbeat"><code>App-Heartbeat</code></a></p><h2 id="And-we’re-done"><a href="#And-we’re-done" class="headerlink" title="And we’re done!"></a>And we’re done!</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is an era of mobile technology where everyone is a smartphone user. To be able to use a smartphone we need to ‘Interact’ with it. A 
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nayan.co/categories/Android/"/>
    
    
      <category term="android" scheme="https://nayan.co/tags/android/"/>
    
      <category term="user interaction" scheme="https://nayan.co/tags/user-interaction/"/>
    
      <category term="sessions" scheme="https://nayan.co/tags/sessions/"/>
    
      <category term="Diwakar Singh" scheme="https://nayan.co/tags/Diwakar-Singh/"/>
    
  </entry>
  
  <entry>
    <title>Override Devise Auth Token Controllers</title>
    <link href="https://nayan.co/Ruby-on-Rails/override-devise-auth-token-controllers/"/>
    <id>https://nayan.co/Ruby-on-Rails/override-devise-auth-token-controllers/</id>
    <published>2020-01-29T15:56:25.000Z</published>
    <updated>2020-08-11T03:40:04.532Z</updated>
    
    <content type="html"><![CDATA[<p>For authentication and token management at backend in Ruby On Rails we use <a href="https://github.com/lynndylanhurley/devise_token_auth" target="_blank" rel="noopener">devise-token-auth</a>.</p><img src="/blog/Ruby-on-Rails/override-devise-auth-token-controllers/devise_token_auth.png" class=""><h2 id="Sometimes-we-need-to-update-some-of-the-following-default-behaviours"><a href="#Sometimes-we-need-to-update-some-of-the-following-default-behaviours" class="headerlink" title="Sometimes we need to update some of the following default behaviours:-"></a>Sometimes we need to update some of the following default behaviours:-</h2><ul><li>Registration(via facebook, twitter, mobile, email etc.)</li><li>Password reset flow(email reset link OR OTP based)</li><li>We would like to add or remove some fields from the signin API.<br>etc</li></ul><h2 id="Configutation"><a href="#Configutation" class="headerlink" title="Configutation:-"></a>Configutation:-</h2><p>Use <a href="https://devise-token-auth.gitbook.io/devise-token-auth/" target="_blank" rel="noopener">devise-token-auth-guide</a> to setup your devise configuration.</p><p>After configuration, your <strong>routes.rb</strong> would look like this:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line">mount_devise_token_auth_for <span class="string">'User'</span>, <span class="symbol">at:</span> <span class="string">'auth'</span></span><br></pre></td></tr></table></figure><h2 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding:-"></a>Overriding:-</h2><ul><li>Create a package named <code>overrides</code>, in cotrollers package.</li><li><strong>For overriding RegistrationsController</strong> used for signup flow, add <code>registrations_controller.rb</code> to the package we just created and extent the RegistrationsController by <code>DeviseTokenAuth::RegistrationsController</code>.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Overrides</span></span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationsController</span> &lt; DeviseTokenAuth::RegistrationsController</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Now write the <code>create</code> method yourself for your custom parameters you want to use while signing up a user with custom conditions and if there is any condition when you don’t want to handle, then just call <strong>super</strong> and the default signup flow will work for that case.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Overrides</span></span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationsController</span> &lt; DeviseTokenAuth::RegistrationsController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line"></span><br><span class="line">   ... <span class="comment">#Your custom conditions and handling</span></span><br><span class="line"></span><br><span class="line">   @resource = User.new(<span class="symbol">email:</span> email) <span class="comment">#This may vary based on your params and conditions you want</span></span><br><span class="line">   @resource.name = params[<span class="symbol">:name</span>]</span><br><span class="line">   @resource.password = params[<span class="symbol">:password</span>]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">unless</span> @resource.save</span><br><span class="line">    render <span class="symbol">json:</span> &#123; <span class="symbol">message:</span> @resource.errors.full_messages.join(<span class="string">', '</span>) &#125;, <span class="symbol">status:</span> <span class="symbol">:bad_request</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   @token = @resource.create_token</span><br><span class="line">   @resource.save</span><br><span class="line"></span><br><span class="line">   update_auth_header</span><br><span class="line">   render_create_success</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Now Update your <strong>routes.rb</strong></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount_devise_token_auth_for <span class="string">'User'</span>, <span class="symbol">at:</span> <span class="string">'auth'</span>, <span class="symbol">controllers:</span> &#123;</span><br><span class="line"> <span class="symbol">registrations:</span> <span class="string">'overrides/registrations'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Likewise-we-can-override-following-controllers"><a href="#Likewise-we-can-override-following-controllers" class="headerlink" title="Likewise we can override following controllers:-"></a>Likewise we can override following controllers:-</h2><ul><li>ConfirmationsController</li><li>PasswordsController</li><li>OmniauthCallbacksController</li><li>SessionsController</li><li>TokenValidationsController<br>&nbsp;</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References:-"></a>References:-</h2><ol><li><a href="https://github.com/lynndylanhurley/devise_token_auth" target="_blank" rel="noopener">devise_token_auth</a> gem</li><li><a href="https://devise-token-auth.gitbook.io/devise-token-auth/" target="_blank" rel="noopener">Devise Token Auth</a> Guide</li></ol><h2 id="Some-good-reads-you-may-like"><a href="#Some-good-reads-you-may-like" class="headerlink" title="Some good reads you may like:-"></a>Some good reads you may like:-</h2><ol><li><a href="https://nayan.co/blog/Ruby-on-Rails/paytm-gateway-integration/">Paytm Gateway Integration</a></li><li><a href="https://nayan.co/blog/Ruby-on-Rails/generating-pdf-in-ruby-on-rails/">Generating Pdf in Ruby on Rails using Prawn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For authentication and token management at backend in Ruby On Rails we use &lt;a href=&quot;https://github.com/lynndylanhurley/devise_token_auth&quot;
      
    
    </summary>
    
    
      <category term="Ruby on Rails" scheme="https://nayan.co/categories/Ruby-on-Rails/"/>
    
    
      <category term="Ashish Jajoria" scheme="https://nayan.co/tags/Ashish-Jajoria/"/>
    
      <category term="backend" scheme="https://nayan.co/tags/backend/"/>
    
      <category term="rails" scheme="https://nayan.co/tags/rails/"/>
    
      <category term="ruby" scheme="https://nayan.co/tags/ruby/"/>
    
      <category term="ror" scheme="https://nayan.co/tags/ror/"/>
    
      <category term="authentication" scheme="https://nayan.co/tags/authentication/"/>
    
      <category term="devise" scheme="https://nayan.co/tags/devise/"/>
    
      <category term="devise_auth_token" scheme="https://nayan.co/tags/devise-auth-token/"/>
    
  </entry>
  
  <entry>
    <title>Character-Recognition-with-CNN-network</title>
    <link href="https://nayan.co/AI/Character-Recognition-with-CNN-network/"/>
    <id>https://nayan.co/AI/Character-Recognition-with-CNN-network/</id>
    <published>2020-01-29T11:47:04.000Z</published>
    <updated>2020-08-11T03:40:04.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post talks about a simple Convolution Neural Network (CNN) which is used to<br>recognize characters i.e. Numeric and Alphabet. We have total 10 Numeric and 26<br>Alphabets that sums up the total number of classes in our network to 36. In<br>order to get characters from the License Plates we first need to use some kind<br>of License Plate detector which is followed by a Character segmentation method<br>in order to extract character from the License Plates (LP).</p><h2 id="Architecture-of-model"><a href="#Architecture-of-model" class="headerlink" title="Architecture of model"></a>Architecture of model</h2><p>We have used very familiar CNN network for OCR, usually CNN consists of some<br>Convolution layers(All Convolution layers are followed by max pooling layers)<br>and fully connected layers.</p><p>We already know much about Convolution layers so i am gonna talk about max<br>pooling and fully connected layers here.</p><p><strong>Pooling</strong> <strong>layers</strong> section would reduce the number of parameters when the<br>images are too large. Spatial pooling also called sub-sampling or down-sampling<br>which reduces the dimensionality of each map but retains important information.<br>Spatial pooling can be of different types:</p><ul><li>Max Pooling</li><li>Average Pooling</li><li>Sum Pooling</li></ul><p>Max pooling takes the largest element from the rectified feature map. Taking the<br>largest element could also take the average pooling. Sum of all elements in the<br>feature map call as sum pooling.</p><p>The layer we call as <strong>Fully Connected Layer (FC) layer</strong>, we flattened our<br>matrix into vector and feed it into a fully connected layer like a neural<br>network. After the last max pooling layer there will be a sequence of FC layers.<br>Finally we will apply an activation function such as softmax or sigmoid to<br>classify the outputs between classes.</p><p>Model configuration is given below:</p><p>Total layer : 14</p><ol><li>Convolution with 64 different filters in size of (3x3)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function</li><li>Batch Normalization</li></ul></li><li>Convolution with 128 different filters in size of (3x3)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function</li><li>Batch Normalization</li></ul></li><li>Convolution with 256 different filters in size of (5x5)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function </li><li>Batch Normalization</li></ul></li><li>Convolution with 512 different filters in size of (5x5)</li><li>Max Pooling by 2<ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" target="_blank" rel="noopener">ReLU</a> activation function </li><li>Batch Normalization</li></ul></li><li>Flattening the 3-D output of the last convolving operations.</li><li>Fully Connected Layer with 128 units</li><li>Fully Connected Layer with 256 units</li><li>Fully Connected Layer with 512 units</li><li>Fully Connected Layer with 1024 units</li><li>Fully Connected Layer with 36 units (number of classes)<img src="/blog/AI/Character-Recognition-with-CNN-network/p1.png" class=""> <center>Figure 1.  Architecture of model</center></li></ol><h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><p>Defining a placeholder in tensorflow is very common. When we want to declare our<br>input and output without initialization this method comes very useful. You can<br>use them during training of model by feeding them with training data and labels.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def create_placeholders(n_H0, n_W0, n_C0, n_y):</span><br><span class="line">    X = tf.placeholder(tf.float32, shape = (None, n_H0, n_W0, n_C0), name=&apos;X&apos;)</span><br><span class="line">    Y = tf.placeholder(tf.float32, shape = (None, n_y), name = &apos;Y&apos;)</span><br><span class="line">    keep_prob = tf.placeholder(tf.float32, name=&quot;keep_prob&quot;)</span><br><span class="line"></span><br><span class="line">    return X,Y,keep_prob</span><br><span class="line"></span><br><span class="line"># X_train contains training data with shape (batch_size,height,widht,channel)</span><br><span class="line"></span><br><span class="line"># Y_train contains labels of training data with shape (batch_size,num_classes,1)</span><br><span class="line">m, n_H0, n_W0, n_C0 = X_train.shape</span><br><span class="line">n_y = Y_train.shape[1]</span><br><span class="line">X, Y, keep_prob = create_placeholders(n_H0, n_W0, n_C0, n_y)</span><br></pre></td></tr></table></figure><br> <p>Once you have defined your model architecture you now need to define cost and<br>optimizer for your model which is defined in the next section.</p><h2 id="Cost-function-and-optimizer"><a href="#Cost-function-and-optimizer" class="headerlink" title="Cost function and optimizer"></a>Cost function and optimizer</h2><p>Cost function gives degree of error between predicted and expected values and<br>after that it represent it in form of a real number. Whereas optimizer update<br>the weight parameters to minimize the cost function.</p><p>Finally, you’ll define cost, optimizer, and accuracy. The <a href="https://www.tensorflow.org/api_docs/python/tf/math/reduce_mean" target="_blank" rel="noopener">tf.reduce_mean</a><br>takes an input tensor to reduce, and the input tensor is the results of  certain<br>loss functions between predicted results and ground truths. We have to measure<br>loss over 36 classes, <a href="https://www.tensorflow.org/api_docs/python/tf/nn/softmax_cross_entropy_with_logits" target="_blank" rel="noopener">tf.nn.softmax_cross_entropy_with_logis</a>  function is<br>used. </p><p>When training the network, what you want is minimize  the cost by applying a<br>algorithm of your choice. It could be <a href="https://www.tensorflow.org/api_docs/python/tf/train/GradientDescentOptimizer" target="_blank" rel="noopener">SGD</a>,<a href="https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer" target="_blank" rel="noopener">AdamOptimizer</a><a href="https://www.tensorflow.org/api_docs/python/tf/train/AdagradOptimizer" target="_blank" rel="noopener">,AdagradOptimizer</a> or<br>something else. You have to study how each algorithm works to choose what<br>to use, but AdamOptimizer works fine for most cases in general.</p><p>Please find cost and optimizer sample below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = 0.001</span><br><span class="line"># X is placeholder you defined in previous section</span><br><span class="line">Z3 = forward_propagation(X, keep_prob)</span><br><span class="line"></span><br><span class="line"># Z3 has the model structure</span><br><span class="line"># Loss and Optimizer</span><br><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=Z3, labels=Y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"># Accuracy</span><br><span class="line">y_pred = tf.nn.softmax(Z3)</span><br><span class="line">y_pred_class = tf.argmax(y_pred, axis = 1)</span><br><span class="line">y_true_class = tf.argmax(Y, axis = 1)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(y_pred_class, y_true_class)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So in this post i have explained basic steps to train simple CNN network for any<br>classification task i.e. OCR in this particular post. I have given all the steps<br>except the training part for that you just need to use session of tensorflow<br>while feeding image data and labels for those images to placeholder you have<br>created to the session.run function.</p><br> <br> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This post talks about a simple
      
    
    </summary>
    
    
      <category term="AI" scheme="https://nayan.co/categories/AI/"/>
    
    
      <category term="Machine Learning" scheme="https://nayan.co/tags/Machine-Learning/"/>
    
      <category term="Deep Learning" scheme="https://nayan.co/tags/Deep-Learning/"/>
    
      <category term="OCR" scheme="https://nayan.co/tags/OCR/"/>
    
      <category term="Character Recognition" scheme="https://nayan.co/tags/Character-Recognition/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with Ruby on Rails</title>
    <link href="https://nayan.co/Rails/rails-getting-started/"/>
    <id>https://nayan.co/Rails/rails-getting-started/</id>
    <published>2020-01-28T08:00:00.000Z</published>
    <updated>2020-08-11T03:40:04.564Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/Rails/rails-getting-started/ruby-on-rails.png" class=""><p>We recently inducted a couple of engineers into our Rails team. Both of them had a web frontend experience, but zero experience with Ruby or backend development. Thanks to the simplicity and convention focussed approach of the Rails framework, both of them were writing test driven production grade code within a week!</p><p>First thing was setting up their machines. We decided to go with</p><ul><li>Ubuntu 18.04 for the OS</li><li>RVM as the Ruby version manager</li><li>RubyMine as the IDE</li><li>Postgresql as the database</li></ul><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>First step was to get them comfortable with Ruby. We believe that doing is the best way of learning. So we got them to complete the wonderful koans at <a href="http://rubykoans.com/" target="_blank" rel="noopener">http://rubykoans.com/</a> to get hands on practice.</p><p>An important thing while working in a team is to have consistent coding style across all members. We follow the style guide at <a href="https://github.com/rubocop-hq/ruby-style-guide" target="_blank" rel="noopener">https://github.com/rubocop-hq/ruby-style-guide</a> , so they read through the guide.</p><h3 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h3><p>We feel the best guide for Rails is the official guide itself.</p><p><a href="https://edgeguides.rubyonrails.org/" target="_blank" rel="noopener">https://edgeguides.rubyonrails.org/</a></p><p>The three sections that were assigned were,</p><ul><li>Getting Started with Rails</li><li>Models</li><li>Controllers</li></ul><p>We skipped the views as we mostly work on API only apps.</p><p>After this, we covered the Rails style guide <a href="https://github.com/rubocop-hq/rails-style-guide" target="_blank" rel="noopener">https://github.com/rubocop-hq/rails-style-guide</a> .</p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>We use <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a> and <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">FactoryBot</a> internally for writing our tests.</p><p>For RSpec, the Github page is a good starting point <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">https://github.com/rspec/rspec-rails</a></p><p>For FactoryBot, we assigned the Getting Started guide on Github <a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md" target="_blank" rel="noopener">https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md</a></p><h3 id="Continuing-Education"><a href="#Continuing-Education" class="headerlink" title="Continuing Education"></a>Continuing Education</h3><p>With these basic tutorials, the engineers were basically ready for contributing to production. Their first few pull requests had many comments, but they came down significantly within the first two weeks.</p><p>For continuing our Rails education, we keep reading up on the frequent gems that we use, such as</p><ul><li>devise</li><li>aasm</li><li>active_model_serializers</li><li>pundit</li><li>resque</li><li>whenever</li><li>carrierwave</li></ul><p>and other excellent gems.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>We got a pleasant reminder as to why Rails is our favorite framework to work on. Within the first few weeks only the engineers were writing production grade, well tested code.</p><p>Hats off to the Ruby philosophy and Matz that our fresh Ruby engineers were able to start guessing the function names for different classes almost immediately!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/blog/Rails/rails-getting-started/ruby-on-rails.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;We recently inducted a couple of engineers into our Rails team.
      
    
    </summary>
    
    
      <category term="Rails" scheme="https://nayan.co/categories/Rails/"/>
    
    
      <category term="Ruby" scheme="https://nayan.co/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://nayan.co/tags/Rails/"/>
    
  </entry>
  
</feed>
